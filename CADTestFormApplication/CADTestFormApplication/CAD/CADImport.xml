<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CADImport</name>
    </assembly>
    <members>
        <member name="T:ICSharpCode.SharpZipLib.Zip.UseZip64">
            <summary>
            Determines how entries are tested to see if they should use Zip64 extensions or not.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.UseZip64.Off">
            <summary>
            Zip64 will not be forced on entries during processing.
            </summary>
            <remarks>An entry can have this overridden if required <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.ForceZip64"></see></remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.UseZip64.On">
            <summary>
            Zip64 should always be used.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.UseZip64.Dynamic">
            <summary>
            #ZipLib will determine use based on entry values when added to archive.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.CompressionMethod">
            <summary>
            The kind of compression used for an entry in an archive
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored">
            <summary>
            A direct copy of the file contents is held in the archive
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflated">
            <summary>
            Common Zip compression method using a sliding dictionary 
            of up to 32KB and secondary compression from Huffman/Shannon-Fano trees
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflate64">
            <summary>
            An extension to deflate with a 64KB window. Not supported by #Zip currently
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.BZip2">
            <summary>
            BZip2 compression. Not supported by #Zip.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.WinZipAES">
            <summary>
            WinZip special for AES encryption, Now supported by #Zip.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm">
            <summary>
            Identifies the encryption algorithm used for an entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.None">
            <summary>
            No encryption has been used.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.PkzipClassic">
            <summary>
            Encrypted using PKZIP 2.0 or 'classic' encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Des">
            <summary>
            DES encryption has been used.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.RC2">
            <summary>
            RCS encryption has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes168">
            <summary>
            Triple DES encryption with 168 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes112">
            <summary>
            Triple DES with 112 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Aes128">
            <summary>
            AES 128 has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Aes192">
            <summary>
            AES 192 has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Aes256">
            <summary>
            AES 256 has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.RC2Corrected">
            <summary>
            RC2 corrected has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Blowfish">
            <summary>
            Blowfish has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Twofish">
            <summary>
            Twofish has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.RC4">
            <summary>
            RC4 has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Unknown">
            <summary>
            An unknown algorithm has been used for encryption.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags">
            <summary>
            Defines the contents of the general bit flags field for an archive entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Encrypted">
            <summary>
            Bit 0 if set indicates that the file is encrypted
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Method">
            <summary>
            Bits 1 and 2 - Two bits defining the compression method (only for Method 6 Imploding and 8,9 Deflating)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Descriptor">
            <summary>
            Bit 3 if set indicates a trailing data desciptor is appended to the entry data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.ReservedPKware4">
            <summary>
            Bit 4 is reserved for use with method 8 for enhanced deflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Patched">
            <summary>
            Bit 5 if set indicates the file contains Pkzip compressed patched data.
            Requires version 2.7 or greater.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.StrongEncryption">
            <summary>
            Bit 6 if set indicates strong encryption has been used for this entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Unused7">
            <summary>
            Bit 7 is currently unused
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Unused8">
            <summary>
            Bit 8 is currently unused
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Unused9">
            <summary>
            Bit 9 is currently unused
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Unused10">
            <summary>
            Bit 10 is currently unused
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.UnicodeText">
            <summary>
            Bit 11 if set indicates the filename and 
            comment fields for this file must be encoded using UTF-8.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.EnhancedCompress">
            <summary>
            Bit 12 is documented as being reserved by PKware for enhanced compression.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.HeaderMasked">
            <summary>
            Bit 13 if set indicates that values in the local header are masked to hide
            their actual values, and the central directory is encrypted.
            </summary>
            <remarks>
            Used when encrypting the central directory contents.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware14">
            <summary>
            Bit 14 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware15">
            <summary>
            Bit 15 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipConstants">
            <summary>
            This class contains constants used for Zip format files
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VersionMadeBy">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CanDecompress"/>.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VERSION_MADE_BY">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">ZipInputStream.CanDecompressEntry</see>.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VersionStrongEncryption">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VERSION_STRONG_ENCRYPTION">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VERSION_AES">
            <summary>
            Version indicating AES encryption
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VersionZip64">
            <summary>
            The version required for Zip64 extensions (4.5 or higher)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LocalHeaderBaseSize">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCHDR">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.Zip64DataDescriptorSize">
            <summary>
            Size of Zip64 data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.DataDescriptorSize">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTHDR">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CentralHeaderBaseSize">
            <summary>
            Size of central header entry (excluding variable fields)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENHDR">
            <summary>
            Size of central header entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EndOfCentralRecordBaseSize">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDHDR">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CryptoHeaderSize">
            <summary>
            Size of 'classic' cryptographic header stored before any entry data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CRYPTO_HEADER_SIZE">
            <summary>
            Size of cryptographic header stored before entry data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LocalHeaderSignature">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCSIG">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SpanningSignature">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SPANNINGSIG">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SpanningTempSignature">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SPANTEMPSIG">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.DataDescriptorSignature">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTSIG">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIG">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CentralHeaderSignature">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.Zip64CentralFileHeaderSignature">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIG64">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.Zip64CentralDirLocatorSignature">
            <summary>
            Signature for Zip64 central directory locator
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ArchiveExtraDataSignature">
            <summary>
            Signature for archive extra data signature (were headers are encrypted).
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CentralHeaderDigitalSignature">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENDIGITALSIG">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EndOfCentralDirectorySignature">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDSIG">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[],System.Int32)">
            <summary>
            Convert a portion of a byte array to a string.
            </summary>		
            <param name="data">
            Data to convert to string
            </param>
            <param name="count">
            Number of bytes to convert starting from index 0
            </param>
            <returns>
            data[0]..data[length - 1] converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="flags">The applicable general purpose bits flags</param>
            <param name="data">
            Byte array to convert
            </param>
            <param name="count">The number of bytes to convert.</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <param name="flags">The applicable general purpose bits flags</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.Int32,System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="flags">The applicable <see cref="T:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags">general purpose bits flags</see></param>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.#ctor">
            <summary>
            Initialise default instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipConstants">ZipConstants</see>
            </summary>
            <remarks>
            Private to prevent instances being created.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipConstants.DefaultCodePage">
            <summary>
            Default encoding used for string conversion.  0 gives the default system OEM code page.
            Dont use unicode encodings if you want to be Zip compatible!
            Using the default code page isnt the full solution neccessarily
            there are many variable factors, codepage 850 is often a good choice for
            European users, however be careful about compatability.
            </summary>
        </member>
        <member name="T:CADImport.Printing.PrintingForm">
            <summary>
            Represents a form that implements printing operations.
            </summary>
        </member>
        <member name="F:CADImport.Printing.PrintingForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CADImport.Printing.PrintingForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CADImport.Printing.PrintingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CADImport.Printing.PrintingForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Printing.PrintingForm">PrintingForm</see> class.
            </summary>
        </member>
        <member name="M:CADImport.Printing.PrintingForm.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Main procedure of the window for window messages handling
            </summary>
            <param name="m">Window message</param>
        </member>
        <member name="M:CADImport.Printing.PrintingForm.LoadPrinterList">
            <summary>
            Loads a list of installed printers
            </summary>
        </member>
        <member name="M:CADImport.Printing.PrintingForm.LoadPagesList">
            <summary>
            Loads a list of the page formats available for the current printer
            </summary>
        </member>
        <member name="M:CADImport.Printing.PrintingForm.Print(System.Boolean)">
             <summary>
             Prints a current CAD image.
             </summary>
            <param name="sendToPrinter">Send print document to printer</param>		
        </member>
        <member name="M:CADImport.Printing.PrintingForm.BeginPrintEvent(System.Object,System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Handles BeginPrint event.
            </summary>
        </member>
        <member name="M:CADImport.Printing.PrintingForm.CreateNewPages">
            <summary>
            Creates new <see cref="T:System.Drawing.Printing.PrintDocument">PrintDocument</see>
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.VisibleRectangle">
            <summary>
            Gets or sets visible rectangle.
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.ImageRectangleF">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.MultipleLanguagesPath">
            <summary>
            Gets or sets a path to the language files directory
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.LngFileName">
            <summary>
            Gets or sets a name of the language file
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.PrintDocument">
            <summary>
            Printing document
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.LayerForm">
            <summary>
            Gets or sets layer selection window for current <see cref="P:CADImport.Printing.PrintingForm.Image"> image</see>
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.FormatSize">
            <summary>
            Gets or sets size of the page where the current <see cref="P:CADImport.Printing.PrintingForm.Image">image</see> is scaled
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.TypePage">
            <summary>
            Gets or sets current scaling type from the <see cref="T:CADImport.Printing.DrawingSize">DrawingSize</see> value set
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.Scale">
            <summary>
            Gets or sets current scaling factor for the image
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.Image">
            <summary>
            Gets or sets current <see cref="T:CADImport.CADImage">image</see>
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.PlotUnit">
            <summary>
            Gets or sets units for current printing <see cref="P:CADImport.Printing.PrintingForm.Image">image</see>
            from <see cref="T:CADImport.Printing.PlotPaperUnits">PlotPaperUnits</see> value set
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.ToolButtonsPanel">
            <summary>
            Gets or sets <see cref="T:System.Windows.Forms.ToolBar">ToolBar</see> control item with the set of functional buttons for setting printing parameters
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.ToolButtonsPanel2">
            <summary>
            Gets or sets <see cref="T:System.Windows.Forms.ToolBar">ToolBar</see> control item with the set of functional buttons for setting printing parameters
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.PreviewControl">
            <summary>
            Gets or sets <see cref="T:CADImport.Printing.PrintPreviewControlEx">PrintPreviewControlEx</see> control item
            to preview, how the document will be printed.
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.OptionsTabControl">
            <summary>
            Gets or sets <see cref="T:System.Windows.Forms.TabControl">TabControl</see> unit,
            contains control items for specifying general printing parameters
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.PrintersGrBox">
            <summary>
            Gets <see cref="T:System.Windows.Forms.GroupBox">GroupBox</see> unit,
            contains control items for specifying general printer parameters
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.PaperOrientationGrBox">
            <summary>
            Gets <see cref="T:System.Windows.Forms.GroupBox">GroupBox</see> unit,
            contains control items for specifying orientation parameters of the printing page
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.PaperUnitsGrBox">
            <summary>
            Gets <see cref="T:System.Windows.Forms.GroupBox">GroupBox</see> unit,
            contains control items for specifying current image units
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.PageBoundsGrBox">
            <summary>
            Gets <see cref="T:System.Windows.Forms.GroupBox">GroupBox</see> unit,
            contains control items for specifying the page paragraphs
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.GroupScaleGrBox">
            <summary>
            Gets <see cref="T:System.Windows.Forms.GroupBox">GroupBox</see> unit,
            contains control items for specifying the image size
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.FormatSizeGrBox">
            <summary>
            Gets <see cref="T:System.Windows.Forms.GroupBox">GroupBox</see> unit,
            contains control items for specifying the image size
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.PositionGrBox">
            <summary>
            Gets <see cref="T:System.Windows.Forms.GroupBox">GroupBox</see> unit,
            contains control items for specifying the image position
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.ZeroLineWidth">
            <summary>
            Gets <see cref="T:System.Windows.Forms.NumericUpDown">NumericUpDown</see> control unit,
            contains zero width of a line for the current image
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.DeviceSettingsTabPage">
            <summary>
            Gets <see cref="T:System.Windows.Forms.TabPage">TabPage</see> unit,
            contains control items for specifying general settings of the printing device
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.DrawingSettingsTabPage">
            <summary>
            Gets <see cref="T:System.Windows.Forms.TabPage">TabPage</see> unit,
            contains control items for specifying general settings of the current image
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.CADDrawingTabPage">
            <summary>
            Gets <see cref="T:System.Windows.Forms.TabPage">TabPage</see> unit,
            contains control items for specifying general settings of the current image
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.ToolPrintPanel">
            <summary>
            Gets <see cref="T:System.Windows.Forms.Panel">Panel</see> unit,
            contains control items for specifying general settings of the current image
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.ButtonsImageList">
            <summary>
            Gets <see cref="T:System.Windows.Forms.ImageList">ImageList</see> unit,
            contains images for control items of the current window
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.PaperSizes">
            <summary>
            A list of available <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection">paper sizes</see> for current printer
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.NullWidth">
            <summary>
            Gets or sets a minimal (zero) line width for the current image
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.LeftImagePos">
            <summary>
            Offsets the drawing image to left/right
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintingForm.TopImagePos">
            <summary>
            Offsets the drawing image up/down
            </summary>
        </member>
        <member name="T:CADImport.CADImportForms.LayerForm">
            <summary>
            Represents form for layers window in demos.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.LayerForm.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CADImport.CADImportForms.LayerForm"/> class.
            </summary>
        </member>
        <member name="F:CADImport.CADImportForms.LayerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.LayerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CADImport.CADImportForms.LayerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.LayerForm.MultipleLanguagesPath">
            <summary>
            Gets or sets a path to the language files directory
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.LayerForm.LngFileName">
            <summary>
            Gets or sets a name of the language file
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.LayerForm.ImageList">
            <summary>
            Gets an <see cref="T:System.Windows.Forms.ImageList">ImageList</see> that contains images corresponding to 
            layers of the current CAD image in the <see cref="T:CADImport.CADImportForms.LayerForm">LayerForm</see>. 
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.LayerForm.LayerList">
            <summary>
            Gets a list of layers and their properties
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.LayerForm.DetInvalidate">
            <summary>
            Gets or sets value that indicates if layer will be redrawn on changing of the visibility mode
            </summary>
        </member>
        <member name="T:CADImport.CADImportForms.EditorOptions">
            <summary>
            Represents a form for the options dialog in Editor demo.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.EditorOptions.OnChangeLngPath(System.String)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportForms.OptionsForm.ChangeLngPath">ChangeLngPath</see> event
            </summary>
            <param name="val">A path to the folder, which contains language files (.lng)</param>
        </member>
        <member name="M:CADImport.CADImportForms.EditorOptions.OnChangeLanguage(System.String,System.Int32)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportForms.OptionsForm.ChangeLanguage">ChangeLanguage</see> event
            </summary>
            <param name="val">Specified language</param>
            <param name="index">An index of the specified language in the language list</param>
        </member>
        <member name="M:CADImport.CADImportForms.EditorOptions.OnChangeLngPathEvent(System.String)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportForms.EditorOptions.ChangeLngPathEvent">ChangeLngPathEvent</see> event
            </summary>
            <param name="val">A path to language files (.lng) folder</param>
        </member>
        <member name="M:CADImport.CADImportForms.EditorOptions.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CADImport.CADImportForms.EditorOptions"/> class.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.EditorOptions.SelectTextTab">
            <summary>
            Chooses Text tab in the settings window
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.EditorOptions.SelectMTextTab">
            <summary>
            Chooses MText tab in the settings window
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.EditorOptions.AddNewMTextString(System.String,System.String,System.Drawing.Font,System.Int32)">
            <summary>
            Generates a string for <see cref="T:CADImport.CADMText">CADMText</see>
            </summary>
            <param name="val"><see cref="T:CADImport.CADMText">CADMText</see> text</param>
            <param name="name"><see cref="T:CADImport.CADMText">CADMText</see> name</param>
            <param name="fnt"><see cref="T:CADImport.CADMText">CADMText</see> font</param>
            <param name="col"><see cref="T:CADImport.CADMText">CADMText</see> color</param>
            <returns></returns>
        </member>
        <member name="F:CADImport.CADImportForms.EditorOptions.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.EditorOptions.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CADImport.CADImportForms.EditorOptions.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:CADImport.CADImportForms.EditorOptions.ChangeLngPath">
            <summary>
            Occurs when language files directory was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportForms.EditorOptions.ChangeLanguage">
            <summary>
            Occurs when the language of an application was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportForms.EditorOptions.ChangeLngPathEvent">
            <summary>
            Occurs when language files directory was changed
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.EditorOptions.MultipleLanguagesPath">
            <summary>
            Gets or sets a path to the language files (.lng) folder
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.EditorOptions.LngFileName">
            <summary>
            Gets or sets a name of the language file (.lng)
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.EditorOptions.SolidHatch">
            <summary>
            Gets or sets the solid style for <see cref="T:CADImport.CADHatch">CADHatch</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.EditorOptions.HatchName">
            <summary>
            Gets or sets a <see cref="P:CADImport.CADHatch.HatchName">name</see> for <see cref="T:CADImport.CADHatch">CADHatch</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.EditorOptions.LngDir">
            <summary>
            Gets or sets a path to the language files (.lng) folder
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.EditorOptions.MTexts">
            <summary>
            A set of parameters for <see cref="T:CADImport.CADMText">CADMText</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.EditorOptions.MTextPages">
            <summary>
            A set of strings for <see cref="T:CADImport.CADMText">CADMText</see> object creation
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.EditorOptions.FileName">
            <summary>
            Gets or sets a name of loading image for  <see cref="T:CADImport.CADImageEnt">CADImageEnt</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.EditorOptions.ColorEntity">
            <summary>
            Gets or sets an entity color
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.EditorOptions.TextHeight">
            <summary>
            Gets or sets the text height for the <see cref="T:CADImport.CADText">CADText</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.EditorOptions.TextRotation">
            <summary>
            Gets or sets the rotation angle for the <see cref="T:CADImport.CADText">CADText</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.EditorOptions.MTextRotation">
            <summary>
            Gets or sets the rotation angle for <see cref="T:CADImport.CADMText">CADMText</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.EditorOptions.TextEntText">
            <summary>
            Gets or sets a text for the <see cref="T:CADImport.CADText">CADText</see> object
            </summary>
        </member>
        <member name="F:OpenGL.WGL.wglDllName">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADImport.LicenseType">
            <summary>
            Specifies the type of license registration.
            </summary>
        </member>
        <member name="F:CADImport.LicenseType.Register">
            <summary>
            The registration key is stored in the registry at the computer where the application is installed.
            </summary>
        </member>
        <member name="F:CADImport.LicenseType.Floating">
            <summary>
            The registration is controlled by the LAN server which restricts the number of simultaneously working applications.
            </summary>
        </member>
        <member name="T:CADImport.Protection">
            <summary>
            Provides functionality for the application's registration.
            </summary>
        </member>
        <member name="M:CADImport.Protection.Register(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Realizes the registration process.
            </summary>
            <param name="name">The string containing the licensee name.</param>
            <param name="mail">The string containing the licensee e-mail address.</param>
            <param name="key">The string containing the registration key.</param>
            <param name="addToReg">The boolean value indicating if the registration data is added to the registry. <b>true</b> 
            if the registration data is added to the registry; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:CADImport.Protection.Register(System.String,System.Collections.ArrayList,System.Boolean)">
            <summary>
            Realizes the registration process.
            </summary>
            <param name="val">The string containing the registration key.</param>
            <param name="regData">A set of registration data.</param>
            <param name="addToReg">The boolean value indicating if the registration data is added to the registry. <b>true</b> 
            if the registration data is added to the registry; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:CADImport.Protection.CloseApplication">
            <summary>
            Completes the registration process.
            </summary>
        </member>
        <member name="M:CADImport.Protection.AddDataToRegistry(System.String,System.Collections.ArrayList)">
            <summary>
            Adds the registration data to the registry in case of the successful registration process.
            </summary>
            <param name="val">The <b>string</b> containing the key entered by user.</param>
            <param name="regData">The list containing the registration data.</param>
        </member>
        <member name="M:CADImport.Protection.GetDataFromRegistry">
            <summary>
            Gets the key and the registration data from the registry.
            </summary>
            <returns>An <see cref="T:System.Collections.ArrayList">ArrayList</see> containing the key and the registration data.</returns>
        </member>
        <member name="M:CADImport.Protection.RemoveRegInfo">
            <summary>
            Removes the registration data.
            </summary>
        </member>
        <member name="M:CADImport.Protection.RemoveDataFromRegistry">
            <summary>
            Removes the key and the registration data from the registry.
            </summary>
        </member>
        <member name="M:CADImport.Protection.Register(System.Windows.Forms.IWin32Window)">
            <summary>
            Realizes the registration process using the registration form.
            </summary>
        </member>
        <member name="P:CADImport.Protection.LicenseType">
            <summary>
            Gets or sets a type of license registration.
            </summary>
            <value>A <see cref="T:CADImport.LicenseType">LicenseType</see> object.</value>
        </member>
        <member name="P:CADImport.Protection.RegData">
            <summary>
            Gets or sets the registration data.
            </summary>
            <value>A string containing the registration data.</value>
        </member>
        <member name="T:CADImport.Export.HPGLExportSettings">
            <summary>
            Represents settings for exporting the current CAD file into HPGL format.
            </summary>
        </member>
        <member name="T:CADImport.Export.ExportSettings">
            <summary>
            Represents settings for exporting the current CAD file into other formats.
            </summary>
        </member>
        <member name="T:CADImport.CADPresenterSettings">
            <summary>
            Represents a set of settings for the <see cref="T:CADImport.CADPresenter">CADPresenter</see>.
            </summary>
        </member>
        <member name="M:CADImport.CADPresenterSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current <see cref="T:CADImport.CADPresenterSettings">CADPresenterSettings</see> class instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:CADImport.CADPresenterSettings">CADPresenterSettings</see> class instance.</returns>
        </member>
        <member name="M:CADImport.CADPresenterSettings.Assign(CADImport.CADPresenterSettings)">
            <summary>
            Copies the settings from a specified <see cref="T:CADImport.CADPresenterSettings">CADPresenterSettings</see> object. 
            </summary>
            <param name="entity"><see cref="T:CADImport.CADPresenterSettings">CADPresenterSettings</see> object to copy settings from.</param>
        </member>
        <member name="M:CADImport.CADPresenterSettings.SaveParams">
            <summary>
            Saves the settings of the <see cref="T:CADImport.CADPresenterSettings">CADPresenterSettings</see>.
            </summary>
        </member>
        <member name="M:CADImport.CADPresenterSettings.RestoreParams">
            <summary>
            Restores the settings of the <see cref="T:CADImport.CADPresenterSettings">CADPresenterSettings</see>. 
            </summary>
        </member>
        <member name="M:CADImport.CADPresenterSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADPresenterSettings">CADPresenterSettings</see> class. 
            </summary>
        </member>
        <member name="M:CADImport.CADPresenterSettings.#ctor(CADImport.CADPresenterSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADPresenterSettings">CADPresenterSettings</see> class. 
            </summary>
            <param name="settings"></param>
        </member>
        <member name="P:CADImport.CADPresenterSettings.DefaultAngle">
            <summary>
            Gets or sets a default color for the <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADPresenterSettings.BackgroundColor">
            <summary>
            Gets or sets a background color of this <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADPresenterSettings.DefaultColor">
            <summary>
            Gets or sets a default color for the <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
            <value>An object of the <see cref="T:System.Drawing.Color"/> structure. Default value is black.</value>
        </member>
        <member name="P:CADImport.CADPresenterSettings.BorderSize">
            <summary>
            Gets or sets a border size in pixels.
            </summary>
        </member>
        <member name="P:CADImport.CADPresenterSettings.BorderType">
            <summary>
            Gets or sets a border type.
            </summary>
            <value>One of the <see cref="T:CADImport.CADBorderType"/> values.</value>
        </member>
        <member name="P:CADImport.CADPresenterSettings.DimensionsVisible">
            <summary>
            Gets or sets a value indicating whether dimensions on the drawing are visible.
            </summary>
            <value><b>true</b> if the dimensions are visible; otherwise, <b>false</b>. Default value is <b>true</b>.</value>
        </member>
        <member name="P:CADImport.CADPresenterSettings.DrawMode">
            <summary>
            Gets or sets a current drawing mode.
            </summary>
            <value>One of the <see cref="T:CADImport.CADDrawMode">CADDrawMode</see> values.</value>
        </member>
        <member name="P:CADImport.CADPresenterSettings.IsDraw3DAxes">
            <summary>
            Gets or sets a value indicating whether 3D axes are shown on the drawing.
            </summary>
            <value><b>true</b> if the 3D axes are shown; otherwise, <b>false</b>. Default value is <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADPresenterSettings.IsShowBackground">
            <summary>
            Gets or sets a value indicating using of a <see cref="P:CADImport.CADImage.BackgroundColor">BackgroundColor</see>. 
            </summary>
            <value><b>true</b> if a background color is used; otherwise, <b>false</b>. Default value is <b>true</b>.</value>
        </member>
        <member name="P:CADImport.CADPresenterSettings.IsShowLineWeight">
            <summary>
            Gets or sets a value indicating whether a thickness of lines in the <see cref="T:CADImport.CADImage">CADImage</see> is 
            determined by the file data.
            </summary>
            <value><b>true</b> if a thickness of lines in the <see cref="T:CADImport.CADImage">CADImage</see> is determined by the file data; otherwise, <b>false</b>.</value> 
            <remarks>If this property value is <b>false</b>, a thickness of lines in the <see cref="T:CADImport.CADImage">CADImage</see> is determined by the 
            <see cref="P:CADImport.CADImage.NullWidth">NullWidth</see> property.</remarks>
        </member>
        <member name="P:CADImport.CADPresenterSettings.LineScaled">
            <summary>
            Gets or sets a value indicating whether a width of lines to draw all 
            entities in the drawing is specified by the file data.
            </summary>
            <value><b>true</b> if a line width is determined by the file data; otherwise, <b>false</b>.</value>
            <remarks>If this property returns <b>false</b> a width of lines to draw all CAD entities is 
            specified by the <see cref="P:CADImport.CADImage.NullWidth">NullWidth</see> property.</remarks>
        </member>
        <member name="P:CADImport.CADPresenterSettings.NullWidth">
            <summary>
            Gets or sets default thickness for lines used to draw a <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
            <value>Line thickness. Default value is 1.</value>
        </member>
        <member name="P:CADImport.CADPresenterSettings.LineWeightScale">
            <summary>
            Gets or sets a scale for drawing lines.
            </summary>
        </member>
        <member name="P:CADImport.CADPresenterSettings.TextVisible">
            <summary>
            Gets or sets a value indicating whether the texts in the <see cref="T:CADImport.CADImage">CADImage</see> are visible.
            </summary>
            <value><b>true</b> if the texts are visible; otherwise, <b>false</b>. Default value is <b>true</b>.</value>
        </member>
        <member name="P:CADImport.CADPresenterSettings.TTFSmoothing">
            <summary>
            Gets or sets a value indicating whether TTF fonts are smoothed.
            </summary>
            <value><b>true</b> if TTF fonts are smoothed; otherwise, <b>false</b>. Default value is <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADPresenterSettings.TTFSmoothingStyle">
            <summary>
            Gets or sets smoothing style for TTF fonts.
            </summary>
        </member>
        <member name="M:CADImport.Export.ExportSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.ExportSettings">ExportSettings</see> class.
            </summary>
        </member>
        <member name="M:CADImport.Export.ExportSettings.GetExportRect">
            <summary>
            Returns a rectangular area for export.
            </summary>
        </member>
        <member name="P:CADImport.Export.ExportSettings.LayoutsExportMode">
            <summary>
            Gets or sets a value specifying which layouts will be exported.
            </summary>
        </member>
        <member name="P:CADImport.Export.ExportSettings.ImageRectangle">
            <summary>
            Represents a rectangle that encloses <see cref="T:CADImport.CADImage">CADImage</see> object.
            </summary>
        </member>
        <member name="P:CADImport.Export.ExportSettings.XScale">
            <summary>
            Gets or sets a scale value for export.
            </summary>
        </member>
        <member name="P:CADImport.Export.ExportSettings.XSize">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:CADImport.CADGraphics2D`1">
            <summary>
            Abstract class for internal use.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CADImport.CADPainter`1">
            <summary>
            Implements basic drawing methods.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CADImport.CADPresenter">
            <summary>
            Implements basic drawing methods.
            </summary>
        </member>
        <member name="M:CADImport.CADPresenter.GetExtents">
            <summary>
            Calculates the current dimensions of the <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
        </member>
        <member name="M:CADImport.CADPresenter.Scale(CADImport.DPoint,System.Single)">
            <summary>
            need help
            </summary>
            <param name="center"></param>
            <param name="scale"></param>
        </member>
        <member name="M:CADImport.CADPresenter.Translation(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            need help
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
        </member>
        <member name="M:CADImport.CADPresenter.Draw(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Region)">
            <summary>
            Draws a <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Graphics">Graphics</see> surface on which to draw the CAD image.</param>
            <param name="Rect">A <see cref="T:System.Drawing.RectangleF">RectangleF</see> object representing an area of the CAD image.</param>
            <param name="visibleRegion">Region of visible</param>
        </member>
        <member name="M:CADImport.CADPresenter.Draw(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Draws a <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Graphics">Graphics</see> surface on which to draw the CAD image.</param>
            <param name="Rect">A <see cref="T:System.Drawing.RectangleF">RectangleF</see> object representing an area of the CAD image.</param>
        </member>
        <member name="M:CADImport.CADPresenter.Draw(CADImport.DRect,System.Drawing.RectangleF)">
            <summary>
            
            </summary>
            <param name="sourceRect"></param>
            <param name="destinationRect"></param>
        </member>
        <member name="M:CADImport.CADPresenter.DrawOrbit(CADImport.DPoint,CADImport.DPoint[],CADImport.DPoint[],System.Single,System.Single,System.Drawing.Color,System.Object)">
            <summary>
            Visualizes the <see cref="T:CADImport.FaceModule.Orbit3D">Orbit3D</see> object.
            </summary>
            <param name="ptCenter"></param>
            <param name="ptHoriz"></param>
            <param name="ptVert"></param>
            <param name="bigRadius"></param>
            <param name="smallRadius"></param>
            <param name="color"></param>
            <param name="graphics"></param>
        </member>
        <member name="M:CADImport.CADPresenter.ClearBuffer">
            <summary>
            Clears current drawing object when double buffering is used
            </summary>
        </member>
        <member name="M:CADImport.CADPresenter.ClearMarkers">
            <summary>
            Clears a collection of markers.
            </summary>
        </member>
        <member name="M:CADImport.CADPresenter.Dispose">
            <summary>
            For inheritance.
            </summary>
        </member>
        <member name="M:CADImport.CADPresenter.Rotate(CADImport.FaceModule.Axes,System.Single)">
            <summary>
            Rotates objects in the current drawing.
            </summary>
            <param name="Axis">One of the <see cref="T:CADImport.FaceModule.Axes">Axes</see> values specifying an axis of rotation.</param>
            <param name="Angle">An angle of rotation.</param>
            <remarks>
            An angle of rotation is measured in degrees.
            </remarks>
        </member>
        <member name="M:CADImport.CADPresenter.RotToView(CADImport.CADViewDirection)">
            <summary>
            Rotates a CAD image to get a specified view.
            </summary>
            <param name="A3DView">One of the <see cref="T:CADImport.CADViewDirection">CADViewDirection</see> values 
            that specifies a view of the CAD image.</param>
        </member>
        <member name="M:CADImport.CADPresenter.RotDefault">
            <summary>
            Rotates the drawing to the default view.
            </summary>
        </member>
        <member name="M:CADImport.CADPresenter.SaveImageToClipboard(CADImport.DRect)">
            <summary>
            Writes a visible part of the current CAD image to the clipboard as a raster image. 
            </summary>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <remarks>This method works only for windows application.</remarks>
        </member>
        <member name="M:CADImport.CADPresenter.SaveImageToClipboard(CADImport.DRect,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Writes a visible part of the current CAD image to the clipboard as a raster image. 
            </summary>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <remarks>This method works only for windows application.</remarks>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADPresenter.SaveImageToClipboard(CADImport.DRect,System.Drawing.Rectangle)">
            <summary>
            Writes a specified part of the current CAD image to the clipboard as a raster image. 
            </summary>
            <param name="curRect">A <see cref="T:CADImport.DRect">curRect</see> object specifying a size of the current <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be written to the clipboard.</param>
            <remarks>This method works only for windows application.</remarks>
        </member>
        <member name="M:CADImport.CADPresenter.SaveToFile(System.String,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Writes a visible part of the current CAD image to the disk as a raster image. 
            </summary>
            <param name="FileName">A location on the disk where to save the image.</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
        </member>
        <member name="M:CADImport.CADPresenter.SaveToFile(System.String,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Imaging.PixelFormat,System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Writes a visible part of the current CAD image to the disk as a raster image. 
            </summary>
            <param name="FileName">A location on the disk where to save the image.</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADPresenter.SaveToFile(System.String,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Rectangle)">
            <summary>
            Writes a specified part of the current CAD image to the disk as a raster image. 
            </summary>
            <param name="FileName">A location on the disk where to save the image.</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be written to the clipboard.</param>
        </member>
        <member name="M:CADImport.CADPresenter.SaveToFile(System.String,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Saves a current CAD image to the file of the specified format.
            </summary>
            <param name="FileName">A path to the file to be saved.</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be saved.</param>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADPresenter.SaveToStream(System.IO.Stream,System.Drawing.Imaging.ImageFormat,CADImport.DRect)">
            <summary>
            Writes a visible part of the current CAD image to the specified stream as a raster image. 
            </summary>
            <param name="aSt">A stream which the image is saved to.</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
        </member>
        <member name="M:CADImport.CADPresenter.SaveToStream(System.IO.Stream,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Writes a visible part of the current CAD image to the specified stream as a raster image. 
            </summary>
            <param name="aSt">A stream which the image is saved to.</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADPresenter.SaveImageToClipboard(CADImport.DRect,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Writes a specified part of the current CAD image to the clipboard as a raster image. 
            </summary>
            <param name="curRect">A <see cref="T:CADImport.DRect">curRect</see> object specifying a size of the current <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be written to the clipboard.</param>
            <remarks>This method works only for windows application.</remarks>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADPresenter.SaveToStream(System.IO.Stream,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Saves a current CAD image to the stream of the specified format.
            </summary>	
            <param name="str">A stream, where the image is saved</param>	
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be saved.</param>
        </member>
        <member name="M:CADImport.CADPresenter.SaveToStream(System.IO.Stream,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Rectangle)">
            <summary>
            Writes a specified part of the current CAD image to the clipboard as a raster image. 
            </summary>
            <param name="str">A stream, where the image is saved</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="aCurRect">A <see cref="T:CADImport.DRect">curRect</see> object specifying a size of the current <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be written to the clipboard.</param>
        </member>
        <member name="M:CADImport.CADPresenter.DrawImage(System.Drawing.Image,CADImport.DPoint[],System.Boolean,System.Drawing.Color)">
            <summary>
            Draws a raster image or a metafile object.
            </summary>
            <param name="image">An object of <see cref="T:System.Drawing.Image">Image</see> derived class</param>.
            <param name="points">A list of points for a visualization method</param>
            <param name="transparent">A value specifying image transparency</param>
            <param name="transparentColor">A transparent color for visualization</param>
        </member>
        <member name="M:CADImport.CADPresenter.DrawPolyPolyLine(CADImport.DPoint[],System.Int32[],System.Boolean)">
            <summary>
            Draws a set of lines or a set of polygons
            </summary>
            <param name="intPoints">The set of points for visualization</param>
            <param name="counts">A list of point numbers for figures.</param>
            <param name="allClosed">A value specifying if visualized figures will be closed</param>
        </member>
        <member name="M:CADImport.CADPresenter.DrawLine(CADImport.DPoint,CADImport.DPoint)">
            <summary>
            Draws a polyline by two specified points.
            </summary>
            <param name="p1">The first point</param>
            <param name="p2">The second point</param>
        </member>
        <member name="M:CADImport.CADPresenter.DrawPixel(CADImport.DPoint)">
            <summary>
            Draws a single pixel
            </summary>
            <param name="p">A point that will be visualized</param>
        </member>
        <member name="M:CADImport.CADPresenter.DrawPolyline(CADImport.DPoint[],System.Boolean)">
            <summary>
            Draws a polyline
            </summary>
            <param name="points">A list of polyline vertex points</param>
            <param name="closed">A value specifying if polyline is closed</param>
        </member>
        <member name="M:CADImport.CADPresenter.FillPolyline(CADImport.DPoint[])">
            <summary>
            Draws a filled polyline.
            </summary>
            <param name="points">A list of polyline vertex points</param>
        </member>
        <member name="M:CADImport.CADPresenter.FillPolyPolyLine(CADImport.DPoint[],System.Int32[])">
            <summary>
            Draws a filled polygons.
            </summary>
            <param name="intPoints">The set of points for visualization</param>
            <param name="counts">A list of point numbers for figures.</param>
        </member>
        <member name="M:CADImport.CADPresenter.DrawString(System.String,System.Drawing.Font,System.Int32,CADImport.DPoint,CADImport.CADTextHorizontalAlign)">
            <summary>
            Draws a text string.
            </summary>
            <param name="text">A text</param>
            <param name="font">A text font</param>
            <param name="color">A text color</param>
            <param name="point">A location point of the text.</param>
            <param name="align">A text alignment.</param>
        </member>
        <member name="M:CADImport.CADPresenter.Add_T(CADImport.DPoint,CADImport.DPoint)">
            <summary>
            Performs addition of two points. 
            </summary>
        </member>
        <member name="M:CADImport.CADPresenter.Sub_T(CADImport.DPoint,CADImport.DPoint)">
            <summary>
            Performs subtraction of two points.
            </summary>
        </member>
        <member name="M:CADImport.CADPresenter.IsEqual_T(CADImport.DPoint,CADImport.DPoint)">
            <summary>
            Checks if two points are equal.
            </summary>
        </member>
        <member name="M:CADImport.CADPresenter.ConvertTo_T(CADImport.DPoint)">
            <summary>
            Converts a DPoint object.
            </summary>
        </member>
        <member name="P:CADImport.CADPresenter.Image">
            <summary>
            Gets or sets a <see cref="T:CADImport.CADImage">CADImage</see> for visualization
            </summary>
        </member>
        <member name="P:CADImport.CADPresenter.DrawTarget">
            <summary>
            Represents a surface for visualization
            </summary>
        </member>
        <member name="P:CADImport.CADPresenter.RenderMode">
            <summary>
            Gets or sets rendering mode.
            </summary>
        </member>
        <member name="P:CADImport.CADPresenter.Settings">
            <summary>
            Gets a set of settings for visualization.
            </summary>
        </member>
        <member name="P:CADImport.CADPresenter.DirectionalAxis">
            <summary>
            need help
            </summary>
        </member>
        <member name="P:CADImport.CADPresenter.VisibleBox">
            <summary>
            Gets a rectangular area that will be visualized.
            </summary>
        </member>
        <member name="P:CADImport.CADPresenter.UseDoubleBuffering">
            <summary>
            Gets or sets drawing buffering mode using metafile
            </summary>
        </member>
        <member name="T:CADImport.CADPresenter.CADViewMode">
            <summary>
            Visualization options
            </summary>
        </member>
        <member name="F:CADImport.CADPresenter.CADViewMode.Draw">
            <summary>
            Normal visualization
            </summary>
        </member>
        <member name="F:CADImport.CADPresenter.CADViewMode.DrawAsPoint">
            <summary>
            Optimisation for small scale entities
            </summary>
        </member>
        <member name="F:CADImport.CADPresenter.CADViewMode.Invisible">
            <summary>
            Do not visualize
            </summary>
        </member>
        <member name="M:CADImport.CADPainter`1.GetPoint(CADImport.DPoint)">
            <summary>
            Transforms a three-dimensional CAD point into a two-dimensional screen point. 
            </summary>
            <example>
            <p>Example use GetPoint method:</p>
            <p>[C#]</p>
            <code>
            ...
            CADLine ln = cadImage.Converter.Entities[0] as CADLine;
            if(ln != null)
            {
            	Point p1 = cadImage.GetPoint(ln.Point);
            	Point p2 = cadImage.GetPoint(ln.Point1);
            	Console.Write(String.Format("Line X1={0} Y1={1} X2={2} Y2={3}", p1.X, p1.Y, p2.X, p2.Y))
            }
            </code>
            </example>
            <param name="P">A <see cref="T:CADImport.DPoint">DPoint</see> object representing a point in three-dimensional coordinate system.</param>
            <returns>A <see cref="T:System.Drawing.Point">Point</see> object representing a point in two-dimensional coordinate system.</returns>						
        </member>
        <member name="M:CADImport.CADPainter`1.DrawEntities(System.Collections.SortedList)">
            <summary>
            Invokes drawing method for specified entities if they are visible
            </summary>
            <param name="entities">A set of drawing entities</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawEntity(CADImport.CADEntity)">
            <summary>
            Draws a specified CAD entity in the current CAD image.
            </summary>
            <param name="Ent">A <see cref="T:CADImport.CADEntity">CADEntity</see> to draw in the current <see cref="T:CADImport.CADImage">CADImage</see>.</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DoFinish(CADImport.CADEntity)">
            <summary>
            Finishes drawing an entity.
            </summary>
            <param name="ent">An entity</param>
            <returns><b>true</b> if succeed; otherwise, <b>false</b>. </returns>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawText(System.Object)">
            <summary>
            Draws <see cref="T:CADImport.CADText">CADText</see> object
            </summary>
            <param name="sender"><see cref="T:CADImport.CADText">CADText</see> object</param>
        </member>
        <member name="M:CADImport.CADPainter`1.SetDraw(CADImport.CADEntity)">
            <summary>
            Produces preparation for drawing a specified CAD entity in the current CAD image.
            </summary>
            <param name="Entity">A <see cref="T:CADImport.CADEntity">CADEntity</see> to draw in the current <see cref="T:CADImport.CADImage">CADImage</see>.</param>
        </member>
        <member name="M:CADImport.CADPainter`1.ApplyScale(System.Drawing.RectangleF)">
            <summary>
            Calculates a matrix for drawing based on current scale.
            </summary>
            <param name="Arect">A current visualization rectangle.</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawViewPort(System.Object)">
            <summary>
            Draws <see cref="T:CADImport.CADViewPort">CADViewPort</see> object
            </summary>
            <param name="sender"><see cref="T:CADImport.CADViewPort">CADViewPort</see> object</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawCircle(System.Object)">
            <summary>
            Draws <see cref="T:CADImport.CADCircle">CADCircle</see> object
            </summary>
            <param name="sender"><see cref="T:CADImport.CADCircle">CADCircle</see> object</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawEllipse(System.Object)">
            <summary>
            Draws <see cref="T:CADImport.CADEllipse">CADEllipse</see> object
            </summary>
            <param name="sender"><see cref="T:CADImport.CADEllipse">CADEllipse</see> object</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawWipeout(System.Object)">
            <summary>
            Draws <see cref="T:CADImport.CADWipeout">CADWipeout</see> object
            </summary>
            <param name="sender"><see cref="T:CADImport.CADWipeout">CADWipeout</see> object</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawArc(System.Object)">
            <summary>
            Draws <see cref="T:CADImport.CADArc">CADArc</see> object
            </summary>
            <param name="sender"><see cref="T:CADImport.CADArc">CADArc</see> object</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawACISEntity(System.Object)">
            <summary>
            Draws ACISEntity object
            </summary>
            <param name="sender">ACISEntity object</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawSolid(System.Object)">
            <summary>
            Draws <see cref="T:CADImport.CADSolid">CADSolid</see> object
            </summary>
            <param name="sender"><see cref="T:CADImport.CADLine">CADSolid</see> object</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawPoint(System.Object)">
            <summary>
            Draws CADPoint object
            </summary>
            <param name="sender">CADPoint object</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawPoly(System.Object)">
            <summary>
            Draws <see cref="T:CADImport.CADPolyLine">CADPolyline</see> object
            </summary>
            <param name="sender"><see cref="T:CADImport.CADPolyLine">CADPolyline</see> object</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawSpline(System.Object)">
            <summary>
            Draws <see cref="T:CADImport.CADSpline">CADSpline</see> object
            </summary>
            <param name="sender"><see cref="T:CADImport.CADSpline">CADSpline</see> object</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawLeader(System.Object)">
            <summary>
            Draws <see cref="T:CADImport.CADLeader">CADLeader</see> object
            </summary>
            <param name="sender"><see cref="T:CADImport.CADLeader">CADLeader</see> object</param>
        </member>
        <member name="M:CADImport.CADPainter`1.Draw3dFace(System.Object)">
            <summary>
            Draws <see cref="T:CADImport.CAD3dFace">CAD3dFace</see> object
            </summary>
            <param name="sender"><see cref="T:CADImport.CAD3dFace">CAD3dFace</see> object</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawEntity(CADImport.CADEntity,System.Drawing.Graphics)">
             <summary>
             Draws a specified CAD entity in the current CAD image.
             </summary>
             <param name="Ent">A <see cref="T:CADImport.CADEntity">CADEntity</see> to draw in the current <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="graph">Graphics object for draw</param>
        </member>
        <member name="M:CADImport.CADPainter`1.Draw3DAxes(System.Double,System.Double)">
            <summary>
            Draws 3D axes by means of the specified <see cref="T:System.Drawing.Graphics">Graphics</see> object.
            </summary>
            <param name="height">Axes height</param>
            <param name="width">Axes width</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawLine(System.Object)">
            <summary>
            Darws <see cref="T:CADImport.CADLine">CADLine</see> object
            </summary>
            <param name="sender"><see cref="T:CADImport.CADLine">CADLine</see> object</param>
        </member>
        <member name="M:CADImport.CADPainter`1.SetSelectedStyle(System.Object)">
            <summary>
            need help
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:CADImport.CADPainter`1.GetLineWeightByColor">
            <summary>
            need help
            </summary>
        </member>
        <member name="M:CADImport.CADPainter`1.ExportToMetafile(System.String,CADImport.DRect)">
            <summary>
            Exports a CAD drawing to Windows Enhanced metafile. 
            </summary>
            <param name="aName">
            A path to a newly created metafile.
            </param>		
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
        </member>
        <member name="M:CADImport.CADPainter`1.ExportToMetafile(System.IO.Stream,CADImport.DRect)">
            <summary>
            Exports a CAD drawing to Windows Enhanced metafile. 
            </summary>
            <param name="stream">
            A stream to a newly created metafile.
            </param>				
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
        </member>
        <member name="M:CADImport.CADPainter`1.ExportToMetafile(System.String,CADImport.DRect,System.Drawing.Rectangle)">
            <summary>
            Exports a CAD drawing to Windows Enhanced metafile. 
            </summary>
            <param name="aName">
            A path to a newly created metafile.
            </param>		
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be saved.</param>
        </member>
        <member name="M:CADImport.CADPainter`1.ExportToMetafile(System.String,CADImport.DRect,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Exports a CAD drawing to Windows Enhanced metafile. 
            </summary>
            <param name="aName">
            A path to a newly created metafile.
            </param>		
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be saved.</param>
            <param name="callGetExtents">If true call GetExtents method</param>       
        </member>
        <member name="M:CADImport.CADPainter`1.DrawImage(System.Drawing.Image,`0[],System.Boolean,System.Drawing.Color)">
            <summary>
            Draws a raster image or a metafile object.
            </summary>
            <param name="image">An object of <see cref="T:System.Drawing.Image">Image</see> derived class.</param>
            <param name="points">A list of points for a visualization method</param>
            <param name="transparent">A value specifying image transparency</param>
            <param name="transparentColor">A transparent color for visualization</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawImage(System.Drawing.Image,`0,`0,`0,System.Boolean,System.Drawing.Color)">
            <summary>
            Draws a raster image or a metafile object.
            </summary>
            <param name="image">An object of <see cref="T:System.Drawing.Image">Image</see> derived class.</param>
            <param name="point">A location point</param>
            <param name="width">A width of the image object</param>
            <param name="height">A height of the image object</param>
            <param name="transparent">A value specifying image transparency</param>
            <param name="transparentColor">A transparent color for visualization</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawPolyPolyLine(`0[],System.Int32[],System.Boolean)">
            <summary>
            Draws a set of lines or a set of polygons
            </summary>
            <param name="intPoints">The set of points for visualization</param>
            <param name="counts">A list of point numbers for figures.</param>
            <param name="allClosed">A value specifying if visualized figures will be closed</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawLine(`0,`0)">
            <summary>
            Draws a polyline by two specified points.
            </summary>
            <param name="p1">The first point</param>
            <param name="p2">The second point</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawPixel(`0)">
            <summary>
            Draws a single pixel
            </summary>
            <param name="p">A point that will be visualized</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawPolyline(`0[],System.Boolean)">
            <summary>
            Draws a polyline
            </summary>
            <param name="points">A list of polyline vertex points</param>
            <param name="closed">A value specifying if polyline is closed</param>
        </member>
        <member name="M:CADImport.CADPainter`1.FillPolyline(`0[])">
            <summary>
            Draws a filled polyline.
            </summary>
            <param name="points">A list of polyline vertex points</param>
        </member>
        <member name="M:CADImport.CADPainter`1.FillPolyPolyLine(`0[],System.Int32[])">
            <summary>
            Draws a filled polygons.
            </summary>
            <param name="intPoints">The set of points for visualization</param>
            <param name="counts">A list of point numbers for figures.</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawString(System.String,System.Drawing.Font,System.Int32,`0,CADImport.CADTextHorizontalAlign)">
            <summary>
            Draws a text string.
            </summary>
            <param name="text">A text</param>
            <param name="font">A text font</param>
            <param name="color">A text color</param>
            <param name="point">A location point of the text.</param>
            <param name="align">A text alignment.</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawStringW(System.String,System.Drawing.Font,System.Drawing.FontStyle,System.Int32,`0,`0,CADImport.CADTextHorizontalAlign)">
            <summary>
            Draws a text string.
            </summary>
            <param name="text">A text</param>
            <param name="font">A text font</param>
            <param name="scoring">A text font style data</param>
            <param name="color">A text color</param>
            <param name="point">A location point of the text.</param>
            <param name="size">A text size</param>
            <param name="align">A text alignment.</param>
        </member>
        <member name="M:CADImport.CADPainter`1.DrawEdgeAndFillPolyPolyLine(CADImport.DynamicArray{`0},CADImport.DynamicArray{System.Int32},CADImport.DynamicArray{`0})">
            <summary>
            
            </summary>
            <param name="bounds"></param>
            <param name="counts"></param>
            <param name="triangles"></param>
        </member>
        <member name="M:CADImport.CADPainter`1.Add_T(`0,`0)">
            <summary>
            Performs addition of two points. 
            </summary>
        </member>
        <member name="M:CADImport.CADPainter`1.Sub_T(`0,`0)">
            <summary>
            Performs subtraction of two points.
            </summary>
        </member>
        <member name="M:CADImport.CADPainter`1.IsEqual_T(`0,`0)">
            <summary>
            Checks if two points are equal.
            </summary>
        </member>
        <member name="M:CADImport.CADPainter`1.ConvertTo_T(CADImport.DPoint)">
            <summary>
            Converts a DPoint object.
            </summary>
        </member>
        <member name="M:CADImport.CADGraphics2D`1.#ctor">
            <summary>
            Abstract constructor
            </summary>
        </member>
        <member name="P:CADImport.CADGraphics2D`1.DrawTextMeansGDIPlusMethods">
            <summary>
            Gets or sets drawing mode of simple and not rotated texts by GDI+ drawing text means
            </summary>
        </member>
        <member name="P:CADImport.CADGraphics2D`1.UseWinEllipse">
            <summary>
            Gets or sets a value indicating whether arcs and circles in the <see cref="T:CADImport.CADImage">CADImage</see> 
            are drawn with GDI+ drawing methods without linearization.
            </summary>
            <value><b>true</b> if the GDI+ methods are used for drawing arcs and circles in the <see cref="T:CADImport.CADImage">CADImage</see>; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:CADImport.Export.CADToHPGL">
            <summary>
            Provides functionality for exporting the current CAD file into HPGL format.
            </summary>
        </member>
        <member name="T:CADImport.Export.ExportSimple`1">
            <summary>
            Abstract class for inheritance.
            </summary>
            <typeparam name="U"></typeparam>
        </member>
        <member name="T:CADImport.Export.CADExport">
            <summary>
            Provides functionality for exporting the current CAD file into other formats.
            </summary>
        </member>
        <member name="M:CADImport.Export.CADExport.#ctor(CADImport.CADImage)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.CADExport">CADExport</see> class.
            </summary>
            <param name="img">A <see cref="T:CADImport.CADImage">CADImage</see> to be exported to other formats.</param>
        </member>
        <member name="M:CADImport.Export.CADExport.SaveToFile(System.String,System.Text.Encoding)">
            <summary>
            Exports the current CAD image to the specified file. 
            </summary>
            <param name="fileName">A path to the file where to the current CAD image will be saved.</param>
        </member>
        <member name="M:CADImport.Export.CADExport.SaveToFile(System.String)">
            <summary>
            Exports the current CAD image to the specified file. 
            </summary>
            <param name="fileName">A path to the file where to the current CAD image will be saved.</param>
        </member>
        <member name="M:CADImport.Export.CADExport.SaveToStream(System.IO.Stream)">
            <summary>
            Exports the current CAD file to the stream defined by the specified <see cref="T:System.IO.StreamWriter">StreamWriter</see>.
            </summary>
            <param name="stream">A <see cref="T:System.IO.StreamWriter">StreamWriter</see> object that defines the stream where to the current CAD file will be exported.</param>
        </member>
        <member name="P:CADImport.Export.ExportSimple`1.Settings">
            <summary>
            Gets settings for exporting the current CAD drawing.
            </summary>
        </member>
        <member name="M:CADImport.Export.CADToHPGL.#ctor(CADImport.CADImage)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.CADToHPGL">CADToHPGL</see> class.
            </summary>
            <param name="img">A CAD image to export</param>
        </member>
        <member name="T:CADImport.CADImage">
            <summary>
            Represents a CAD drawing and provides methods for drawing all loaded CAD objects.
            </summary>
            <remarks>
            <b>CADImage</b> class is a superstructure on the <see cref="T:CADImport.CADConverter">CADConverter</see>.
            This is a base class for AutoCAD™ DXF graphic files objects.
            <b>CADImage</b> uses GDI+ classes for drawing DXF files. 
            DXF is an acronym for Drawing eXchange Format. 
            DXF is a widely used file format for displaying 2D and 3D CAD data. 
            It's not an open format but owned by AutoDesk Inc. 
            who uses it for their AutoCAD application. 
            With every new version of AutoCAD the definition of 
            DXF is changed but nevertheless there are many programs 
            which are capable to read and write different versions of DXF. 
            DXF is an ASCII replication of the drawing's contents.
            It enables an interchange of files from AutoCAD to other applications' formats. 
            DXF import/export is supported by a wide variety of applications, 
            ranging from CAD products to word processors, desktop publishing and 
            illustrating tools. The DXF CAD format has become the de facto 
            standard in PC based CAD industry with many other CAD systems 
            able to read and write this format too. 
            <p><b>	Major features :</b></p>
            <li>CADImage implements quick and exact reading DXF files and manipulating them using GDI+ 
            functions for drawing. </li>
            <li>The fastest DXF reader.</li> 
            <li>3D support including nested extrusions.</li>
            <li>Compatible with AutoDesk DXF Release 12, 13, 14 and 2000, 2002, 2004.</li>
            </remarks>
        </member>
        <member name="F:CADImport.CADImage.visibleArea">
            <summary>
            Represents <see cref="T:CADImport.CADImage">CADImage</see> visible area.
            </summary>
        </member>
        <member name="M:CADImport.CADImage.ChangeGraphicsMode(CADImport.DrawGraphicsMode,CADImport.RenderMode)">
            <summary>
            Changes image drawing mode.
            </summary>
        </member>
        <member name="M:CADImport.CADImage.ClearSelectCollection">
            <summary>
            Clears a collection of the selected entities.
            </summary>
        </member>
        <member name="M:CADImport.CADImage.ClearSelection">
            <summary>
            Clears a list of the selected entities.
            </summary>
        </member>
        <member name="M:CADImport.CADImage.DoSelectEntities(System.Collections.SortedList)">
            <summary>
            Selects inserted <see cref="T:System.Collections.SortedList">list</see> of entities
            </summary>
            <param name="lst">Inserting <see cref="T:System.Collections.SortedList">list</see> of entities</param>
        </member>
        <member name="M:CADImport.CADImage.DoSelectEntities(CADImport.CADEntityCollection)">
            <summary>
            Selects inserted <see cref="T:CADImport.CADEntityCollection">list</see> of entities
            </summary>
            <param name="lst">Inserting <see cref="T:CADImport.CADEntityCollection">list</see> of entities</param>
        </member>
        <member name="M:CADImport.CADImage.DoSelectEntity(CADImport.CADEntity)">
            <summary>
            Selects inserted entity
            </summary>
            <param name="ent">Inserting entity</param>
        </member>
        <member name="M:CADImport.CADImage.GetSelectEntityRegion(System.Drawing.Rectangle)">
            <summary>
            Returns the selected area of the image.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.Region">Region</see> object representing the selected area of the image.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object specifying the image area to be selected.</returns>
        </member>
        <member name="M:CADImport.CADImage.MultipleSelectExt(CADImport.DRect,System.Boolean,System.Boolean)">
            <summary>
            Selects all entities inside the inserted rectangle
            </summary>
            <param name="rect">Inserting rectangle</param>
            <param name="clearSelCollection">Clears <see cref="P:CADImport.CADImage.SelectedEntities"> SelectedEntities </see> object if true</param>
            <param name="visualSelect">Represents visual selection if true</param>
            <returns>Returns list of selected entities</returns>
        </member>
        <member name="M:CADImport.CADImage.MultipleSelect(CADImport.DRect,System.Boolean,System.Boolean)">
             <summary>
             Providing CAD image entities' multiple selection within a specified <see cref="T:System.Drawing.RectangleF">rectangle</see>.
             </summary>
            <param name="clearSelCollection">Clear select collection</param>
            <param name="rect">Multiple selection <see cref="T:System.Drawing.RectangleF">rectangle</see></param>
            <param name="visualSelect">Visual selecting</param>
        </member>
        <member name="M:CADImport.CADImage.InvalidateSelectEntity(System.Windows.Forms.Control,System.Single)">
            <summary>
            Redraws a selected entity.
            </summary>
            <param name="cl1">A <see cref="T:System.Windows.Forms.Control">Control</see> on which the selected area is redrawn.</param>
            <param name="scale">A scale in which the selected area is redrawn.</param>
        </member>
        <member name="M:CADImport.CADImage.Select(System.Int32,System.Int32)">
            <summary>
            Selects an entity of the CAD image at the specified point.
            </summary>
            <param name="x">An X coordinate of the point at which the entity to be selected is located.</param>
            <param name="y">An Y coordinate of the point at which the entity to be selected is located.</param>
            <remarks>The X and Y coordinates are measured in pixels.
            This method requires SelectionMode to be switched to be set.
            </remarks>
        </member>
        <member name="M:CADImport.CADImage.SelectExt(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Selects an entity of the CAD image at the specified point.
            </summary>
            <param name="x">An X coordinate of the point at which the entity to be selected is located.</param>
            <param name="y">An Y coordinate of the point at which the entity to be selected is located.</param>
            <param name="clearPrevSelection">Clears selection of objects if <b>true</b>; adds to selected if <b>false</b></param>
            <param name="visualSelect">Visual select entity</param>
            <returns>A <see cref="T:CADImport.CADEntity">CADEntity</see> located at the specified point, or <b>null</b> 
            if nothing is located at the specified point.</returns>
            <remarks>The X and Y coordinates are measured in pixels.
            This method requires SelectionMode to be switched to be set.
            </remarks>
        </member>
        <member name="M:CADImport.CADImage.ChangeDrawMode(CADImport.DrawGraphicsMode,System.Windows.Forms.Control)">
            <summary>
            Initializes a new graphic class object if current mode changed.
            </summary>
            <param name="mode">A mode</param>
            <param name="winControl">Currently not used</param>
        </member>
        <member name="F:CADImport.CADImage.EntityBuffer">
            <summary>
            Represents buffer for <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> storing.
            </summary>
        </member>
        <member name="M:CADImport.CADImage.CreateImageByExtension(System.String)">
            <summary>
            Creates specialised CADImage object for specified file extention
            </summary>
            <param name="fileName">File name with extention</param>
            <returns>Returns created CADImage object</returns>
        </member>
        <member name="M:CADImport.CADImage.Dispose">
            <summary>
            Disposes a <see cref="T:CADImport.CADImage">CADImage</see> object.
            </summary>
        </member>
        <member name="M:CADImport.CADImage.Stop">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:CADImport.CADImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADImage">CADImage</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADImage.GetLayoutName(System.Int32)">
            <summary>
            Gets a name of the layout that has the specified index in the collection of layouts.
            </summary>
            <param name="ind">An index of the layout in the collection of layouts.</param>
            <returns>A <b>string</b> containing the name of the specified layout.</returns>
        </member>
        <member name="M:CADImport.CADImage.SetCurrentLayout(System.Int32)">
            <summary>
            Sets a current layout of this <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
            <param name="ind">An index of the layout to be set as current.</param>
        </member>
        <member name="M:CADImport.CADImage.GetLayerName(System.Int32)">
            <summary>
            Gets a name of the layer that has the specified index in the collection of layers.
            </summary>
            <param name="ind">An index of the layer in the collection of layers.</param>
            <returns>A <b>string</b> containing the name of the specified layer.</returns>
        </member>
        <member name="M:CADImport.CADImage.GetLayerVisible(System.Int32)">
            <summary>
            Determines whether a layer is visible
            </summary>
            <param name="ind">An index of the layer in the collection of layers</param>
            <returns><b>true</b> if the specified layer is visible; othewise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADImage.GetLayerFreeze(System.Int32)">
            <summary>
            Determines whether the layer (<see cref="T:CADImport.CADLayer">CADLayer</see>) is frozen.
            </summary>
            <param name="ind">An index of the layer in the collection of layers</param>
            <returns><b>True</b> if specified layer is frozen; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADImage.SetLayerVisible(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets a visibility of the layer.
            </summary>
            <param name="ind">An index of the layer in the collection of layers.</param>
            <param name="val">A value which the specified layer's visibility will be set to.</param>
            <param name="detInvalidate">If <b>true</b> invalidate image</param>
        </member>
        <member name="M:CADImport.CADImage.SetLayerFreeze(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets freeze parameter for <see cref="T:CADImport.CADLayer">CADLayer</see>
            </summary>
            <param name="ind">An index of the layer in the collection of layers</param>
            <param name="val">Setting value</param>
            <param name="detInvalidate">Sets a necessity of the redrawing</param>
        </member>
        <member name="M:CADImport.CADImage.SetLayerColor(System.Int32,System.Drawing.Color,System.Boolean)">
            <summary>
            Sets a color for layer (<see cref="T:CADImport.CADLayer">CADLayer</see>) specified by index 
            </summary>
            <param name="ind">An index of the layer in the collection of layers</param>
            <param name="val">Setting color</param>
            <param name="detInvalidate">Sets a necessity of the redrawing</param>
        </member>
        <member name="M:CADImport.CADImage.SetDraw(CADImport.CADEntity)">
            <summary>
            Produces preparation for drawing a specified CAD entity in the current CAD image.
            </summary>
            <param name="Entity">A <see cref="T:CADImport.CADEntity">CADEntity</see> to draw in the current <see cref="T:CADImport.CADImage">CADImage</see>.</param>
        </member>
        <member name="M:CADImport.CADImage.CreateConverter">
            <summary>
            Creates a <see cref="T:CADImport.CADConverter">CADConverter</see> for loading a CAD file. 
            </summary>
            <returns>A <see cref="T:CADImport.CADConverter">CADConverter</see> for loading a CAD file.</returns>
        </member>
        <member name="M:CADImport.CADImage.DrawACISEntity(System.Object)">
            <summary>
            Draws <see cref="T:CADImport.CADACISEntity">ACISEntity</see> object
            </summary>
            <param name="sender"><see cref="T:CADImport.CADACISEntity">ACISEntity</see> object</param>
        </member>
        <member name="M:CADImport.CADImage.GetPoint(CADImport.DPoint)">
            <summary>
            Transforms a three-dimensional CAD point into a two-dimensional screen point. 
            </summary>
            <example>
            <p>Example use GetPoint method:</p>
            <p>[C#]</p>
            <code>
            ...
            CADLine ln = cadImage.Converter.Entities[0] as CADLine;
            if(ln != null)
            {
            	Point p1 = cadImage.GetPoint(ln.Point);
            	Point p2 = cadImage.GetPoint(ln.Point1);
            	Console.Write(String.Format("Line X1={0} Y1={1} X2={2} Y2={3}", p1.X, p1.Y, p2.X, p2.Y))
            }
            </code>
            </example>
            <param name="P">A <see cref="T:CADImport.DPoint">DPoint</see> object representing a point in three-dimensional coordinate system.</param>
            <returns>A <see cref="T:System.Drawing.Point">Point</see> object representing a point in two-dimensional coordinate system.</returns>						
        </member>
        <member name="M:CADImport.CADImage.ClearBuffer">
            <summary>
            Clears current drawing object when double buffering is used
            </summary>
        </member>
        <member name="M:CADImport.CADImage.Draw(System.Drawing.Graphics,System.Drawing.RectangleF,System.Windows.Forms.Control)">
            <summary>
            Draws a <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
            <param name="Rect">A <see cref="T:System.Drawing.RectangleF">RectangleF</see> object representing an area of the CAD image.</param>
        </member>
        <member name="M:CADImport.CADImage.Draw(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Draws a <see cref="T:CADImport.CADImage">CADImage</see>(only in GDI+ graphic mode).
            </summary>
            <param name="Rect">A <see cref="T:System.Drawing.RectangleF">RectangleF</see> object representing an area of the CAD image.</param>
        </member>
        <member name="M:CADImport.CADImage.SetNewMMToPixel(System.Drawing.Graphics)">
            <summary>
            Sets a quantity of millimeters per pixel for the specified <see cref="T:System.Drawing.Graphics">Graphics</see> object.
            </summary>
            <param name="val">The <see cref="T:System.Drawing.Graphics">Graphics</see> object for which a quantity of millimeters per pixel to be set.</param>
        </member>
        <member name="M:CADImport.CADImage.GetRealImagePoint(CADImport.DPoint)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:CADImport.CADImage.RefreshCurrentLayout">
            <summary>
            Refresh current layout.
            </summary>
        </member>
        <member name="M:CADImport.CADImage.LoadFromFile(System.String)">
            <summary>
            Uses for redefining in a descendant classes, define loading image from the specified file. 
            </summary>
            <param name="path">A path to the file that contains an image to be loaded.</param>
        </member>
        <member name="M:CADImport.CADImage.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads a CAD image stored in the specified stream. 
            </summary>
            <param name="str">A <see cref="T:System.IO.Stream">Stream</see> that contains a CAD image to be loaded.</param>
        </member>
        <member name="M:CADImport.CADImage.GetExtents">
            <summary>
            Calculates the current dimensions of the <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
        </member>
        <member name="M:CADImport.CADImage.GetVPortExtents(System.Double)">
            <summary>
            Returns extents of the active VPort reduced to the specified size
            </summary>
            <param name="clientHeight">The height</param>
            <returns>The extents</returns>
        </member>
        <member name="M:CADImport.CADImage.SetCenter">
            <summary>
            Sets <see cref="T:CADImport.CADImage">CADImage</see> center point.
            </summary>
        </member>
        <member name="M:CADImport.CADImage.GetCenter">
            <summary>
            Returns the center point of a current layout
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADImport.CADImage.ActiveVPort">
            <summary>
            Returns drawing area visualized with the active VPort.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADImport.CADImage.Rotate(CADImport.FaceModule.Axes,System.Single)">
            <summary>
            Rotates objects in the current drawing.
            </summary>
            <param name="Axis">One of the <see cref="T:CADImport.FaceModule.Axes">Axes</see> values specifying an axis of rotation.</param>
            <param name="Angle">An angle of rotation.</param>
            <remarks>
            An angle of rotation is measured in degrees.
            </remarks>
        </member>
        <member name="M:CADImport.CADImage.RotDefault">
            <summary>
            Rotates the drawing to the default view.
            </summary>
        </member>
        <member name="M:CADImport.CADImage.RotToView(CADImport.CADViewDirection)">
            <summary>
            Rotates a CAD image to get a specified view.
            </summary>
            <param name="A3DView">One of the <see cref="T:CADImport.CADViewDirection">CADViewDirection</see> values 
            that specifies a view of the CAD image.</param>
        </member>
        <member name="M:CADImport.CADImage.SaveToFile(System.String,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Rectangle)">
            <summary>
            Saves a part of the current CAD image to the file of the specified format.
            </summary>
            <param name="FileName">A path to the file to be saved.</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be saved.</param>
        </member>
        <member name="M:CADImport.CADImage.SaveToFile(System.String,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Saves a part of the current CAD image to the file of the specified format.
            </summary>
            <param name="FileName">A path to the file to be saved.</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be saved.</param>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADImage.SaveToFile(System.String,System.Drawing.Imaging.ImageFormat,CADImport.DRect)">
            <summary>
            Writes a visible part of the current CAD image to the file as a raster image. 
            </summary>
            <param name="FileName">A path to the file to be saved.</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
        </member>
        <member name="M:CADImport.CADImage.SaveToFile(System.String,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Writes a visible part of the current CAD image to the file as a raster image. 
            </summary>
            <param name="FileName">A path to the file to be saved.</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADImage.SaveToStream(System.IO.Stream,System.Drawing.Imaging.ImageFormat,CADImport.DRect)">
            <summary>
            Writes a visible part of the current CAD image to the specified stream as a raster image. 
            </summary>
            <param name="aSt">A stream, where to save an image</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
        </member>
        <member name="M:CADImport.CADImage.SaveToStream(System.IO.Stream,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Rectangle)">
            <summary>
            Saves a part of the current CAD image to the stream of the specified format.
            </summary>	
            <param name="str">A stream, where to save an image</param>	
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be saved.</param>
        </member>
        <member name="M:CADImport.CADImage.SaveToStream(System.IO.Stream,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Saves a part of the current CAD image to the stream of the specified format.
            </summary>
            <param name="str">A stream, where to save an image</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be saved.</param>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADImage.SaveToStream(System.IO.Stream,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Writes a visible part of the current CAD image to the specified stream as a raster image. 
            </summary>
            <param name="aSt">A stream, where to save an image</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADImage.SaveImageToClipboard(CADImport.DRect)">
            <summary>
            Writes a visible part of the current CAD image to the clipboard as a raster image. 
            </summary>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <remarks>This method works only for windows application.</remarks>
        </member>
        <member name="M:CADImport.CADImage.SaveImageToClipboard(CADImport.DRect,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Writes a visible part of the current CAD image to the clipboard as a raster image. 
            </summary>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <remarks>This method works only for windows application.</remarks>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADImage.SaveImageToClipboard(CADImport.DRect,System.Drawing.Rectangle)">
            <summary>
            Writes a specified part of the current CAD image to the clipboard as a raster image. 
            </summary>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the current <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be written to the clipboard.</param>
            <remarks>This method works only for windows application.</remarks>
        </member>
        <member name="M:CADImport.CADImage.SaveImageToClipboard(CADImport.DRect,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Writes a specified part of the current CAD image to the clipboard as a raster image. 
            </summary>
            <param name="curRect">A <see cref="T:CADImport.DRect">curRect</see> object specifying a size of the current <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be written to the clipboard.</param>
            <remarks>This method works only for windows application.</remarks>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADImage.SaveAsDXF(System.String,System.IntPtr,System.Windows.Forms.Form)">
            <summary>
            Saves a current CAD image in DXF format.
            </summary>
            <param name="fName">A path to the DXF file to be saved.</param>
            <param name="handle">A handle used for analyzing records to be written to the intermediate metafile.</param>
            <param name="aForm">A <see cref="T:System.Windows.Forms.Form">Form</see> object used for creating the intermediate metafile.</param>
        </member>
        <member name="M:CADImport.CADImage.GetCADCoords(System.Single,System.Single)">
            <summary>
            Returns coordinates of a point on the drawing.
            </summary>
            <param name="xScaled">A ratio between the X-coordinate of the point position and the drawing's width.</param>
            <param name="yScaled">A ratio between the Y-coordinate of the point position and the drawing's height.</param>
            <returns>A <see cref="T:CADImport.DPoint"/> object representing a point on a CAD image.</returns>
            <remarks> 
            The Z-coordinate of the value to be returned equals 0.
            </remarks>
        </member>
        <member name="M:CADImport.CADImage.CorrectByGrid(System.Int32@,System.Int32@)">
            <summary>
            Reduces a point location on screen to the grid node when the grid is active
            </summary>
            <param name="x">The X screen point coordinate</param>
            <param name="y">The Y screen point coordinate</param>
        </member>
        <member name="M:CADImport.CADImage.CorrectByGrid(CADImport.DPoint@)">
            <summary>
            Reduces a drawing point to the grid node when the grid is active.
            </summary>
            <param name="realPt"></param>
        </member>
        <member name="M:CADImport.CADImage.CorrectByGridAndOrtho(System.Drawing.Point@,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reduces a point relocation sizes on screen to the grid cell sizes when the grid is active
            </summary>
            <param name="newPt">A new screen point</param>
            <param name="oldX">An old X screen point coordinate </param>
            <param name="oldY">An old Y screen point coordinate</param>
            <param name="orthoActive">Specifies if ortho mode for the control is active</param>
        </member>
        <member name="M:CADImport.CADImage.GetAbsPoint(System.Single,System.Single,System.Drawing.RectangleF,System.Single,System.Drawing.PointF)">
            <summary>
            Converts display coordinates into absolute coordinates of a design
            </summary>
            <param name="x">The X display coordinate</param>
            <param name="y">The Y display coordinate</param>
            <param name="curRect">The Current drawing rectangle</param>
            <param name="scale">A scale</param>
            <param name="pos">An offset</param>
            <returns>Converted coordinates of a <see cref="T:System.Drawing.Point">Point</see></returns>
        </member>
        <member name="M:CADImport.CADImage.GetLineScale">
            <summary>
            Returns a line width scale used in this <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
        </member>
        <member name="M:CADImport.CADImage.AddScaledDXF(CADImport.CADImage,System.String,CADImport.DPoint,CADImport.DPoint,System.Single)">
            <summary>
            Adds a scaled external reference to the model space of the specified CAD image.
            </summary>
            <param name="ACADFile">A <see cref="T:CADImport.CADImage">CADImage</see> to which the external reference is added.</param>
            <param name="AName">A <b>string</b> containing a name for the newly created external reference.</param>
            <param name="APos">A <see cref="T:CADImport.DPoint">DPoint</see> object representing an insertion point 
            for the external reference.</param>
            <param name="AScale">A <see cref="T:CADImport.DPoint">DPoint</see> object representing a scale 
            for the external reference.</param>
            <param name="Rotation">A rotation angle for the external reference.</param>
        </member>
        <member name="M:CADImport.CADImage.AddScaledDXFEx(CADImport.CADImage,System.String,CADImport.DPoint,CADImport.DPoint,System.Single)">
            <summary>
            Adds a scaled external reference to the current layout of the specified CAD image.
            </summary>
            <param name="ACADFile">A <see cref="T:CADImport.CADImage">CADImage</see> to which the external reference is added.</param>
            <param name="AName">A <b>string</b> containing a name for the newly created external reference.</param>
            <param name="APos">A <see cref="T:CADImport.DPoint">DPoint</see> object representing an insertion point 
            for the external reference.</param>
            <param name="AScale">A <see cref="T:CADImport.DPoint">DPoint</see> object representing a scale 
            for the external reference.</param>
            <param name="Rotation">A rotation angle for the external reference.</param>
        </member>
        <member name="M:CADImport.CADImage.ExportToMetafile(System.String,CADImport.DRect)">
            <summary>
            Exports a CAD drawing to Windows Enhanced metafile. 
            </summary>
            <param name="aName">
            A path to a newly created metafile.
            </param>		
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
        </member>
        <member name="M:CADImport.CADImage.ExportToMetafile(System.String,CADImport.DRect,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Exports a CAD drawing to Windows Enhanced metafile. 
            </summary>
            <param name="aName">
            A path to a newly created metafile.
            </param>		
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be saved.</param>
            <param name="callGetExtents">If true call GetExtents method</param>
        </member>
        <member name="M:CADImport.CADImage.ExportToMetafile(System.String,CADImport.DRect,System.Drawing.Rectangle)">
            <summary>
            Exports a CAD drawing to Windows Enhanced metafile. 
            </summary>
            <param name="aName">
            A path to a newly created metafile.
            </param>		
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be saved.</param>
        </member>
        <member name="M:CADImport.CADImage.Print(System.Boolean,System.Boolean,System.String)">
            <summary>
            Prints a current CAD image. 
            </summary>
        </member>
        <member name="M:CADImport.CADImage.EmfConvertToDXF(System.String)">
            <summary>
            Converts emf file to dxf file
            </summary>
            <param name="fileName">Name of file</param>
            <param name="handle">Handle to a window.</param>
        </member>
        <member name="M:CADImport.CADImage.EmfConvertToDXF(System.String,System.String)">
             <summary>
             Convert emf file to dxf file
             </summary>
             <param name="fileName">Name of file</param>
             <param name="handle">Handle to a window.</param>
            <param name="outFileName">Out file name</param>
        </member>
        <member name="M:CADImport.CADImage.GetLayerColor(System.Int32)">
            <summary>
            Gets layer color by index
            </summary>
            <param name="ind">An index of the layer in the collection of layers</param>
            <returns>A <see cref="T:System.Drawing.Color">Color</see> of the layer</returns>
        </member>
        <member name="M:CADImport.CADImage.ClearMarkers">
            <summary>
            Clears a collection of markers.
            </summary>
        </member>
        <member name="M:CADImport.CADImage.Undo">
            <summary>
            Undo change 
            </summary>
        </member>
        <member name="M:CADImport.CADImage.Redo">
            <summary>
            Redo change 
            </summary>
        </member>
        <member name="M:CADImport.CADImage.CopyEntities(CADImport.CADEntityCollection)">
            <summary>
            Copies selected entities to the clipboard
            </summary>
            <param name="selEnt"></param>
            <returns>Returns quantity of entities. Returns -1 if there is nothing to copy</returns>
        </member>
        <member name="M:CADImport.CADImage.CopyEntities">
            <summary>
            Copies selected entities to the clipboard
            </summary>
        </member>
        <member name="M:CADImport.CADImage.CutEntities(CADImport.CADEntityCollection)">
            <summary>
            Cuts selected entities from collection and paste them to the clipboard
            </summary>
            <param name="selEnt"></param>
            <returns>Returns quantity of entities</returns>
        </member>
        <member name="M:CADImport.CADImage.CutEntities">
            <summary>
            Cuts selected entities from collection and paste them to the clipboard
            </summary>
        </member>
        <member name="M:CADImport.CADImage.PasteEntities">
            <summary>
            Pastes entities from the clipboard
            </summary>
            <returns>Returns quantity of entities</returns>
        </member>
        <member name="M:CADImport.CADImage.PasteEntitiesExt">
            <summary>
            Pastes entities from the clipboard
            </summary>
            <returns>Returns list of entities</returns>
        </member>
        <member name="M:CADImport.CADImage.SetNewPosEntity(System.Double,System.Double,System.Double,CADImport.CADEntity)">
            <summary>
            Sets a new position for the specified entity.
            </summary>
            <param name="dx">A position displacement in the direction of the X axis.</param>
            <param name="dy">A position displacement in the direction of the Y axis.</param>
            <param name="dz">A position displacement in the direction of the Z axis.</param>
            <param name="ent">A <see cref="T:CADImport.CADEntity">CADEntity</see> for which a new position is set.</param>
        </member>
        <member name="M:CADImport.CADImage.SetNewPosEntitiesExt(System.Double,System.Double,System.Double,System.Drawing.Graphics)">
            <summary>
            Sets a new position for the specified entities
            </summary>
            <param name="dx">A position displacement in the direction of the X axis</param>
            <param name="dy">A position displacement in the direction of the Y axis</param>
            <param name="dz">A position displacement in the direction of the Z axis</param>
            <param name="graph"><see cref="T:System.Drawing.Graphics">Graph</see> object for entity redrawing</param>
        </member>
        <member name="M:CADImport.CADImage.InvalidateSelectedEntities(System.Drawing.Graphics)">
            <summary>
            Redraws a list of the selected entities
            </summary>
            <param name="graph"><see cref="T:System.Drawing.Graphics">Graphics</see> object for entity redrawing</param>
        </member>
        <member name="M:CADImport.CADImage.InvalidateSelectedEntities(System.Drawing.Graphics,CADImport.CADEntityCollection)">
            <summary>
            Redraws a collection of an entities
            </summary>
            <param name="graph"><see cref="T:System.Drawing.Graphics">Graphics</see> object for entity redrawing</param>
            <param name="lst">Redrawing <see cref="T:CADImport.CADEntityCollection">collection of entities</see></param>
        </member>
        <member name="M:CADImport.CADImage.DrawChangeEntity(System.Int32,System.Int32,System.Windows.Forms.Control)">
            <summary>
            Changes a position of the marker designating the selected entity.
            </summary>
            <param name="dx">A position displacement in the direction of the X axis.</param>
            <param name="dy">A position displacement in the direction of the Y axis.</param>	
            <param name="control">A control for drawing</param>
        </member>
        <member name="M:CADImport.CADImage.ChangePositionSelectedEntity(System.Double,System.Double,System.Double,System.Drawing.Graphics,System.Boolean,CADImport.CADEntity)">
            <summary>
            Changes a position of the selected entity.
            </summary>
            <param name="dx">A position displacement in the direction of the X axis.</param>
            <param name="dy">A position displacement in the direction of the Y axis.</param>
            <param name="dz">A position displacement in the direction of the Z axis.</param>
            <param name="graph">A <see cref="T:System.Drawing.Graphics">Graphics</see> object used for drawing the displaced entity in the new position.</param>
            <param name="det">A boolean value indicating whether the selected entity is redrawn in the new position.
            <b>true</b> if the entity is redrawn, <b>false</b> if the entity is not redrawn.</param>
            <param name="sel">The selected <see cref="T:CADImport.CADEntity">CADEntity</see>.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle">Rectangle</see> that bounds the selected entity.</returns>
        </member>
        <member name="M:CADImport.CADImage.DrawMoveEntityTrace(System.Int32,System.Int32,System.Windows.Forms.Control)">
            <summary>
            Draws entities on their offsetting
            </summary>
        </member>
        <member name="M:CADImport.CADImage.ChangePositionSelectedEntities(System.Double,System.Double,System.Double,System.Drawing.Graphics,System.Boolean)">
            <summary>
            Changes position of the selected entities
            </summary>
            <param name="dx">A position displacement in the direction of the X axis</param>
            <param name="dy">A position displacement in the direction of the Y axis</param>
            <param name="dz">A position displacement in the direction of the Z axis</param>
            <param name="graph">A <see cref="T:System.Drawing.Graphics">Graphics</see> object used for drawing the displaced entity in the new position</param>
            <param name="det">A boolean value indicating whether the selected entity is redrawn in the new position.
            <b>true</b> if the entity is redrawn, <b>false</b> if the entity is not redrawn</param>
        </member>
        <member name="M:CADImport.CADImage.SetNewEntityMarkerPos(System.Double,System.Double,System.Double)">
            <summary>
            Sets a new position for the selected entity. The entity's new position is defined by the position of the marker.
            </summary>
            <param name="dx">A position displacement of the marker in the direction of the X axis.</param>
            <param name="dy">A position displacement of the marker in the direction of the Y axis.</param>
            <param name="dz">A position displacement of the marker in the direction of the Z axis.</param>
        </member>
        <member name="M:CADImport.CADImage.RemoveEntity(CADImport.CADEntity)">
            <summary>
            Removes <see cref="T:CADImport.CADEntity"/> object.
            </summary>
            <param name="ent">An entity to remove</param>
            <returns><b>true</b> if sucessfull, otherwise <b>false</b></returns>
        </member>
        <member name="M:CADImport.CADImage.RemoveEntity">
            <summary>
            Removes all entities form <see cref="T:CADImport.CADEntityCollection">list of entities</see>
            </summary>
            <returns><b>true</b> if sucessfull, otherwise <b>false</b></returns>
        </member>
        <member name="M:CADImport.CADImage.RemoveEntity(CADImport.CADEntityCollection)">
            <summary>
            Removes all entities form <see cref="P:CADImport.CADConverter.Entities">entities collection</see>
            </summary>
            <returns><b>true</b> if sucessfull, otherwise <b>false</b></returns>
        </member>
        <member name="M:CADImport.CADImage.ClearUndoCollection">
            <summary>
            Clears undo entity collection 
            </summary>
        </member>
        <member name="M:CADImport.CADImage.ClearRedoCollection">
            <summary>
            Clears redo entity collection 
            </summary>
        </member>
        <member name="M:CADImport.CADImage.AddToUndoList(CADImport.CADEntity)">
            <summary>
            Adds operation "create new Entity" to undo list
            </summary>
            <param name="ent">Adding entity</param>
        </member>
        <member name="M:CADImport.CADImage.DrawSnapTrace(System.Int32,System.Int32,System.Windows.Forms.Control,System.Drawing.RectangleF)">
            <summary>
            Draws snap icon in case of proximity of object to current coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control">Control</see>, where the element is drawn</param>
            <param name="rect">Current <see cref="T:System.Drawing.RectangleF">dimensions</see> of the drawing</param>
            <returns>Coordinates of the snap</returns>
        </member>
        <member name="M:CADImport.CADImage.ClearSnapTrace(System.Windows.Forms.Control)">
            <summary>
            Clears last drawn snap drawing element
            </summary>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/>Control, where the drawing element is drawn</param>
        </member>
        <member name="M:CADImport.CADImage.RefreshSnapTrace(System.Windows.Forms.Control)">
            <summary>
            Refreshes a region of the last drawn snap drawing element
            </summary>
            <param name="control"><see cref="T:System.Windows.Forms.Control">Control</see>, where the drawing element is drawn</param>
        </member>
        <member name="M:CADImport.CADImage.ClearSnapTrace">
            <summary>
            Clears the last drawn snap drawing element
            </summary>
        </member>
        <member name="M:CADImport.CADImage.GetRealSnapPoint(CADImport.CADEntity,CADImport.DPoint,CADImport.DRect)">
            <summary>
            Smooths a point in absolute coordinates by the entity
            </summary>
            <param name="ent"><see cref="T:CADImport.CADEntity">CADEntity</see> for which a point is smoothed</param>
            <param name="point">A point (<see cref="T:CADImport.DPoint">DPoint</see>) to smoothing</param>
            <param name="box"><see cref="T:CADImport.DRect">Box</see>, where the point is smoothed</param>
            <returns>Returns smoothed point (<see cref="T:CADImport.DPoint">DPoint</see>)</returns>
        </member>
        <member name="M:CADImport.CADImage.InitialNewImage">
             <summary>
             Initializes a new image with the default size
             </summary>
             <example>
             <p>Use <see cref="M:CADImport.CADImage.InitialNewImage">InitialNewImage</see> example:</p>
            <p>[C#]</p>
            <code>		
            	if(cadImage != null)
            		cadImage.Dispose();
            	scale = 1;
            	prev_scale = 1;
            	pos = new PointF();
            	cadImage = new CADImage();
            	cadImage.SelectionMode = SelectionEntityMode.Enabled;
            	cadImage.UseDoubleBuffering = false;
            	if(cadPictBox.BackColor == Color.White)
            		White_Click();
            	else 
            		Black_Click();
            	cadImage.InitialNewImage();
            	EnableButton(true);
            	trvEntity.Nodes.Clear();				
            	DoResize(cadImage, ref pos, cadPictBox, ref curClRect, deactiv);			
            	ObjEntity.cadImage = cadImage;										//for object inspector
            	ObjEntity.propGrid = propGrid;										//for object inspector
            	cadImage.UseWinEllipse = false;
            	entCreator.Image = cadImage;
            	prtForm.Image = cadImage;
            	SetLayList();	
            	</code>
             </example>		
            	<seealso cref="T:CADImport.DPoint"/>		 
            	<seealso cref="T:CADImport.CADPolyLine"/>		 
            	<seealso cref="T:CADImport.CADImage"/>		 
            	<seealso cref="F:CADImport.CADConst.clNone"/>		
        </member>
        <member name="M:CADImport.CADImage.InitialNewImage(System.Double,System.Double)">
            <summary>
            Initializes a new image with the specified size
            </summary>
        </member>
        <member name="M:CADImport.CADImage.LoadFromWeb(System.String)">
            <summary>
            Loads CAD image from hyperlink 
            </summary>
            <param name="path">Hyperlink path</param>
            <returns><b>true</b> if loading was sucessfull; otherwise <b>false</b></returns>
        </member>
        <member name="P:CADImport.CADImage.Selector">
            <summary>
            Provides selection functionality. 
            </summary>
        </member>
        <member name="P:CADImport.CADImage.Center">
            <summary>
            Gets or sets <see cref="T:CADImport.CADImage">CADImage</see> center point.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.Painter">
            <summary>
            Provides image drawing functionality. 
            </summary>
        </member>
        <member name="P:CADImport.CADImage.GDIPainter">
            <summary>
            Provides drawing functionality based on GDI+. 
            </summary>
        </member>
        <member name="P:CADImport.CADImage.UseSHXFonts">
            <summary>
            Specifies if SHX fonts will be used for visualization.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.UseTTFFonts">
            <summary>
            Specifies if TTF fonts will be used for visualization.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.UseMultyTTFFonts">
            <summary>
            Gets or sets a value indicating whether a multimode is used for showing symbols.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.SHXSearchPaths">
            <summary>
            Gets or sets paths for searching SHX fonts.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.SearchSHXPaths">
            <summary>
            Gets or sets a value specifying whether SHX paths will be searched for the fonts.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.SelectedEntities">
            <summary>
            Gets or sets a list of selected entities
            </summary>
        </member>
        <member name="P:CADImport.CADImage.SelectEntitiesCount">
            <summary>
            Gets the number of selected entities
            </summary>
        </member>
        <member name="P:CADImport.CADImage.SelectionMode">
            <summary>
            Gets or sets a state of the Selection tool.
            </summary>
            <value>A <see cref="T:CADImport.SelectionEntityMode">SelectionEntityMode</see> enumeration value 
            that specifies a state of the Selection tool.</value>
        </member>
        <member name="P:CADImport.CADImage.SelectionViewPortMode">
            <summary>
            For future versions.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.UseDoubleBuffering">
            <summary>
            Gets or sets drawing buffering mode using metafile
            </summary>
        </member>
        <member name="P:CADImport.CADImage.GraphicsOutMode">
            <summary>
            Specifies image draw mode.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.IsWithoutBorder">
            <summary>
            Gest or sets a value indicating whether to draw the <see cref="T:CADImport.CADImage">CADImage</see> without borders.
            </summary>
            <value><b>true</b> if the <see cref="T:CADImport.CADImage">CADImage</see> is drawn without borders; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADImage.PrintDialog">
            <summary>
            Gets or sets print dialog
            </summary>
        </member>
        <member name="P:CADImport.CADImage.CodePage">
            <summary>
            Gets or sets a number that identifies the encoding used in the loaded CAD file.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.InterpolationMode">
            <summary>
            Gets or sets the interpolation mode associated with current Graphics object
            </summary>
        </member>
        <member name="P:CADImport.CADImage.NumberOfPartsInCircle">
            <summary>
            Gets or sets a quantity of segments to be used to draw a circle.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.ResizeDisproportionateDrawing">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="P:CADImport.CADImage.LastLoadedFilePath">
            <summary>
            Specifying of the search directory (used for X-Refs, ImageEnt)
            </summary>
        </member>
        <member name="P:CADImport.CADImage.MMToPixelX">
            <summary>
            Gets or sets a value corresponding to amount of millimeters per one pixel.
            </summary>
            <example>
            <p>Example use MMToPixelX:</p>		
            <p>[C#]</p>
            <code>
            public void SaveRealSizeImage(Control drawingControl)
            {
            	Stream str = File.OpenRead(@".\test.dwg");														
            	CADImage cadImage = new CADImport.DWG.DWGImage();
            	cadImage.LoadFromStream(str);								
            	str.Close();
            	DRect tmpRect = new DRect(0, 0, 1, 1);
            	cadImage.SetNewMMToPixel(drawingControl.CreateGraphics());
            	double realScaleDouble = this.cadImage.AbsWidth / this.cadImage.MMToPixelX;			
            	tmpRect.Width = tmpRect.Width * realScaleDouble; 
            	tmpRect.Height = tmpRect.Height * realScaleDouble;	
            	this.cadImage.SaveToFile(@"result.jpg", ImageFormat.Jpeg, tmpRect);
            }
            </code>
            </example>		
        </member>
        <member name="P:CADImport.CADImage.FileInf">
            <summary>
            Gets information about a currently open file by means of the <see cref="T:System.IO.FileInfo">FileInfo</see> class.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.CurrentLayoutIndex">
            <summary>
            Gets an index of the current layout.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.IsPlotting">
            <summary>
            Is plotting.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.Charset">
            <summary>
            Gets or sets a character set for the text entities.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.IsDraw3DAxes">
            <summary>
            Gets or sets a value indicating whether 3D axes are shown on the drawing.
            </summary>
            <value><b>true</b> if the 3D axes are shown; otherwise, <b>false</b>. Default value is <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADImage.IsShowBackground">
            <summary>
            Gets or sets a value indicating using of a <see cref="P:CADImport.CADImage.BackgroundColor">BackgroundColor</see>. 
            </summary>
            <value><b>true</b> if a background color is used; otherwise, <b>false</b>. Default value is <b>true</b>.</value>
        </member>
        <member name="P:CADImport.CADImage.IsShowLineWeight">
            <summary>
            Gets or sets a value indicating whether a thickness of lines in the <see cref="T:CADImport.CADImage">CADImage</see> is 
            determined by the file data.
            </summary>
            <value><b>true</b> if a thickness of lines in the <see cref="T:CADImport.CADImage">CADImage</see> is determined by the file data; otherwise, <b>false</b>.</value> 
            <remarks>If this property value is <b>false</b>, a thickness of lines in the <see cref="T:CADImport.CADImage">CADImage</see> is determined by the 
            <see cref="P:CADImport.CADImage.NullWidth">NullWidth</see> property.</remarks>
        </member>
        <member name="P:CADImport.CADImage.IsWithoutMargins">
            <summary>
            Gets or sets a value indicating whether to draw the <see cref="T:CADImport.CADImage">CADImage</see> without margins.
            </summary>
            <value><b>true</b> if the <see cref="T:CADImport.CADImage">CADImage</see> is drawn without margins; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADImage.LineScaled">
            <summary>
            Gets or sets a value indicating whether a width of lines to draw all 
            entities in the drawing is specified by the file data.
            </summary>
            <value><b>true</b> if a line width is determined by the file data; otherwise, <b>false</b>.</value>
            <remarks>If this property returns <b>false</b> a width of lines to draw all CAD entities is 
            specified by the <see cref="P:CADImport.CADImage.NullWidth">NullWidth</see> property.</remarks>
        </member>
        <member name="P:CADImport.CADImage.NullWidth">
            <summary>
            Gets or sets default thickness for lines used to draw a <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
            <value>Line thickness. Default value is 1.</value>
        </member>
        <member name="P:CADImport.CADImage.LineWeightScale">
            <summary>
            Gets or sets a scale for drawing lines.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.TextVisible">
            <summary>
            Gets or sets a value indicating whether the texts in the <see cref="T:CADImport.CADImage">CADImage</see> are visible.
            </summary>
            <value><b>true</b> if the texts are visible; otherwise, <b>false</b>. Default value is <b>true</b>.</value>
        </member>
        <member name="P:CADImport.CADImage.TTFSmoothing">
            <summary>
            Gets or sets a value indicating whether TTF fonts are smoothed.
            </summary>
            <value><b>true</b> if TTF fonts are smoothed; otherwise, <b>false</b>. Default value is <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADImage.LayersCount">
            <summary>
            Gets a quantity of layers in this <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.LayoutsCount">
            <summary>
            Gets a quantity of layouts in this <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.BorderType">
            <summary>
            Gets or sets a border type.
            </summary>
            <value>One of the <see cref="T:CADImport.CADBorderType"/> values.</value>
        </member>
        <member name="P:CADImport.CADImage.BorderSize">
            <summary>
            Gets or sets a border size in pixels.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.ColorToLineWeight">
            <summary>
            Gets a line weight specified by colors.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.Converter">
            <summary>
            Gets a converter that loads CAD entities from the file to draw 
            them in the current <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
            <value>An object of the <see cref="T:CADImport.CADConverter">CADConverter</see> class.</value>
        </member>
        <member name="P:CADImport.CADImage.CurrentLayout">
            <summary>
            Gets or sets a current layout for the <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
            <value>A <see cref="T:CADImport.CADLayout">CADLayout</see> representing a current layout of the CAD drawing.</value>
        </member>
        <member name="P:CADImport.CADImage.IsStopped">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.DrawMode">
            <summary>
            Gets or sets a current drawing mode.
            </summary>
            <value>One of the <see cref="T:CADImport.CADDrawMode">CADDrawMode</see> values.</value>
        </member>
        <member name="P:CADImport.CADImage.Extents">
            <summary>
            Gets or sets an extents of the <see cref="T:CADImport.CADImage">CADImage</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object that specifies the <see cref="T:CADImport.CADImage">CADImage</see> extents.</value> 
        </member>
        <member name="P:CADImport.CADImage.PureExtents">
            <summary>
            Gets <see cref="T:CADImport.CADImage">CADImage</see> extents without margins.
            </summary>
            <value>The <see cref="T:CADImport.DRect">DRect</see> object that specifies extents of the <see cref="T:CADImport.CADImage">CADImage</see> without margins.</value>
        </member>
        <member name="P:CADImport.CADImage.UseWinEllipse">
            <summary>
            Gets or sets a value indicating whether arcs and circles in the <see cref="T:CADImport.CADImage">CADImage</see> 
            are drawn with GDI+ drawing methods without linearization.
            </summary>
            <value><b>true</b> if the GDI+ methods are used for drawing arcs and circles in the <see cref="T:CADImport.CADImage">CADImage</see>; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADImage.Angle">
            <summary>
            Gets or sets the angle for this <see cref="T:CADImport.CADImage">CADImage</see> object visualization.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.IsDrawingRotated">
            <summary>
            Gets a value indicating whether the <see cref="T:CADImport.CADImage">CADImage</see> has been rotated.
            </summary>
            <value><b>true</b> if the <see cref="T:CADImport.CADImage">CADImage</see> has been rotated; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADImage.DimensionsVisible">
            <summary>
            Gets or sets a value indicating whether dimensions on the drawing are visible.
            </summary>
            <value><b>true</b> if the dimensions are visible; otherwise, <b>false</b>. Default value is <b>true</b>.</value>
        </member>
        <member name="P:CADImport.CADImage.Is3D">
            <summary>
            Gets a value indicating whether this <see cref="T:CADImport.CADImage">CADImage</see> is three-dimensional. 
            </summary>
            <value><b>true</b> if the <see cref="T:CADImport.CADImage">CADImage</see> is three-dimensional; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADImage.Layouts">
            <summary>
            Gets a collection of layouts in the current <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
            <value>An object of the <see cref="T:CADImport.CADLayoutCollection">CADLayoutCollection</see> class.</value>
        </member>
        <member name="P:CADImport.CADImage.DefaultLayoutIndex">
            <summary>
            Gets or sets a default layout index.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.BackgroundColor">
            <summary>
            Gets or sets a background color of this <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.DefaultColor">
            <summary>
            Gets or sets a default color for the <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
            <value>An object of the <see cref="T:System.Drawing.Color"/> structure. Default value is black.</value>
        </member>
        <member name="P:CADImport.CADImage.AbsHeight">
            <summary>
            Gets an absolute height of the <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.AbsWidth">
            <summary>
            Gets an absolute width of the <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.AbsDepth">
            <summary>
            Gets an absolute depths of the <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADImage.CurrentMarker">
            <summary>
            Gets a currently selected marker.
            </summary>
            <value>A currently selected <see cref="T:CADImport.Professional.Marker">Marker</see> or null if no marker is selected.</value>
        </member>
        <member name="P:CADImport.CADImage.UndoMode">
            <summary>
            Gets or sets whether undo/redo is disable or enable for professional version
            </summary>
            <value><b>true</b> if the undo is enable; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADImage.SnapScreenPoint">
            <summary>
            Gets current point in display coordinates
            </summary>
        </member>
        <member name="P:CADImport.CADImage.SnapRealPoint">
            <summary>
            Gets a current point in absolute coordinates (drawing coordinates)
            </summary>
        </member>
        <member name="P:CADImport.CADImage.EnableSnap">
            <summary>
            Gets or sets enablement of snap mode
            </summary>
        </member>
        <member name="P:CADImport.CADImage.IsSnapObject">
            <summary>
            Gets a value, which shows if there is an object for snapping under current coordinates
            </summary>
        </member>
        <member name="T:CADImport.CADMath">
            <summary>
            Provides methods for mathematical calculations.
            </summary>
        </member>
        <member name="F:CADImport.CADMath.accuracy">
            <summary>
            The accuracity for calculations.
            </summary>
        </member>
        <member name="F:CADImport.CADMath.one_64">
            <summary>
            The 1/64 value.
            </summary>
        </member>
        <member name="M:CADImport.CADMath.Sqr(System.Double)">
            <summary>
            Raises specified value to the second power.
            </summary>
            <param name="X">Input value.</param>
            <returns>The second power of the specified value.</returns>
        </member>
        <member name="M:CADImport.CADMath.Radian(System.Double)">
            <summary>
            Converts a degree value into a radian value.
            </summary>
            <param name="Angle">An angle in deegrees</param>
            <returns>Converted angle in radians</returns>
        </member>
        <member name="M:CADImport.CADMath.SwapDouble(System.Double@,System.Double@)">
            <summary>
            Swaps two double values.
            </summary>
            <param name="A">The first value to swap</param>
            <param name="B">The second value to swap</param>
        </member>
        <member name="M:CADImport.CADMath.GetPointOnCircle(CADImport.DPoint,System.Double,System.Double)">
            <summary>
            Calculates a point that belongs to the arc of a specified circle.
            </summary>
            <param name="center">The center point of a circle</param>
            <param name="radius">The radius of a circle</param>
            <param name="angle">The angle between a required point and OX axis</param>
            <returns>A drawing 3D point</returns>
        </member>
        <member name="T:CADImport.CADExtrusion">
            <summary>
            Provides methods to recalculate coordinates taking into account 3D orientation.
            </summary>
        </member>
        <member name="M:CADImport.CADExtrusion.Ort(CADImport.DPoint)">
            <summary>
            Normalizes a point to Ort. 
            </summary>
            <param name="P">A drawing 3D point to be normalized</param>
            <returns>The normalized drawing 3D point</returns>
        </member>
        <member name="M:CADImport.CADExtrusion.DoPreExtrusion(CADImport.DPoint@,CADImport.DPoint)">
            <summary>
            Recalculates coordinates of a point in the basic coordinate system. This coordinate
            system is built respectively to Arbitary Axis Algoritm.
            </summary>
            <param name="P">A drawing 3D point to be changed</param>
            <param name="N">0Z axis of the basic coordinate system, where 0X and 0Y are being selected respectively to Arbitary Axis Algoritm</param>
        </member>
        <member name="M:CADImport.CADExtrusion.DoNewAutoCADAxes(CADImport.DPoint,CADImport.DPoint@,CADImport.DPoint@,CADImport.DPoint@)">
            <summary>
            Defines the axes for coordinates recalculation.
            </summary>
            <param name="V">A vector</param>
            <param name="UX">Receives X direction vector</param>
            <param name="UY">Receives Y direction vector</param>
            <param name="UZ">Receives Z direction vector</param>
        </member>
        <member name="M:CADImport.CADExtrusion.DoExtrusion(CADImport.DPoint@,CADImport.DPoint)">
            <summary>
            Recalculates coordinates of a point in the new coordinate system. This coordinate system is built respectively to Arbitary Axis Algoritm.
            </summary>
            <param name="P">A drawing 3D point to be changed</param>
            <param name="N">0Z axis of the new coordinate system, where 0X and 0Y are being selected respectively to Arbitary Axis Algoritm.</param>
        </member>
        <member name="M:CADImport.CADExtrusion.Vector(CADImport.DPoint,CADImport.DPoint)">
            <summary>
            Returns vector product of two vectors.
            </summary>
            <param name="P1">The first vector</param>
            <param name="P2">The second vector</param>
            <returns>A vector product of two vectors</returns>
        </member>
        <member name="M:CADImport.CADExtrusion.MatFromExtr(CADImport.DPoint,System.Single)">
            <summary>
            Returns a <see cref="T:CADImport.CADMatrix">matrix</see> that specifies the extrusion.
            </summary>
            <param name="P">A view direction point</param>
            <param name="Angle">A rotation angle</param>
            <returns>A matrix that specify the extrusion</returns>
        </member>
        <member name="M:CADImport.CADExtrusion.TurnAroundOfVector(CADImport.DPoint,CADImport.DPoint,System.Double)">
            <summary>
            Rotates a point around a vector by a specified angle.
            </summary>
            <param name="APoint">A drawing 3D point to be rotated</param>
            <param name="AVect">A vector</param>
            <param name="AAngle">The rotation angle</param>
            <returns>A rotated drawing 3D point</returns>
        </member>
        <member name="M:CADImport.CADExtrusion.GetViewTwistMatrix(CADImport.DPoint,System.Single)">
            <summary>
            Calculates and returns a <see cref="T:CADImport.CADMatrix">matrix</see> that specifies a <see cref="T:CADImport.CADViewPort">viewport</see>.
            </summary>
            <param name="ADirect">A viewport <see cref="P:CADImport.CADViewPort.ViewDirection"> view direction point</see></param>
            <param name="AAngle">A viewport <see cref="P:CADImport.CADViewPort.ViewTwistAngle">ViewTwistAngle</see> value</param>
            <returns>A matrix that specifies a viewport.</returns>
        </member>
        <member name="M:CADImport.CADExtrusion.Reverse(CADImport.DPoint)">
            <summary>
            Inverts point coordinates.
            </summary>
            <param name="P">A drawing 3D point</param>
            <returns>An inverted 3D point</returns>
        </member>
        <member name="T:CADImport.DRect">
            <summary>
            Represents a parallelepiped.
            </summary>
            <remarks>
            A <b>DRect</b> object is specified by two <see cref="T:CADImport.DPoint">DPoint</see>s.
            </remarks>
        </member>
        <member name="F:CADImport.DRect.left">
            <summary>
            The X-coordinate of the first point that specifies the <see cref="T:CADImport.DRect">DRect</see> object.
            </summary>
        </member>
        <member name="F:CADImport.DRect.top">
            <summary>
            The Y-coordinate of the first point that specifies the <see cref="T:CADImport.DRect">DRect</see> object.
            </summary>
        </member>
        <member name="F:CADImport.DRect.z1">
            <summary>
            The Z-coordinate of the first point that specifies the <see cref="T:CADImport.DRect">DRect</see> object.
            </summary>
        </member>
        <member name="F:CADImport.DRect.right">
            <summary>
            The X-coordinate of the second point that specifies the <see cref="T:CADImport.DRect">DRect</see> object.
            </summary>
        </member>
        <member name="F:CADImport.DRect.bottom">
            <summary>
            The Y-coordinate of the second point that specifies the <see cref="T:CADImport.DRect">DRect</see> object.
            </summary>
        </member>
        <member name="F:CADImport.DRect.z2">
            <summary>
            The Z-coordinate of the second point that specifies the <see cref="T:CADImport.DRect">DRect</see> object.
            </summary>
        </member>
        <member name="M:CADImport.DRect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.DRect">DRect</see> class
            as a two-dimensional rectangle.
            </summary>
            <param name="x1">X-coordinate of the rectangle's top-left corner.</param>
            <param name="x2">Y-coordinate of the rectangle's top-left corner.</param>
            <param name="x3">X-coordinate of the rectangle's bottom-right corner.</param>
            <param name="x4">Y-coordinate of the rectangle's bottom-right corner.</param>
        </member>
        <member name="M:CADImport.DRect.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.DRect">DRect</see> class 
            as a parallelepiped.
            </summary>
            <param name="aLeft">X-coordinate of the parallelepiped's first specifying point.</param>
            <param name="aTop">Y-coordinate of the parallelepiped's first specifying point.</param>
            <param name="aZ1">Z-coordinate of the parallelepiped's first specifying point.</param>
            <param name="aRight">X-coordinate of the parallelepiped's second specifying point.</param>
            <param name="aBottom">Y-coordinate of the parallelepiped's second specifying point.</param>
            <param name="aZ2">Z-coordinate of the parallelepiped's second specifying point.</param>
        </member>
        <member name="M:CADImport.DRect.Expand(System.Drawing.Point)">
            <summary>
            Expands the <see cref="T:CADImport.DRect">DRect</see> object up to the specified point.
            </summary>
            <param name="P">A <see cref="T:System.Drawing.Point">Point</see> that defines a new extent 
            of the <see cref="T:CADImport.DRect">DRect</see> object.</param>
            <remarks><p>The specified point defines only two-dimensional expansion.</p>
            <p>The specified point will be part of the expanded parallelepiped.</p></remarks>
            <remarks>This function can be used only for rectangles that have bottom greater than top.</remarks>
        </member>
        <member name="M:CADImport.DRect.Offset(System.Double,System.Double,System.Double)">
            <summary>
            Adds an offset at x, y and z axes to this <see cref="T:CADImport.DRect"/> object.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="dz"></param>
        </member>
        <member name="M:CADImport.DRect.Inflate(System.Double,System.Double)">
            <summary>
            Enlarges this <see cref="T:CADImport.DRect">DRect</see> object by specified values.
            </summary>
            <param name="sizeX">X size value</param>
            <param name="sizeY">Y size value</param>
        </member>
        <member name="M:CADImport.DRect.Rotate(System.Double)">
            <summary>
            Rotates the current <see cref="T:CADImport.DRect"/> object in 2D coordinates system (Z coordinate does not changes)
            </summary>
            <param name="angle">Rotation angle</param>
        </member>
        <member name="M:CADImport.DRect.RotateAroundPoint(CADImport.DPoint,System.Double)">
            <summary>
            Rotates the current <see cref="T:CADImport.DRect"/> object in 2D coordinates system (Z coordinate does not changes)
            </summary>
            <param name="angle">Rotation angle</param>
            <param name="center">Central point for rotation</param>
        </member>
        <member name="M:CADImport.DRect.Expand(CADImport.DPoint)">
            <summary>
            Expands the <see cref="T:CADImport.DRect">DRect</see> object up to the specified point.
            </summary>
            <param name="p">A <see cref="T:CADImport.DPoint">DPoint</see> that defines a new extent 
            of the <see cref="T:CADImport.DRect">DRect</see> object.</param>
            <remarks><p>The specified point defines only two-dimensional expansion.</p>
            <p>The specified point will be part of the expanded parallelepiped.</p></remarks>
        </member>
        <member name="M:CADImport.DRect.Intersect(CADImport.DRect,CADImport.CADMatrix)">
            <summary>
            Checks <see cref="T:CADImport.DRect">DRect</see> and <see cref="T:CADImport.CADMatrix">CADMatrix</see> objects for intersection.
            </summary>
            <param name="rect">A <see cref="T:CADImport.DRect">DRect</see> object</param>
            <param name="matrix">A <see cref="T:CADImport.CADMatrix">CADMatrix</see> object</param>
        </member>
        <member name="M:CADImport.DRect.Intersect(CADImport.DRect)">
            <summary>
            Checks <see cref="T:CADImport.DRect">DRect</see> object for intersection
            </summary>
            <param name="rect">A <see cref="T:CADImport.DRect">DRect</see> object</param>
        </member>
        <member name="M:CADImport.DRect.Norm">
            <summary>
            Normalizes this <see cref="T:CADImport.DRect">DRect</see> object.
            </summary>
        </member>
        <member name="M:CADImport.DRect.Union(CADImport.DRect)">
            <summary>
            Expands a current <see cref="T:CADImport.DRect"/> object to corner points of specified <see cref="T:CADImport.DRect"/> object.
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:CADImport.DRect.IsBadRect">
            <summary>
            Checks if this <see cref="T:CADImport.DRect">DRect</see> is not valid
            </summary>
        </member>
        <member name="M:CADImport.DRect.IsBadRect(CADImport.DRect)">
            <summary>
            Checks if specified <see cref="T:CADImport.DRect"/> object is Bad rect.
            </summary>
            <param name="rect">Checked <see cref="T:CADImport.DRect"/></param>
        </member>
        <member name="M:CADImport.DRect.UnitRect">
            <summary>
            Returns a new <see cref="T:CADImport.DRect"/> with unit sizes.
            </summary>
        </member>
        <member name="M:CADImport.DRect.TransRectCorners(CADImport.CADMatrix)">
            <summary>
            Rotates this <see cref="T:CADImport.DRect">DRect</see> object by a specified <see cref="T:CADImport.CADMatrix">CADMatrix</see>.
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:CADImport.DRect.Equals(System.Object)">
            <summary>
            Determines whether this <see cref="T:CADImport.DRect">DRect</see> instance and a specified object are equal.
            </summary>
            <param name="obj">An object to compare with this <see cref="T:CADImport.DRect">DRect</see> instance.</param>
            <value><b>true</b> if the specified object is equal to this <see cref="T:CADImport.DRect">DRect</see> instance; otherwise, <b>false</b>.</value>
        </member>
        <member name="M:CADImport.DRect.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
        </member>
        <member name="M:CADImport.DRect.op_Equality(CADImport.DRect,CADImport.DRect)">
            <summary>
            Checks if two <see cref="T:CADImport.DRect">DRect</see> objects are equal.
            </summary>
            <param name="p1">A <see cref="T:CADImport.DRect">DRect</see> object.</param>
            <param name="p2">A <see cref="T:CADImport.DRect">DRect</see> object.</param>
            <value><b>true</b> if two <see cref="T:CADImport.DRect">DRect</see> objects are equal; otherwise, <b>false</b>.</value>
            <remarks>Two <see cref="T:CADImport.DRect">DRect</see> objects are equal if all six coordinates of the first object are equal to corresponding coordinates of the second.</remarks>
        </member>
        <member name="M:CADImport.DRect.op_Equality(System.Drawing.Rectangle,CADImport.DRect)">
            <summary>
            Checks if <see cref="T:System.Drawing.Rectangle">Rectangle</see> object and <see cref="T:CADImport.DRect">DRect</see> object are equal.
            </summary>
            <param name="p1">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object.</param>
            <param name="p2">A <see cref="T:CADImport.DRect">DRect</see> object.</param>
            <value><b>true</b> if two objects are equal; otherwise, <b>false</b>.</value>
            <remarks>Two 3D objects are equal if all six coordinates of the first object are equal to the corresponding coordinates of the second.</remarks>
        </member>
        <member name="M:CADImport.DRect.op_Equality(CADImport.DRect,System.Drawing.Rectangle)">
            <summary>
            Checks if <see cref="T:CADImport.DRect">DRect</see> object and <see cref="T:System.Drawing.Rectangle">Rectangle</see> object are equal.
            </summary>
            <param name="p1">A <see cref="T:CADImport.DRect">DRect</see> object.</param>
            <param name="p2">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object.</param>
            <value><b>true</b> if two objects are equal; otherwise, <b>false</b>.</value>
            <remarks>Two 3D objects are equal if all six coordinates of the first object are equal to the corresponding coordinates of the second.</remarks>
        </member>
        <member name="M:CADImport.DRect.op_Addition(CADImport.DRect,CADImport.DRect)">
            <summary>
            Summarizes two <see cref="T:CADImport.DRect"/> objects
            </summary>
            <param name="p1">First <see cref="T:CADImport.DRect"/> object</param>
            <param name="p2">Second <see cref="T:CADImport.DRect"/> object</param>
            <returns>Returns result of summation</returns>
        </member>
        <member name="M:CADImport.DRect.op_Inequality(CADImport.DRect,CADImport.DRect)">
            <summary>
            Checks if two <see cref="T:CADImport.DRect">DRect</see> objects are unequal.
            </summary>
            <param name="p1">A <see cref="T:CADImport.DRect">DRect</see> object.</param>
            <param name="p2">A <see cref="T:CADImport.DRect">DRect</see> object.</param>
            <value><b>true</b> if two <see cref="T:CADImport.DRect">DRect</see> objects are not equal; otherwise, <b>false</b>.</value>
            <remarks>Two <see cref="T:CADImport.DRect">DRect</see> objects are not equal if at least one coordinate of the first object is 
            not equal to the corresponding coordinate of the second object.</remarks>
        </member>
        <member name="M:CADImport.DRect.op_Inequality(System.Drawing.Rectangle,CADImport.DRect)">
            <summary>
            Checks if <see cref="T:System.Drawing.Rectangle">Rectangle</see> object and <see cref="T:CADImport.DRect">DRect</see> object are unequal.
            </summary>
            <param name="p1">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object.</param>
            <param name="p2">A <see cref="T:CADImport.DRect">DRect</see> object.</param>
            <value><b>true</b> if two objects are not equal; otherwise, <b>false</b>.</value>
            <remarks>Two 3D objects are not equal if at least one coordinate of the first object is 
            not equal to the corresponding coordinate of the second object.</remarks>
        </member>
        <member name="M:CADImport.DRect.op_Inequality(CADImport.DRect,System.Drawing.Rectangle)">
            <summary>
            Checks if <see cref="T:CADImport.DRect">DRect</see> object and <see cref="T:System.Drawing.Rectangle">Rectangle</see> object are unequal.
            </summary>
            <param name="p1">A <see cref="T:CADImport.DRect">DRect</see> object.</param>
            <param name="p2">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object.</param>
            <value><b>true</b> if two objects are not equal; otherwise, <b>false</b>.</value>
            <remarks>Two 3D objects are not equal if at least one coordinate of the first object is 
            not equal to the corresponding coordinate of the second object.</remarks>
        </member>
        <member name="M:CADImport.DRect.op_Implicit(System.Drawing.RectangleF)~CADImport.DRect">
            <summary>
            Converts RectangleF to <see cref="T:CADImport.DRect">DRect</see>
            </summary>
            <param name="r">RectangleF value</param>
            <returns><see cref="T:CADImport.DRect">DRect</see> value</returns>
        </member>
        <member name="M:CADImport.DRect.op_Implicit(CADImport.DRect)~System.Drawing.Rectangle">
            <summary>
            Converts <see cref="T:CADImport.DRect">DRect</see> to <see cref="T:System.Drawing.Rectangle">Rectangle</see>
            </summary>
            <param name="r"><see cref="T:CADImport.DRect">DRect</see> value</param>
            <returns><see cref="T:System.Drawing.Rectangle">Rectangle</see> value</returns>
        </member>
        <member name="M:CADImport.DRect.op_Implicit(CADImport.DRect)~System.Drawing.RectangleF">
            <summary>
            Converts <see cref="T:CADImport.DRect">DRect</see> to RectangleF
            </summary>
            <param name="r"><see cref="T:CADImport.DRect">DRect</see> value</param>
            <returns>RectangleF value</returns>
        </member>
        <member name="M:CADImport.DRect.op_Implicit(System.Drawing.Rectangle)~CADImport.DRect">
            <summary>
            Converts <see cref="T:System.Drawing.Rectangle">Rectangle</see> to <see cref="T:CADImport.DRect">DRect</see>
            </summary>
            <param name="r"><see cref="T:System.Drawing.Rectangle">Rectangle</see> value</param>
            <returns><see cref="T:CADImport.DRect">DRect</see> value</returns>
        </member>
        <member name="M:CADImport.DRect.Contains(CADImport.DRect)">
            <summary>
            Determines if the rectangular region is entirely contained within this <see cref="T:CADImport.DRect"/> structure.
            </summary>
            <param name="rect">
            The <see cref="T:CADImport.DRect"/> region to check.
            </param>
            <returns>
            <para>This method returns <b>true</b> if the rectangular region  represented by <paramref name="rect"/> is entirely contained within this <see cref="T:CADImport.DRect"/> structure; otherwise <b>false</b>.</para>
            </returns>
        </member>
        <member name="M:CADImport.DRect.Contains(CADImport.DPoint)">
            <summary>
            Checks if <see cref="T:CADImport.DPoint"/> object belongs to <see cref="T:CADImport.DRect"/> object.
            </summary>
            <param name="pt">Checking point</param>
            <returns>Returns <b>true</b> if the point belongs to rectangle; otherwise <b>false</b>.</returns>
        </member>
        <member name="P:CADImport.DRect.Empty">
            <summary>
            Represents a <see cref="T:CADImport.DRect">DRect</see> that is a null reference (Nothing in Visual Basic).
            </summary>
        </member>
        <member name="P:CADImport.DRect.BadRect">
            <summary>
            Indicates if this <see cref="T:CADImport.DRect">DRect</see> object is a bad rect.
            </summary>
        </member>
        <member name="P:CADImport.DRect.Width">
            <summary>
            Gets or sets a width of the <see cref="T:CADImport.DRect">DRect</see> object. 
            </summary>
        </member>
        <member name="P:CADImport.DRect.Height">
            <summary>
            Gets or sets a height of the <see cref="T:CADImport.DRect">DRect</see> object. 
            </summary>
        </member>
        <member name="P:CADImport.DRect.Center">
            <summary>
            Gets a center point of this <see cref="T:CADImport.DRect">DRect</see>.
            </summary>
        </member>
        <member name="P:CADImport.DRect.TopLeft">
            <summary>
            Gets or sets the first specified point of the <see cref="T:CADImport.DRect">DRect</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object representing the first specified point 
            of the <see cref="T:CADImport.DRect">DRect</see> object.</value>
        </member>
        <member name="P:CADImport.DRect.BottomRight">
            <summary>
            Gets or sets the second specified point of the <see cref="T:CADImport.DRect">DRect</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object representing the second specified point 
            of the <see cref="T:CADImport.DRect">DRect</see> object.</value>
        </member>
        <member name="T:CADImport.FPoint">
            <summary>
            Represents a point in the 3D coordinate system. 
            </summary>
        </member>
        <member name="F:CADImport.FPoint.X">
            <summary>
            Represents the x-coordinate of this <see cref="T:CADImport.FPoint">FPoint</see>.
            </summary>
        </member>
        <member name="F:CADImport.FPoint.Y">
            <summary>
            Represents the y-coordinate of this <see cref="T:CADImport.FPoint">FPoint</see>.
            </summary>
        </member>
        <member name="F:CADImport.FPoint.Z">
            <summary>
            Represents the z-coordinate of this <see cref="T:CADImport.FPoint">FPoint</see>.
            </summary>
        </member>
        <member name="M:CADImport.FPoint.Distance(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Returns distance between two points.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns><b>double</b> dinstance.</returns>
        </member>
        <member name="M:CADImport.FPoint.GetAngle(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Returns an angle between specified point and the X-axis of the Cartesian coordinate system that specified by another point.
            </summary>
            <param name="p"> Zero-point of Cartesian coordinate system.</param>
            <param name="a"> Specified point </param>
            <remarks>The Z-coordinates of the both <see cref="T:CADImport.FPoint">FPoint</see>s will be ignored</remarks>
        </member>
        <member name="M:CADImport.FPoint.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new <see cref="T:CADImport.FPoint">FPoint</see> with the specified coordinates. 
            </summary>
            <param name="X">The X-coordinate of the <see cref="T:CADImport.FPoint">FPoint</see> object.</param>
            <param name="Y">The Y-coordinate of the <see cref="T:CADImport.FPoint">FPoint</see> object.</param>
            <param name="Z">The Z-coordinate of the <see cref="T:CADImport.FPoint">FPoint</see> object.</param>
        </member>
        <member name="M:CADImport.FPoint.Equals(System.Object)">
            <summary>
            Determines if this <see cref="T:CADImport.FPoint">FPoint</see> object and a specified object are equal.
            </summary>
            <param name="obj">An object to compare with this <see cref="T:CADImport.FPoint">FPoint</see>.</param>
            <value><b>true</b> if the specified object is equal to this <see cref="T:CADImport.FPoint">FPoint</see>; otherwise <b>false</b>.</value>
        </member>
        <member name="M:CADImport.FPoint.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:CADImport.FPoint.op_Equality(CADImport.FPoint,CADImport.FPoint)">
            <summary>
            Checks if two <see cref="T:CADImport.FPoint">FPoint</see>s are equal.
            </summary>
            <param name="p1">A <see cref="T:CADImport.FPoint">FPoint</see> object.</param>
            <param name="p2">A <see cref="T:CADImport.FPoint">FPoint</see> object.</param>
            <value><b>true</b> if two <see cref="T:CADImport.FPoint">FPoint</see>s are equal; otherwise <b>false</b>.</value>
            <remarks>Two <see cref="T:CADImport.FPoint">FPoint</see>s are equal if all coordinates of the first point are
            equal to the corresponding coordinates of the second.</remarks>
        </member>
        <member name="M:CADImport.FPoint.op_Inequality(CADImport.FPoint,CADImport.FPoint)">
            <summary>
            Checks if two <see cref="T:CADImport.FPoint">FPoint</see> objects are not equal.
            </summary>
            <param name="p1">A <see cref="T:CADImport.FPoint">FPoint</see> object.</param>
            <param name="p2">A <see cref="T:CADImport.FPoint">FPoint</see> object.</param>
            <value><b>true</b> if two <see cref="T:CADImport.FPoint">FPoint</see>s are not equal; otherwise <b>false</b>.</value>
            <remarks>Two <see cref="T:CADImport.FPoint">FPoint</see>s are not equal if at least one coordinate of the first point is 
            not equal to the corresponding coordinate of the second.</remarks>
        </member>
        <member name="M:CADImport.FPoint.Swap(CADImport.FPoint@)">
            <summary>
            Swaps two <see cref="T:CADImport.FPoint">FPoint</see>s. 
            </summary>
            <param name="B">A <see cref="T:CADImport.FPoint">FPoint</see> to 
            swap with this <see cref="T:CADImport.FPoint">FPoint</see>.</param>
        </member>
        <member name="M:CADImport.FPoint.op_Implicit(CADImport.FPoint)~CADImport.DPoint">
            <summary>
            Converts <see cref="T:CADImport.FPoint">FPoint</see> into <see cref="T:CADImport.DPoint">DPoint</see>. 
            </summary>
            <param name="value">A <see cref="T:CADImport.FPoint">FPoint</see> object to convert.</param>
        </member>
        <member name="P:CADImport.FPoint.Empty">
            <summary>
            Represents a <see cref="T:CADImport.FPoint">FPoint</see> that is a null reference (Nothing in Visual Basic).
            </summary>
        </member>
        <member name="P:CADImport.FPoint.Item(System.Int32)">
            <summary>
            Gets or sets a single coordinate of <see cref="T:CADImport.FPoint">FPoint</see> structure.
            </summary>
            <param name="id">An index that specifies coordinate of <see cref="T:CADImport.FPoint">FPoint</see>.</param>
            <value>X-coordinate if the input parameter equals 0. Y-coordinate if the input parameter equals 1.
            Z-coordinate if the input parameter equals 2.</value>
        </member>
        <member name="T:CADImport.DPoint">
            <summary>
            Represents a point in the 3D coordinate system. 
            </summary>
        </member>
        <member name="F:CADImport.DPoint.X">
            <summary>
            Represents the x-coordinate of this <see cref="T:CADImport.DPoint">DPoint</see>.
            </summary>
        </member>
        <member name="F:CADImport.DPoint.Y">
            <summary>
            Represents the y-coordinate of this <see cref="T:CADImport.DPoint">DPoint</see>.
            </summary>
        </member>
        <member name="F:CADImport.DPoint.Z">
            <summary>
            Represents the z-coordinate of this <see cref="T:CADImport.DPoint">DPoint</see>.
            </summary>
        </member>
        <member name="M:CADImport.DPoint.Distance(CADImport.DPoint,CADImport.DPoint)">
            <summary>
            Returns distance between two points.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns><b>double</b> dinstance.</returns>
        </member>
        <member name="M:CADImport.DPoint.Extruded(CADImport.DPoint)">
            <summary>
            Checks whether the point is extruded
            </summary>
            <param name="P">Checking point</param>
            <returns>Returns <b>true</b> if point is extruded</returns>
        </member>
        <member name="M:CADImport.DPoint.Middle(CADImport.DPoint,CADImport.DPoint)">
            <summary>
            Returns a middle point between two points.
            </summary>
            <param name="p1">First point</param>
            <param name="p2">Second point</param>
            <returns></returns>
        </member>
        <member name="M:CADImport.DPoint.Minor(CADImport.DPoint,CADImport.DPoint,System.Byte)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:CADImport.DPoint.Rotate(System.Double)">
            <summary>
            Rotates the current point in 2D coordinates system (Z coordinate does not changes)
            </summary>        
            <param name="angle">Rotation angle</param>
            <returns>Returns a new point recieved after rotation</returns>
        </member>
        <member name="M:CADImport.DPoint.Rotate(CADImport.DPoint,System.Double)">
            <summary>
            Executes 2D rotation of a point (Z coordinate does not changes)
            </summary>
            <param name="p">A point</param>
            <param name="angle">Rotation angle</param>
            <returns>Returns a new point recieved after rotation</returns>
        </member>
        <member name="M:CADImport.DPoint.Rotate(CADImport.DPoint,CADImport.DPoint,System.Boolean,System.Double)">
            <summary>
            Returns a new point recieved by addition or subtraction of the current point and the specified point.
            </summary>
            <param name="p">An offset point</param>
            <param name="abs">if <b>true</b> then <b>offset</b> would be added to <b>pt</b> else <b>offset</b> would be removed from <b>pt</b></param>
        </member>
        <member name="M:CADImport.DPoint.Offset(CADImport.DPoint,System.Boolean)">
            <summary>
            Returns a new point recieved by addition or subtraction of two specified points.
            </summary>
            <param name="offset">An offset point</param>
            <param name="add">if <b>true</b> then <b>offset</b> would be added to <b>pt</b> else <b>offset</b> would be removed from <b>pt</b></param>
        </member>
        <member name="M:CADImport.DPoint.Offset(CADImport.DPoint,CADImport.DPoint,System.Boolean)">
            <summary>
            Returns a new point recieved by addition or subtraction of two specified points. 
            </summary>
            <param name="pt">The first point</param>
            <param name="offset">An offset point</param>
            <param name="add">if <b>true</b> then <b>offset</b> would be added to <b>pt</b> else <b>offset</b> would be removed from <b>pt</b></param>
        </member>
        <member name="M:CADImport.DPoint.GetAngle(CADImport.DPoint,CADImport.DPoint)">
            <summary>
            Returns an angle between specified point and the X-axis of the Cartesian coordinate system that specified by another point.
            </summary>
            <param name="p"> Zero-point of Cartesian coordinate system.</param>
            <param name="a"> Specified point </param>
        </member>
        <member name="M:CADImport.DPoint.#ctor(CADImport.DPoint)">
            <summary>
            Initializes a new <see cref="T:CADImport.DPoint">DPoint</see> by copying an existing one.
            </summary>
            <param name="p"> a point that would be cloned. </param>
        </member>
        <member name="M:CADImport.DPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new <see cref="T:CADImport.DPoint">DPoint</see> with the specified coordinates. 
            </summary>
            <param name="x">The X-coordinate of the <see cref="T:CADImport.DPoint">DPoint</see> object.</param>
            <param name="y">The Y-coordinate of the <see cref="T:CADImport.DPoint">DPoint</see> object.</param>
            <param name="z">The Z-coordinate of the <see cref="T:CADImport.DPoint">DPoint</see> object.</param>
        </member>
        <member name="M:CADImport.DPoint.Equals(System.Object)">
            <summary>
            Determines if this <see cref="T:CADImport.DPoint">DPoint</see> object and a specified object are equal.
            </summary>
            <param name="obj">An object to compare with this <see cref="T:CADImport.DPoint">DPoint</see>.</param>
            <value><b>true</b> if the specified object is equal to this <see cref="T:CADImport.DPoint">DPoint</see>; otherwise <b>false</b>.</value>
        </member>
        <member name="M:CADImport.DPoint.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:CADImport.DPoint.op_Multiply(CADImport.DPoint,System.Double)">
            <summary>
            Multiplies all three coordinates of the <see cref="T:CADImport.DPoint">DPoint</see> by a <b>double</b> value.
            </summary>
            <param name="p1">A <see cref="T:CADImport.DPoint">DPoint</see> object.</param>
            <param name="val">A <b>double</b> multiplier.</param>
            <returns>A <see cref="T:CADImport.DPoint">DPoint</see> object whose coordinates are received by multiplication 
            of initial coordinates on the <b>double</b> multiplier.</returns>
        </member>
        <member name="M:CADImport.DPoint.op_Multiply(System.Double,CADImport.DPoint)">
            <summary>
            Multiplies all three coordinates of the <see cref="T:CADImport.DPoint">DPoint</see> by a <b>double</b> value.
            </summary>
            <param name="p1">A <see cref="T:CADImport.DPoint">DPoint</see> object.</param>
            <param name="val">A <b>double</b> multiplier.</param>
            <returns>A <see cref="T:CADImport.DPoint">DPoint</see> object whose coordinates are received by multiplication 
            of initial coordinates on the <b>double</b> multiplier.</returns>
        </member>
        <member name="M:CADImport.DPoint.op_Equality(CADImport.DPoint,CADImport.DPoint)">
            <summary>
            Checks if two <see cref="T:CADImport.DPoint">DPoint</see>s are equal.
            </summary>
            <param name="p1">A <see cref="T:CADImport.DPoint">DPoint</see> object.</param>
            <param name="p2">A <see cref="T:CADImport.DPoint">DPoint</see> object.</param>
            <value><b>true</b> if two <see cref="T:CADImport.DPoint">DPoint</see>s are equal; otherwise, <b>false</b>.</value>
            <remarks>Two <see cref="T:CADImport.DPoint">DPoint</see>s are equal if all coordinates of the first point are
            equal to the corresponding coordinates of the second.</remarks>
        </member>
        <member name="M:CADImport.DPoint.op_Addition(CADImport.DPoint,CADImport.DPoint)">
            <summary>
            Summarizes two <see cref="T:CADImport.DPoint">DPoint</see> objects
            </summary>
            <param name="p1">The first point</param>
            <param name="p2">The second point</param>
            <returns>A new <see cref="T:CADImport.DPoint">DPoint</see> object</returns>
        </member>
        <member name="M:CADImport.DPoint.op_Subtraction(CADImport.DPoint,CADImport.DPoint)">
            <summary>
            Subtracts two <see cref="T:CADImport.DPoint">DPoint</see> objects
            </summary>
            <param name="p1">The first point</param>
            <param name="p2">The second point</param>
            <returns>New <see cref="T:CADImport.DPoint">DPoint</see> object coordinates</returns>
        </member>
        <member name="M:CADImport.DPoint.op_Inequality(CADImport.DPoint,CADImport.DPoint)">
            <summary>
            Checks if two <see cref="T:CADImport.DPoint">DPoint</see> objects are not equal.
            </summary>
            <param name="p1">A <see cref="T:CADImport.DPoint">DPoint</see> object.</param>
            <param name="p2">A <see cref="T:CADImport.DPoint">DPoint</see> object.</param>
            <value><b>true</b> if two <see cref="T:CADImport.DPoint">DPoint</see>s are not equal; otherwise, <b>false</b>.</value>
            <remarks>Two <see cref="T:CADImport.DPoint">DPoint</see>s are not equal if at least one coordinate of the first point is 
            not equal to the corresponding coordinate of the second.</remarks>
        </member>
        <member name="M:CADImport.DPoint.Swap(CADImport.DPoint@)">
            <summary>
            Swaps two <see cref="T:CADImport.DPoint">DPoint</see>s. 
            </summary>
            <param name="B">A <see cref="T:CADImport.DPoint">DPoint</see> to 
            swap with this <see cref="T:CADImport.DPoint">DPoint</see>.</param>
        </member>
        <member name="M:CADImport.DPoint.Normalize">
            <summary>
            Scales the Vector3d to unit length.
            </summary>
        </member>
        <member name="M:CADImport.DPoint.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Scales the current Vector3d by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
        </member>
        <member name="M:CADImport.DPoint.Scale(CADImport.DPoint)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:CADImport.DPoint.Cross(CADImport.DPoint,CADImport.DPoint)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
        </member>
        <member name="M:CADImport.DPoint.Cross(CADImport.DPoint@,CADImport.DPoint@,CADImport.DPoint@)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
            <param name="result">The cross product of the two inputs</param>
        </member>
        <member name="M:CADImport.DPoint.Reverse">
            <summary>
            Returns a new <see cref="T:CADImport.DPoint">DPoint</see> that is reversive to this one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADImport.DPoint.XMat(CADImport.CADMatrix)">
            <summary>
            Returns a new <see cref="T:CADImport.DPoint">DPoint</see> that is a result of multiplying a this one and a
            <see cref="T:CADImport.CADMatrix">CADMatrix</see>.
            </summary>
            <param name="m"><see cref="T:CADImport.CADMatrix">CADMatrix</see> for multiplying</param>
        </member>
        <member name="M:CADImport.DPoint.XMat(CADImport.DPoint,CADImport.CADMatrix)">
            <summary>
            Returns a new <see cref="T:CADImport.DPoint">DPoint</see> that is a result of multiplying a 
            <see cref="T:CADImport.DPoint">DPoint</see> and a <see cref="T:CADImport.CADMatrix">CADMatrix</see>.
            </summary>
            <param name="p"><see cref="T:CADImport.DPoint">DPoint</see> for multiplying</param>
            <param name="m"><see cref="T:CADImport.CADMatrix">CADMatrix</see> for multiplying</param>
            <returns></returns>
        </member>
        <member name="M:CADImport.DPoint.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> with information about the serialized object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> that holds the serialized object data.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext">StreamingContext</see> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:CADImport.DPoint.Empty">
            <summary>
            Represents a <see cref="T:CADImport.DPoint">DPoint</see> that is a null reference (Nothing in Visual Basic).
            </summary>
        </member>
        <member name="P:CADImport.DPoint.One">
            <summary>
            Represents a point with all three single coordinates.
            <remarks>Return point (1.0 , 1.0 , 1.0)</remarks>
            </summary>
        </member>
        <member name="P:CADImport.DPoint.Item(System.Int32)">
            <summary>
            Gets or sets single coordinate of <see cref="T:CADImport.DPoint">DPoint</see> structure.
            </summary>
            <param name="id">An index that specifies coordinate of <see cref="T:CADImport.DPoint">DPoint</see>.</param>
            <value>X-coordinate if an index equals 0. Y-coordinate if the index equals 1.
            Z-coordinate if the index equals 2.</value>
        </member>
        <member name="P:CADImport.DPoint.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
        </member>
        <member name="T:CADImport.CADMatrix">
            <summary>
            Encapsulates a 4-by-3 affine matrix that represents a geometric transform. 
            </summary>
        </member>
        <member name="F:CADImport.CADMatrix.Identity">
            <summary>
            Represent a default matrix.
            </summary>
        </member>
        <member name="M:CADImport.CADMatrix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADMatrix">CADMatrix</see> class.
            </summary>
        </member>
        <member name="F:CADImport.CADMatrix.data">
            <summary>
            A 4-by-3 array containing the matrix data.
            </summary>
        </member>
        <member name="M:CADImport.CADMatrix.IsZero">
            <summary>
            Returns a value indicating whether this is a zero matrix. 
            </summary>
            <returns><b>true</b> if all <see cref="T:CADImport.CADMatrix">data</see> values are equal to zero; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADMatrix.Clone">
            <summary>
            Creates a new matrix that is a copy of the current instance. 
            </summary>
        </member>
        <member name="M:CADImport.CADMatrix.IdentityMat">
            <summary>
            Creates an initial matrix.
            </summary>
        </member>
        <member name="M:CADImport.CADMatrix.MatXMat(CADImport.CADMatrix,CADImport.CADMatrix)">
            <summary>
            Multiplies two matrixes.
            </summary>
            <param name="A">A <see cref="T:CADImport.CADMatrix">CADMatrix</see> object
             representing a first matrix to be multiplied.</param>
             <param name="B">A <see cref="T:CADImport.CADMatrix">CADMatrix</see> object
             representing a second matrix to be multiplied.</param>
             <returns>A <see cref="T:CADImport.CADMatrix">CADMatrix</see> object.</returns>
             <remarks>When multiplying two matrixes an order of multiplying affects the result.</remarks>
        </member>
        <member name="M:CADImport.CADMatrix.PtXMat(CADImport.DPoint)">
            <summary>
            Multiplies a vector and the matrix. 
            </summary>
            <param name="P">A <see cref="T:CADImport.DPoint">DPoint</see> object representing a value to be multiplied.</param>
            <returns>A <see cref="T:CADImport.DPoint">DPoint</see> object representing a result of multiplication.</returns>
        </member>
        <member name="M:CADImport.CADMatrix.StdMat(CADImport.DPoint,CADImport.DPoint)">
            <summary>
            Creates a matrix based on the specified scale and offset. 
            </summary>
            <param name="S">A <see cref="T:CADImport.DPoint">DPoint</see> object representing the specified scale.</param>
            <param name="P">A <see cref="T:CADImport.DPoint">DPoint</see> object representing the specified offset.</param>
            <returns>A <see cref="T:CADImport.CADMatrix">CADMatrix</see> object.</returns>		
        </member>
        <member name="M:CADImport.CADMatrix.Scale(CADImport.DPoint)">
            <summary>
            Returns a scaled <see cref="T:CADImport.CADMatrix">CADMatrix</see>.
            </summary>
            <param name="scale">A scale value</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:CADImport.CADMatrix.MatOffset(CADImport.CADMatrix,CADImport.DPoint)">
            <summary>
            Writes an offset to the last row of the specified matrix.
            </summary>
            <param name="M">A <see cref="T:CADImport.CADMatrix">CADMatrix</see> object where to write an offset.</param>
            <param name="P">A <see cref="T:CADImport.DPoint">DPoint</see> object representing a matrix offset.</param>
        </member>
        <member name="M:CADImport.CADMatrix.Part(System.Int32,CADImport.DPoint,CADImport.CADMatrix)">
            <summary>
            for internal use.
            </summary>
        </member>
        <member name="M:CADImport.CADMatrix.GetArrValues">
            <summary>
            Gets an array of components for this <see cref="T:CADImport.CADMatrix">CADMatrix</see> instance. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADImport.CADMatrix.Transpose">
            <summary>
            Calculates the transpose of this <see cref="T:CADImport.CADMatrix">CADMatrix</see> instance.
            </summary>
        </member>
        <member name="M:CADImport.CADMatrix.Translate(CADImport.DPoint)">
            <summary>
            Applies an offset to the <see cref="T:CADImport.CADMatrix">CADMatrix</see>.
            </summary>
            <param name="offset">An offset value.</param>
            <returns>The transformed matrix.</returns>
        </member>
        <member name="P:CADImport.CADMatrix.Data">
            <summary>
            Gets or sets matrix data.
            </summary>
        </member>
        <member name="P:CADImport.CADMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets the component at the given row and column in the matrix.
            </summary>
            <param name="i">A row number</param>
            <param name="j">A column number</param>
        </member>
        <member name="T:CADImport.CAD2DPoint">
            <summary>
            Represents a point in the 2D Cartesian coordinate system. 
            </summary>
        </member>
        <member name="F:CADImport.CAD2DPoint.X">
            <summary>
            Represents the X-coordinate of this <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see>.
            </summary>
        </member>
        <member name="F:CADImport.CAD2DPoint.Y">
            <summary>
            Represents the Y-coordinate of this <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see>.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DPoint.GetAngle(CADImport.CAD2DPoint,CADImport.CAD2DPoint)">
            <summary>
            Calculates the angle between two points.
            </summary>
            <param name="p"> First point <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see></param>
            <param name="a"> Second point <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see></param>
            <returns><b>float</b> angle beetween two given points</returns>
        </member>
        <member name="M:CADImport.CAD2DPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> with the specified coordinates. 
            </summary>
            <param name="X">X-coordinate of the <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> object.</param>
            <param name="Y">Y-coordinate of the <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> object.</param>
        </member>
        <member name="M:CADImport.CAD2DPoint.#ctor(CADImport.DPoint)">
            <summary>
            Initializes a new <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> using the the specified <see cref="T:CADImport.DPoint">DPoint</see>.
            </summary>
            <param name="p">A 3D point that will provide X and Y coordinates for created 2D point.</param>
        </member>
        <member name="M:CADImport.CAD2DPoint.Equals(System.Object)">
            <summary>
            Determines whether this <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> instance and a specified object are equal.
            </summary>
            <param name="obj">An object to compare with this <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see>.</param>
            <value><b>true</b> if the specified object is equal to this <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see>; otherwise, <b>false</b>.</value>
        </member>
        <member name="M:CADImport.CAD2DPoint.IsEqual(CADImport.CAD2DPoint)">
            <summary>
            Determines whether this <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> instance is equal to a specified.
            </summary>
            <param name="point">A 2D point to check the equality.</param>
            <returns><b>true</b> if the points are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CAD2DPoint.GetHashCode">
            <summary>
            Overrides the <see cref="M:System.Object.GetHashCode">GetHashCode</see> method. 
            </summary>
        </member>
        <member name="M:CADImport.CAD2DPoint.op_Multiply(CADImport.CAD2DPoint,System.Double)">
            <summary>
            Multiplies both coordinates of the <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> with a <b>double</b> value.
            </summary>
            <param name="p1">A <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> that specifies initial coordinates.</param>
            <param name="aVal">A <b>double</b> multiplier.</param>
            <returns>A resulting <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> object</returns>
        </member>
        <member name="M:CADImport.CAD2DPoint.op_Multiply(CADImport.CAD2DPoint,CADImport.CADMatrix)">
            <summary>
            Multiplies the <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> with a <see cref="T:CADImport.CADMatrix">matrix</see>.
            </summary>
            <param name="p">An initial <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see></param>
            <param name="matrix">A <see cref="T:CADImport.CADMatrix">matrix</see></param>
            <returns>A resulting <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> object</returns>
        </member>
        <member name="M:CADImport.CAD2DPoint.op_Addition(CADImport.CAD2DPoint,CADImport.CAD2DPoint)">
            <summary>
            Summarizes two <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> objects.
            </summary>
            <param name="p1">The first point</param>
            <param name="p2">The second point</param>
            <returns>A resulting <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> object</returns>
        </member>
        <member name="M:CADImport.CAD2DPoint.op_Equality(CADImport.CAD2DPoint,CADImport.CAD2DPoint)">
            <summary>
            Checks the equality of two <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> objects.
            </summary>
            <param name="p1">A <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> object.</param>
            <param name="p2">A <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> object.</param>
            <value><b>true</b> if two <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see>s are equal; otherwise, <b>false</b>.</value>
            <remarks>Two <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see>s are equal if all two their coordinates are equal.</remarks>
        </member>
        <member name="M:CADImport.CAD2DPoint.op_Inequality(CADImport.CAD2DPoint,CADImport.CAD2DPoint)">
            <summary>
            Checks if two <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> objects are unequal.
            </summary>
            <param name="p1">A <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> object.</param>
            <param name="p2">A <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> object.</param>
            <value><b>true</b> if two <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see>s are not equal; otherwise, <b>false</b>.</value>
            <remarks>Two <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see>s are not equal if at least one of their two coordinates is 
            not equal to the corresponding coordinate.</remarks>
        </member>
        <member name="M:CADImport.CAD2DPoint.Swap(CADImport.CAD2DPoint,CADImport.CAD2DPoint)">
            <summary>
            Swaps two <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see>s. 
            </summary>
            <param name="A">A first <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> to 
            swap</param>
            <param name="B">A second <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> to 
            swap</param>
        </member>
        <member name="M:CADImport.CAD2DPoint.op_Implicit(CADImport.CAD2DPoint)~CADImport.DPoint">
            <summary>
            Converts the <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> to a <see cref="T:CADImport.CAD2DPoint">DPoint</see>.
            </summary>
            <param name="pt"><see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> object to convert</param>
            <returns><see cref="T:CADImport.CAD2DPoint">DPoint</see> object</returns>
        </member>
        <member name="M:CADImport.CAD2DPoint.op_Implicit(CADImport.DPoint)~CADImport.CAD2DPoint">
            <summary>
            Converts the <see cref="T:CADImport.CAD2DPoint">DPoint</see> to a <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see>.
            </summary>
            <param name="pt"><see cref="T:CADImport.CAD2DPoint">DPoint</see> object to convert</param>
            <returns><see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> object</returns>
        </member>
        <member name="P:CADImport.CAD2DPoint.Empty">
            <summary>
            Represents a <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> with zero coordinates.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DPoint.IsZeroPoint">
            <summary>
            Gets a value indicating whether the specified <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> has zero coordinates.
            </summary>
            <value><b>true</b> if this <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> has zero coordinates; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CAD2DPoint.Item(System.Int32)">
            <summary>
            An indexer for the <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> structure.
            </summary>
            <param name="id">An index of one of two <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see>'s coordinates.</param>
            <value>X-coordinate if the input parameter equals 0. Y-coordinate if the input parameter equals 1.</value>
        </member>
        <member name="T:CADImport.Rect2D">
            <summary>
            Represent a rectangle.
            </summary>
        </member>
        <member name="F:CADImport.Rect2D.left">
            <summary>
            The left border of the <see cref="T:CADImport.Rect2D">Rect2D</see> object
            </summary>
        </member>
        <member name="F:CADImport.Rect2D.top">
            <summary>
            The top border of the <see cref="T:CADImport.Rect2D">Rect2D</see> object
            </summary>
        </member>
        <member name="F:CADImport.Rect2D.right">
            <summary>
            The right border of the <see cref="T:CADImport.Rect2D">Rect2D</see> object
            </summary>
        </member>
        <member name="F:CADImport.Rect2D.bottom">
            <summary>
            The bottom border of the <see cref="T:CADImport.Rect2D">Rect2D</see> object
            </summary>
        </member>
        <member name="M:CADImport.Rect2D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Rect2D">Rect2D</see> class.
            </summary>
            <param name="left">Left border of <see cref="T:CADImport.Rect2D">Rect2D</see> object</param>
            <param name="top">Top border of <see cref="T:CADImport.Rect2D">Rect2D</see> object</param>
            <param name="right">Right border of <see cref="T:CADImport.Rect2D">Rect2D</see> object</param>
            <param name="bottom">Bottom border of <see cref="T:CADImport.Rect2D">Rect2D</see> object</param>
        </member>
        <member name="M:CADImport.Rect2D.Expand(CADImport.CAD2DPoint)">
            <summary>
            Expands a rectangle to the specified point.
            </summary>
            <param name="p">A <see cref="T:CADImport.CAD2DPoint">point</see> object.</param>
            <remarks>If <b>p</b> is inside of rectangle then expand doesn't take effect.</remarks>
        </member>
        <member name="M:CADImport.Rect2D.Equals(System.Object)">
            <summary>
            Determines whether this <see cref="T:CADImport.Rect2D">Rect2D</see> instance and the specified object are equal.
            </summary>
            <param name="obj">An object to compare with this <see cref="T:CADImport.Rect2D">Rect2D</see> instance.</param>
            <value><b>true</b> if the specified object is equal to this <see cref="T:CADImport.Rect2D">Rect2D</see> instance; otherwise, <b>false</b>.</value>
        </member>
        <member name="M:CADImport.Rect2D.GetHashCode">
            <summary>
            Returns the hash code for the instance. 
            </summary>
        </member>
        <member name="M:CADImport.Rect2D.op_Equality(CADImport.Rect2D,CADImport.Rect2D)">
            <summary>
            Checks if two <see cref="T:CADImport.Rect2D">Rect2D</see> objects are equal.
            </summary>
            <param name="p1">A <see cref="T:CADImport.Rect2D">Rect2D</see> object.</param>
            <param name="p2">A <see cref="T:CADImport.Rect2D">Rect2D</see> object.</param>
            <value><b>true</b> if two <see cref="T:CADImport.DRect">Rect2D</see> objects are equal; otherwise, <b>false</b>.</value>
            <remarks>Two <see cref="T:CADImport.Rect2D">Rect2D</see> objects are equal if all four coordinates of the first rectangle are equal to corresponding coordinates of the second.</remarks>
        </member>
        <member name="M:CADImport.Rect2D.op_Inequality(CADImport.Rect2D,CADImport.Rect2D)">
            <summary>
            Checks if two <see cref="T:CADImport.Rect2D">Rect2D</see> objects are unequal.
            </summary>
            <param name="p1">A <see cref="T:CADImport.DRect">Rect2D</see> object.</param>
            <param name="p2">A <see cref="T:CADImport.DRect">Rect2D</see> object.</param>
            <value><b>true</b> if two <see cref="T:CADImport.DRect">Rect2D</see> objects are not equal; otherwise, <b>false</b>.</value>
            <remarks>Two <see cref="T:CADImport.Rect2D">Rect2D</see> objects are not equal if at least one coordinate of the first rectangle is 
            not equal to the corresponding coordinate of the second rectangle.</remarks>
        </member>
        <member name="M:CADImport.Rect2D.Offset(System.Double,System.Double)">
            <summary>
            Adds an offset at X- and Y-axis directions to this <see cref="T:CADImport.Rect2D">Rect2D</see> object. 
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:CADImport.Rect2D.IsBadRect(CADImport.Rect2D)">
            <summary>
            Checks whether or not the specified rectangle is valid.
            </summary>
            <param name="rect">A <see cref="T:CADImport.DRect">Rect2D</see> object.</param>
            <returns><b>true</b> if </returns>
        </member>
        <member name="M:CADImport.Rect2D.op_Implicit(System.Drawing.RectangleF)~CADImport.Rect2D">
            <summary>
            Converts RectangleF to Rect2D
            </summary>
            <param name="r">RectangleF value</param>
            <returns>Rect2D value</returns>
        </member>
        <member name="M:CADImport.Rect2D.op_Implicit(CADImport.DRect)~CADImport.Rect2D">
            <summary>
            Converts DRect to Rect2D
            </summary>
            <param name="r">DRect value</param>
            <returns>Rect2D value</returns>
        </member>
        <member name="M:CADImport.Rect2D.op_Implicit(CADImport.Rect2D)~CADImport.DRect">
            <summary>
            Converts Rect2D to DRect
            </summary>
            <param name="r">Rect2D value</param>
            <returns>DRect value</returns>
        </member>
        <member name="M:CADImport.Rect2D.op_Implicit(CADImport.Rect2D)~System.Drawing.Rectangle">
            <summary>
            Converts Rect2D to Rectangle
            </summary>
            <param name="r">Rect2D value</param>
            <returns>Rectagle value</returns>
        </member>
        <member name="M:CADImport.Rect2D.Norm">
            <summary>
            Normalizes this <see cref="T:CADImport.Rect2D">Rect2D</see> object.
            </summary>
        </member>
        <member name="M:CADImport.Rect2D.TransRectCorners(CADImport.CADMatrix)">
            <summary>
            Rotates this <see cref="T:CADImport.Rect2D">Rect2D</see> object by a specified <see cref="T:CADImport.CADMatrix">CADMatrix</see>. 
            </summary>
            <param name="matrix">A <see cref="T:CADImport.CADMatrix">CADMatrix</see> object</param>.
        </member>
        <member name="P:CADImport.Rect2D.Empty">
            <summary>
            Represents The <see cref="T:CADImport.Rect2D">Rect2D</see> that is a null reference (Nothing in Visual Basic).
            </summary>
        </member>
        <member name="P:CADImport.Rect2D.BadRect">
            <summary>
            Represents a bad(not valid) rectangle.
            </summary>
        </member>
        <member name="P:CADImport.Rect2D.Width">
            <summary>
            Gets or sets a width of the <see cref="T:CADImport.Rect2D">Rect2D</see> object. 
            </summary>
        </member>
        <member name="P:CADImport.Rect2D.Height">
            <summary>
            Gets or sets a height of the <see cref="T:CADImport.Rect2D">Rect2D</see> object. 
            </summary>
        </member>
        <member name="P:CADImport.Rect2D.TopLeft">
            <summary>
            Gets or sets the top-left corner of the <see cref="T:CADImport.Rect2D">Rect2D</see> object
            as the <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> object
            </summary>
        </member>
        <member name="P:CADImport.Rect2D.BottomRight">
            <summary>
            Gets or sets the down-right corner of the <see cref="T:CADImport.Rect2D">Rect2D</see> object
            as the <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> object
            </summary>
        </member>
        <member name="T:CADImport.CADCollection`1">
            <summary>
            Represents a collection of typed objects. 
            </summary>
            <typeparam name="T">A type of elements</typeparam>
        </member>
        <member name="M:CADImport.CADCollection`1.ToArray(System.Int32)">
            <summary>
            Creates an array from the current <see cref="T:CADImport.CADCollection`1"/> object. 
            </summary>
            <param name="count">Members count</param>
            <returns>The created array</returns>
        </member>
        <member name="M:CADImport.CADCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADCollection`1"/> Generic class.
            </summary>
        </member>
        <member name="M:CADImport.CADCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADCollection`1"/> Generic class that is
            empty and has the specified initial capacity.
            </summary>
        </member>
        <member name="M:CADImport.CADCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADCollection`1"/> Generic class that contains
            elements copied from the specified collection and has sufficient
            capacity to accommodate the number of elements copied.
            </summary>
        </member>
        <member name="M:CADImport.CADCollection`1.Clone">
            <summary>
            Creates a new object that is a copy of the current <see cref="T:CADImport.CADCollection`1"/> class instance. 
            </summary>
            <returns>A new object that is a copy of this <see cref="T:CADImport.CADCollection`1"/> class instance.</returns>
        </member>
        <member name="M:CADImport.CADCollection`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</see> with information about the serialized object.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:CADImport.CADCollection`1.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:CADImport.CADCollection`1"/> object.
            </summary>
        </member>
        <member name="P:CADImport.CADCollection`1.Last">
            <summary>
            Returns the index of a <see cref="T:CADImport.CADCollection`1"/> last member. 
            </summary>
        </member>
        <member name="T:CADImport.DynamicArray`1">
            <summary>
            Represents an array of typed elements.
            </summary>
            <typeparam name="T">A type of elements</typeparam>
        </member>
        <member name="M:CADImport.DynamicArray`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.DynamicArray`1"/> class
            </summary>
            <param name="capacity">Capacity of the created <see cref="T:CADImport.DynamicArray`1"/> object.</param>
        </member>
        <member name="M:CADImport.DynamicArray`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.DynamicArray`1"/> class
            </summary>
        </member>
        <member name="M:CADImport.DynamicArray`1.Clear">
            <summary>
            Clears the <see cref="T:CADImport.DynamicArray`1"/> object.
            </summary>
        </member>
        <member name="M:CADImport.DynamicArray`1.Add(`0)">
            <summary>
            Adds an element to this <see cref="T:CADImport.DynamicArray`1"/> object. 
            </summary>
            <param name="item">The element to add.</param>
        </member>
        <member name="M:CADImport.DynamicArray`1.AddRange(`0[])">
            <summary>
            Adds an array of elements to this <see cref="T:CADImport.DynamicArray`1"/> object. 
            </summary>
            <param name="itemArray">The array of elements to add.</param>
        </member>
        <member name="M:CADImport.DynamicArray`1.GetBuffer">
            <summary>
            Returns an array of <see cref="T:CADImport.DynamicArray`1"/> elements.
            </summary>
        </member>
        <member name="P:CADImport.DynamicArray`1.Item(System.Int32)">
            <summary>
            Gets or sets an element of this <see cref="T:CADImport.DynamicArray`1"/>.
            </summary>
            <param name="i">An index of the element.</param>
        </member>
        <member name="P:CADImport.DynamicArray`1.Length">
            <summary>
            Gets or sets the <see cref="T:CADImport.DynamicArray`1"/> elements count. 
            </summary>
        </member>
        <member name="P:CADImport.DynamicArray`1.Last">
            <summary>
            Gets or sets the last element of the <see cref="T:CADImport.DynamicArray`1"/> object. 
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipInputStream">
             <summary>
             This is an InflaterInputStream that reads the files baseInputStream an zip archive
             one after another.  It has a special method to get the zip entry of
             the next file.  The zip entry contains information about the file name
             size, compressed size, Crc, etc.
             It includes support for Stored and Deflated entries.
             <br/>
             <br/>Author of the original java version : Jochen Hoenicke
             </summary>
             
             <example> This sample shows how to read a zip file
             <code lang="C#">
             using System;
             using System.Text;
             using System.IO;
             
             using ICSharpCode.SharpZipLib.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		using ( ZipInputStream s = new ZipInputStream(File.OpenRead(args[0]))) {
            
             			ZipEntry theEntry;
             			const int size = 2048;
             			byte[] data = new byte[2048];
             			
             			while ((theEntry = s.GetNextEntry()) != null) {
                             if ( entry.IsFile ) {
             				    Console.Write("Show contents (y/n) ?");
             				    if (Console.ReadLine() == "y") {
             				    	while (true) {
             				    		size = s.Read(data, 0, data.Length);
             				    		if (size > 0) {
             				    			Console.Write(new ASCIIEncoding().GetString(data, 0, size));
             				    		} else {
             				    			break;
             				    		}
             				    	}
             				    }
             				}
             			}
             		}
             	}
             }
             </code>
             </example>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream">
             <summary>
             This filter stream is used to decompress data compressed using the "deflate"
             format. The "deflate" format is described in RFC 1951.
            
             This stream may form the basis for other decompression filters, such
             as the <see cref="!:ICSharpCode.SharpZipLib.GZip.GZipInputStream">GZipInputStream</see>.
            
             Author of the original java version : John Leuner.
             </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name="count">
            Number of bytes to skip
            </param>
            <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count">The number of bytes</paramref> to skip is less than or equal to zero.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Stream ends early
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="offset">The relative offset to seek to.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> defining where to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="value">The new length value for the stream.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <param name="buffer">Thew buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <param name="value">The byte to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed data into the provided buffer byte array
            </summary>
            <param name="buffer">
            The array to read and decompress data into
            </param>
            <param name="offset">
            The offset indicating where the data should be placed
            </param>
            <param name="count">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read.  Zero signals the end of stream</returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Inflater needs a dictionary
            </exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inputBuffer">
            <summary>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">Input buffer</see> for this stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.csize">
            <summary>
            The compressed size
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.isStreamOwner">
            <summary>
            Flag indicating wether this instance is designated the stream owner.
            When closing if this flag is true the underlying stream is closed.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipInputStream.internalReader">
            <summary>
            The current reader this instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
            <param name="baseInputStream">The underlying <see cref="T:System.IO.Stream"/> providing data.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
            <param name="baseInputStream">The underlying <see cref="T:System.IO.Stream"/> providing data.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.GetNextEntry">
            <summary>
            Advances to the next entry in the archive
            </summary>
            <returns>
            The next <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">entry</see> in the archive or null if there are no more entries.
            </returns>
            <remarks>
            If the previous entry is still open <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CloseEntry">CloseEntry</see> is called.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Input stream is closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Password is not set, password is invalid, compression method is invalid,
            version required to extract is not supported
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadDataDescriptor">
            <summary>
            Read data descriptor at the end of compressed data. 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CompleteCloseEntry(System.Boolean)">
            <summary>
            Complete cleanup as the final part of closing.
            </summary>
            <param name="testCrc">True if the crc value should be tested</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CloseEntry">
            <summary>
            Closes the current zip entry and moves to the next one.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The stream is closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The Zip stream ends early
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadByte">
            <summary>
            Reads a byte from the current zip entry.
            </summary>
            <returns>
            The byte or -1 if end of stream is reached.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadingNotAvailable(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle attempts to read by throwing an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="destination">The destination array to store data in.</param>
            <param name="offset">The offset at which data read should be stored.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadingNotSupported(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle attempts to read from this entry by throwing an exception
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.InitialRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Perform the initial read on an entry which may include 
            reading encryption headers and setting up inflation.
            </summary>
            <param name="destination">The destination to fill with data read.</param>
            <param name="offset">The offset to start reading at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from the stream.
            </summary>
            <param name="buffer">The destination for the bytes.</param>
            <param name="offset">The index to start storing data.</param>
            <param name="count">The number of bytes to attempt to read.</param>
            <returns>Returns the number of bytes read.</returns>
            <remarks>Zero bytes read means end of stream.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.BodyRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current zip entry.
            </summary>
            <returns>
            The number of bytes read (this may be less than the length requested, even before the end of stream), or 0 on end of stream.
            </returns>
            <exception name="IOException">
            An i/o error occured.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The deflated stream is corrupted.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is not open.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Close">
            <summary>
            Closes the zip input stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Password">
            <summary>
            Optional password used for encryption when non-null
            </summary>
            <value>A password for all encrypted <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">entries </see> in this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipInputStream"/></value>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">
            <summary>
            Gets a value indicating if there is a current entry and it can be decompressed
            </summary>
            <remarks>
            The entry can only be decompressed if the library supports the zip features required to extract it.
            See the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">ZipEntry Version</see> property for more details.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Available">
            <summary>
            Returns 1 if there is an entry available
            Otherwise returns 0.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Length">
            <summary>
            Returns the current size that can be read from the current entry if available
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">Thrown if the entry size is not known.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if no entry is currently available.</exception>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadDataHandler">
            <summary>
            Delegate for reading bytes from a stream. 
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>SetInput()</code>, then Inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>IsNeedingInput() returns true because the input buffer is empty.
             You have to provide more input with <code>SetInput()</code>.
             NOTE: IsNeedingInput() also returns true when, the stream is finished.
             </li>
             <li>IsNeedingDictionary() returns true, you have to provide a preset
                dictionary with <code>SetDictionary()</code>.</li>
             <li>IsFinished returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="index">
            The index into buffer where the dictionary starts.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            the input.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="index">
            The index into buffer where the input starts.
            </param>
            <param name="count">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index and/or count are wrong.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether IsNeedingDictionary(),
            IsNeedingInput() or IsFinished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <returns>
            The number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buffer has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <param name="offset">
            the offset in buffer where storing starts.
            </param>
            <param name="count">
            the maximum number of bytes to output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if count is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the index and / or count are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by Inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="offset">
            the start of the data.
            </param>
            <param name="count">
            the number of data bytes of input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was Finish()ed or if previous input is still pending.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="level">
            the new compression level.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetStrategy(ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            SetLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            IsNeedingInput() or IsFinished returns true or length is zero.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If Finish() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset or length don't match the array length.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dictionary">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if SetInput () or Deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dictionary">
            The dictionary data
            </param>
            <param name="index">
            The index where dictionary information commences.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If SetInput () or Deflate() were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.ZipAESStream">
            <summary>
            Encrypts and decrypts AES ZIP
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Encryption.ZipAESTransform,System.Security.Cryptography.CryptoStreamMode)">
            <summary>
            Constructor
            </summary>
            <param name="stream">The stream on which to perform the cryptographic transformation.</param>
            <param name="transform">Instance of ZipAESTransform</param>
            <param name="mode">Read or Write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current CryptoStream into buffer,
            and advances the position within the stream by the number of bytes read.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream. </param>
            <param name="offset">The byte offset in buffer at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
        </member>
        <member name="T:CADImport.CADImportForms.OptionsForm">
            <summary>
            Represents a form for the options dialog in Viewer demo.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.OptionsForm.OnChangeBackgroundColor(System.Boolean)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportForms.OptionsForm.ChangeBackgroundColor">ChangeBackgroundColor</see> event
            </summary>
            <param name="val">If <b>true</b> then background color of the <see cref="T:CADImport.CADImage">CADImage</see> is black,
            else the background color is white</param>
        </member>
        <member name="M:CADImport.CADImportForms.OptionsForm.OnChangeDrawingColors(System.Boolean)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportForms.OptionsForm.ChangeDrawingColors">ChangeDrawingColors</see> event
            </summary>
            <param name="val">If <b>false</b> then the drawing is drawn in black-and-white, else in color</param>
        </member>
        <member name="M:CADImport.CADImportForms.OptionsForm.OnChangeEntityPanelVisible(System.Boolean)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportForms.OptionsForm.ChangeEntityPanelVisible">ChangeEntityPanelVisible</see> event
            </summary>
            <param name="val">A value of entities tree visibility</param>
        </member>
        <member name="M:CADImport.CADImportForms.OptionsForm.OnChangeLngPath(System.String)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportForms.OptionsForm.ChangeLngPath">ChangeLngPath</see> event
            </summary>
            <param name="val">A path to the folder, which contains language files (.lng)</param>
        </member>
        <member name="M:CADImport.CADImportForms.OptionsForm.OnChangeLanguage(System.String,System.Int32)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportForms.OptionsForm.ChangeLanguage">ChangeLanguage</see> event
            </summary>
            <param name="val">The specified language</param>
            <param name="index">An index of specified language in the language list</param>
        </member>
        <member name="M:CADImport.CADImportForms.OptionsForm.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CADImport.CADImportForms.OptionsForm"/> class.
            </summary>
        </member>
        <member name="F:CADImport.CADImportForms.OptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.OptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CADImport.CADImportForms.OptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:CADImport.CADImportForms.OptionsForm.ChangeLngPath">
            <summary>
            Occurs when the language files directory was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportForms.OptionsForm.ChangeLanguage">
            <summary>
            Occurs when the language of the application was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportForms.OptionsForm.ChangeEntityPanelVisible">
            <summary>
            Occurs when visibility of the entity tree was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportForms.OptionsForm.ChangeBackgroundColor">
            <summary>
            Occurs when the background of the drawing was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportForms.OptionsForm.ChangeDrawingColors">
            <summary>
            Occurs when the color type of the drawing was changed (black-and-white/color)
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.OptionsForm.MultipleLanguagesPath">
            <summary>
            Gets or sets a path to the language files directory
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.OptionsForm.LngFileName">
            <summary>
            Gets or sets a name of the specified language file (.lng)
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.OptionsForm.SettingsList">
            <summary>
            Gets or sets a <see cref="T:System.Collections.SortedList">list</see> of the application settings
            </summary>
        </member>
        <member name="T:CADImport.CADImportForms.ChangeLngPathEventHandler">
            <summary>
            Represents a set of methods which are invoked on changing of the language files directory.
            The set is used for <see cref="E:CADImport.CADImportForms.OptionsForm.ChangeLngPath">ChangeLngPath</see> event
            </summary>
        </member>
        <member name="T:CADImport.CADImportForms.ChangeLanguageEventHandler">
            <summary>
            Represents a set of methods which are invoked on changing of the application language.
            The set is used for <see cref="E:CADImport.CADImportForms.OptionsForm.ChangeLanguage">ChangeLanguage</see> event.
            </summary>
        </member>
        <member name="T:CADImport.CADImportForms.ChangeOptionsEventHandler">
            <summary>
            Represents a set of methods which are invoked on changing of the application settings.
            The set is used for 
            <see cref="E:CADImport.CADImportForms.OptionsForm.ChangeEntityPanelVisible">ChangeEntityPanelVisible</see>, 
            <see cref="E:CADImport.CADImportForms.OptionsForm.ChangeBackgroundColor">ChangeBackgroundColor</see>,
            <see cref="E:CADImport.CADImportForms.OptionsForm.ChangeDrawingColors">ChangeDrawingColors</see>
            events
            </summary>
        </member>
        <member name="T:CADImport.CADImportForms.ColorSelector">
            <summary>
            Represents a form for selecting a color.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.ColorSelector.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADImportForms.ColorSelector">ColorSelector</see> class with the specified current color.
            </summary>
            <param name="cIndex">An index of the current color.</param>
        </member>
        <member name="M:CADImport.CADImportForms.ColorSelector.Dispose(System.Boolean)">
            <summary>
            A default <b>Dispose</b> method. 
            </summary>
            <param name="disposing">A value indicating if both managed and unmanaged resources have to be released (<b>true</b>) or only unmanaged (<b>false</b>). 
            </param>
        </member>
        <member name="M:CADImport.CADImportForms.ColorSelector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.ColorSelector.ColorIndex">
            <summary>
            Gets or sets an index of the current color.
            </summary>
            <remarks>A color index can accept any integer value between 0 and 255 inclusive.</remarks>
        </member>
        <member name="P:CADImport.CADImportForms.ColorSelector.R">
            <summary>
            Gets the R component of the current color.
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.ColorSelector.G">
            <summary>
            Gets the G component of the current color.
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.ColorSelector.B">
            <summary>
            Gets the B component of the current color.
            </summary>
        </member>
        <member name="T:CADImport.CADImportForms.Pattern">
            <summary>
            Represents a color pattern on the <see cref="T:CADImport.CADImportForms.ColorSelector">ColorSelector</see> form.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.Pattern.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADImportForms.Pattern">Pattern</see> class.
            </summary>
            <param name="ind">An <b>int</b> value that defines an index number of the color 
            <see cref="T:CADImport.CADImportForms.Pattern">Pattern</see> on the <see cref="T:CADImport.CADImportForms.ColorSelector">ColorSelector</see> form.</param>
        </member>
        <member name="P:CADImport.CADImportForms.Pattern.Index">
            <summary>
            Gets an index number of the color 
            <see cref="T:CADImport.CADImportForms.Pattern">Pattern</see> on the <see cref="T:CADImport.CADImportForms.ColorSelector">ColorSelector</see> form.
            </summary>
        </member>
        <member name="T:CADImport.CADImportForms.AboutForm">
            <summary>
            Represents a form for the "About" dialog in demos.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.AboutForm.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CADImport.CADImportForms.AboutForm"/> class.
            </summary>
        </member>
        <member name="F:CADImport.CADImportForms.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CADImport.CADImportForms.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.AboutForm.MultipleLanguagesPath">
            <summary>
            Gets or sets a path to the folder, that contains language files (.lng)
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.AboutForm.LngFileName">
            <summary>
            Gets or sets a name of the language files (.lng)
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.CADImportFace">
            <summary>
            Provides functionality for creating the entities tree in the user interface.
            </summary>
            <remarks>The entities tree allows to look through all entities in the loaded CAD file. It also allows 
            to turn off or turn on a visibility of a separate entity.</remarks>
        </member>
        <member name="M:CADImport.FaceModule.CADImportFace.LoadTreeNodes(System.Windows.Forms.TreeNodeCollection,CADImport.CADImage)">
            <summary>
            Loads entities of the specified CAD image to the entities tree.
            </summary>
            <param name="aNodes">A <see cref="T:System.Windows.Forms.TreeNodeCollection">TreeNodeCollection</see> where the tree nodes representing the entities will be added to.</param>
            <param name="aCADImage">A <see cref="T:CADImport.CADImage">CADImage</see> that provides entities for the entities tree.</param>
        </member>
        <member name="M:CADImport.FaceModule.CADImportFace.SetName(CADImport.CADEntity)">
            <summary>
            Sets a name of the specified <see cref="T:CADImport.CADEntity">CADEntity</see>.
            </summary>
            <param name="aEnt">A <see cref="T:CADImport.CADEntity">CADEntity</see> whose name will be set.</param>
            <returns>A <b>string</b> containing a name of the specified <see cref="T:CADImport.CADEntity">CADEntity</see>.</returns>
            <remarks>A name of the CAD entity is determined by the name of its class.
            If the CAD entity is not supported it will be named just "Entity".</remarks>
        </member>
        <member name="M:CADImport.FaceModule.CADImportFace.DoCheckTreeNode(System.Windows.Forms.TreeNodeCollection,System.Windows.Forms.TreeNode,CADImport.CADImage,System.Windows.Forms.Control)">
            <summary>
            Checks for the entity's visibility.
            </summary>
            <param name="img">A <see cref="T:CADImport.CADImage">CADImage</see> that provides entities for the tree.</param>
            <param name="aNodes">A <see cref="T:System.Windows.Forms.TreeNodeCollection">TreeNodeCollection</see> that contains the tree nodes.</param>
            <param name="aNode">A <see cref="T:System.Windows.Forms.TreeNode">TreeNode</see> representing an entity whose 
            visibility is to be checked.</param>
            <param name="parent">A control where the drawing is displayed</param>		
        </member>
        <member name="M:CADImport.FaceModule.CADImportFace.DecodeEntity(System.Windows.Forms.TreeNode,CADImport.CADImage,System.Windows.Forms.Control,System.Single)">
            <summary>
            Selects an entity on the CAD image and displays its properties in the properties window.
            </summary>
            <param name="node">A <see cref="T:System.Windows.Forms.TreeNode">TreeNode</see> object that 
            represents the entity in the <see cref="T:System.Windows.Forms.TreeView">TreeView</see> and 
            clicking on which initializes selecting the entity on the CAD image.</param>
            <param name="img">A <see cref="T:CADImport.CADImage">CADImage</see> on which the entity to be selected is located.</param>
            <param name="cl1">A <see cref="T:System.Windows.Forms.Control">Control</see> on which the CAD image is drawn.</param>
            <param name="scale">A scale in which the CAD image is drawn.</param>
            <returns>The selected <see cref="T:CADImport.CADEntity">CADEntity</see>.</returns>
        </member>
        <member name="M:CADImport.FaceModule.CADImportFace.DecodeEntityExt(System.Windows.Forms.TreeNode,CADImport.CADImage,System.Windows.Forms.Control,System.Single)">
            <summary>
            Selects an entity on the CAD image and displays its properties in the properties window.
            </summary>
            <param name="node">A <see cref="T:System.Windows.Forms.TreeNode">TreeNode</see> object that 
            represents the entity in the <see cref="T:System.Windows.Forms.TreeView">TreeView</see> and 
            clicking on which initializes selecting the entity on the CAD image.</param>
            <param name="img">A <see cref="T:CADImport.CADImage">CADImage</see> on which the entity to be selected is located.</param>
            <param name="cl1">A <see cref="T:System.Windows.Forms.Control">Control</see> on which the CAD image is drawn.</param>
            <param name="scale">A scale in which the CAD image is drawn.</param>
            <returns>The selected <see cref="T:CADImport.CADEntity">CADEntity</see>.</returns>
        </member>
        <member name="M:CADImport.FaceModule.CADImportFace.SelectObject(CADImport.CADEntity)">
            <summary>
            Creates and sets an object in <see cref="P:CADImport.FaceModule.CADImportFace.EntityPropertyGrid"/>
            by the specified <see cref="T:CADImport.CADEntity">CADEntity</see>
            </summary>
            <param name="ent">The specified entity</param>
        </member>
        <member name="M:CADImport.FaceModule.CADImportFace.SelectObjectExt(CADImport.ObjEntities)">
            <summary>
            Creates and sets an object in <see cref="P:CADImport.FaceModule.CADImportFace.EntityPropertyGrid"/>
            by the specified <see cref="T:CADImport.ObjEntities">set of objects</see> 
            </summary>
            <param name="ent">The specified set of objects</param>
        </member>
        <member name="M:CADImport.FaceModule.CADImportFace.DrawEntityBox(System.Windows.Forms.TreeNode,CADImport.CADImage)">
            <summary>
            Gets a rectangle incorporating and designating the selected entity.
            </summary>
            <param name="node">A <see cref="T:System.Windows.Forms.TreeNode">TreeNode</see> object corresponding to the selected entity.</param>
            <param name="image">A <see cref="T:CADImport.CADImage">CADImage</see> on which the selected entity is located.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle">Rectangle</see> that designates the selected entity.</returns>
        </member>
        <member name="M:CADImport.FaceModule.CADImportFace.SelectLayer(System.Int32,CADImport.CADImage)">
            <summary>
            Displays the properties of the selected layer in the Properties window.
            </summary>
            <param name="ind">An index of the selected layer.</param>
            <param name="img">The <see cref="T:CADImport.CADImage">CADImage</see> on which the layer has been selected.</param>
        </member>
        <member name="P:CADImport.FaceModule.CADImportFace.EntityPropertyGrid">
            <summary>
            Gets or sets a properties window where the properties of 
            the selected entity can be viewed and modified.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> object representing the properties window.</value>
        </member>
        <member name="T:CADImport.CADImportForms.GridForm">
            <summary>
            Provides visual interface for control grid settings
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.GridForm.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CADImport.CADImportForms.GridForm"/> class.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.GridForm.ActivateGrid">
            <summary>
            Activates the grid for the chosen control
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.GridForm.DeactivateGrid">
            <summary>
            Deactivates the grid for the chosen control
            </summary>
        </member>
        <member name="F:CADImport.CADImportForms.GridForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.GridForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CADImport.CADImportForms.GridForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.GridForm.GridControl">
            <summary>
            Gets or sets a <see cref="T:CADImport.FaceModule.CADPictureBox">CADPictureBox</see> control that will be affected by this GridForm
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipOutputStream">
             <summary>
             This is a DeflaterOutputStream that writes the files into a zip
             archive one after another.  It has a special method to start a new
             zip entry.  The zip entries contains information about the file name
             size, compressed size, CRC, etc.
             
             It includes support for Stored and Deflated entries.
             This class is not thread safe.
             <br/>
             <br/>Author of the original java version : Jochen Hoenicke
             </summary>
             <example> This sample shows how to create a zip file
             <code>
             using System;
             using System.IO;
             
             using ICSharpCode.SharpZipLib.Core;
             using ICSharpCode.SharpZipLib.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		string[] filenames = Directory.GetFiles(args[0]);
             		byte[] buffer = new byte[4096];
             		
             		using ( ZipOutputStream s = new ZipOutputStream(File.Create(args[1])) ) {
             		
             			s.SetLevel(9); // 0 - store only to 9 - means best compression
             		
             			foreach (string file in filenames) {
             				ZipEntry entry = new ZipEntry(file);
             				s.PutNextEntry(entry);
            
             				using (FileStream fs = File.OpenRead(file)) {
            						StreamUtils.Copy(fs, s, buffer);
             				}
             			}
             		}
             	}
             }	
             </code>
             </example>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream">
            <summary>
            A special stream deflating or compressing the bytes that are
            written to it.  It uses a Deflater to perform actual deflating.<br/>
            Authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="deflater">
            the underlying deflater.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            The output stream where deflated output is written.
            </param>
            <param name="deflater">
            The underlying deflater to use
            </param>
            <param name="bufferSize">
            The buffer size in bytes to use when deflating (minimum value 512)
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bufsize is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            baseOutputStream does not support writing
            </exception>
            <exception cref="T:System.ArgumentNullException">
            deflater instance is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Not all input is deflated
            </exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.AESAuthCode">
            <summary>
            Returns the 10 byte AUTH CODE to be appended immediately following the AES data stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt a block of data
            </summary>
            <param name="buffer">
            Data to encrypt.  NOTE the original contents of the buffer are lost
            </param>
            <param name="offset">
            Offset of first byte in buffer to encrypt
            </param>
            <param name="length">
            Number of bytes in buffer to encrypt
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.InitializePassword(System.String)">
            <summary>
            Initializes encryption keys based on given <paramref name="password"/>.
            </summary>
            <param name="password">The password.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.InitializeAESPassword(ICSharpCode.SharpZipLib.Zip.ZipEntry,System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            Initializes encryption keys based on given password.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Deflate">
            <summary>
            Deflates everything in the input buffers.  This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. Not supported by this class!
            </summary>
            <param name="offset">The offset relative to the <paramref name="origin"/> to seek.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value. Not supported by this class!
            </summary>
            <param name="value">The new stream length.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position by one
            </summary>
            <returns>The byte read cast to an int.  THe value is -1 if at the end of the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from stream
            </summary>
            <param name="buffer">The buffer to store read data in.</param>
            <param name="offset">The offset to start storing at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The actual number of bytes read.  Zero if end of stream is detected.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous reads are not supported a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset to start storing data at.</param>
            <param name="count">The number of bytes to read</param>
            <param name="callback">The async callback to use.</param>
            <param name="state">The state to use.</param>
            <returns>Returns an <see cref="T:System.IAsyncResult"/></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous writes arent supported, a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset to begin writing at.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to use.</param>
            <param name="state">The state object.</param>
            <returns>Returns an IAsyncResult.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">Flush</see> on the deflater and then
            on the underlying stream.  This ensures that all bytes are flushed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close">
            <summary>
            Calls <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish"/> and closes the underlying
            stream when <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner"></see> is true.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="value">
            The byte value.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
            <param name="buffer">
            The byte array
            </param>
            <param name="offset">
            The offset into the byte array where to start.
            </param>
            <param name="count">
            The number of bytes to write.
            </param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.buffer_">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.deflater_">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.baseOutputStream_">
            <summary>
            Base stream the deflater depends on.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanPatchEntries">
            <summary>
            Allows client to determine if an entry can be patched after its added
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Password">
            <summary>
            Get/set the password used for encryption.
            </summary>
            <remarks>When set to null or if the password is empty no encryption is performed</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanRead">
            <summary>
            Gets value indicating stream can be read from
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanSeek">
            <summary>
            Gets a value indicating if seeking is supported for this stream
            This property always returns false
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanWrite">
            <summary>
            Get value indicating if this stream supports writing
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Length">
            <summary>
            Get current length of stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Position">
            <summary>
            Gets the current position within the stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">
            The output stream to which the archive contents are written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">The output stream to which the archive contents are written.</param>
            <param name="bufferSize">Size of the buffer to use.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.SetComment(System.String)">
            <summary>
            Set the zip file comment.
            </summary>
            <param name="comment">
            The comment text for the entire archive.
            </param>
            <exception name ="ArgumentOutOfRangeException">
            The converted comment is longer than 0xffff bytes.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  The new level will be activated
            immediately.
            </summary>
            <param name="level">The new compression level (1 to 9).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.GetLevel">
            <summary>
            Get the current deflater compression level
            </summary>
            <returns>The current compression level</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeLong(System.Int64)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.PutNextEntry(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Starts a new Zip entry. It automatically closes the previous
            entry if present.
            All entry elements bar name are optional, but must be correct if present.
            If the compression method is stored and the output is not patchable
            the compression for that entry is automatically changed to deflate level 0
            </summary>
            <param name="entry">
            the entry.
            </param>
            <exception cref="T:System.ArgumentNullException">
            if entry passed is null.
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if stream was finished
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Too many entries in the Zip file<br/>
            Entry name is too long<br/>
            Finish has already been called<br/>
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.CloseEntry">
            <summary>
            Closes the current entry, updating header and footer information as required
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given buffer to the current entry.
            </summary>
            <param name="buffer">The buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">Archive size is invalid</exception>
            <exception cref="T:System.InvalidOperationException">No entry is active.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.Finish">
            <summary>
            Finishes the stream.  This will write the central directory at the
            end of the zip file and flush the stream.
            </summary>
            <remarks>
            This is automatically called when the stream is closed.
            </remarks>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Comment exceeds the maximum length<br/>
            Entry name exceeds the maximum length
            </exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.entries">
            <summary>
            The entries for the archive.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.crc">
            <summary>
            Used to track the crc of data added to entries.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.curEntry">
            <summary>
            The current entry being added.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.size">
            <summary>
            Used to track the size of data for an entry during writing.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.offset">
            <summary>
            Offset to be recorded for each entry in the central header.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.zipComment">
            <summary>
            Comment for the entire archive recorded in central header.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.patchEntryHeader">
            <summary>
            Flag indicating that header patching is required for the current entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.crcPatchPos">
            <summary>
            Position to patch crc
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.sizePatchPos">
            <summary>
            Position to patch size.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.IsFinished">
            <summary>
            Gets a flag value of true if the central header has been added for this archive; false if it has not been added.
            </summary>
            <remarks>No further entries can be added once this has been done.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.UseZip64">
            <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
            <remarks>Older archivers may not understand Zip64 extensions.
            If backwards compatability is an issue be careful when adding <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Size">entries</see> to an archive.
            Setting this property to off is workable but less desirable as in those circumstances adding a file
            larger then 4GB will fail.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
            <remarks>NOTE: Not all exceptions thrown will be derived from this class.
            A variety of other exceptions are possible for example <see cref="T:System.ArgumentNullException"></see></remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipBaseException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified error message.
            </summary>
            <param name="message">A message describing the exception.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message describing the exception.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform">
            <summary>
            Transforms stream using AES in CTR mode
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.#ctor(System.String,System.Byte[],System.Int32,System.Boolean)">
             <summary>
             Constructor.
             </summary>
             <param name="key">Password string</param>
             <param name="saltBytes">Random bytes, length depends on encryption strength.
             128 bits = 8 bytes, 192 bits = 12 bytes, 256 bits = 16 bytes.</param>
             <param name="blockSize">The encryption strength, in bytes eg 16 for 128 bits.</param>
             <param name="writeMode">True when creating a zip, false when reading. For the AuthCode.</param>
            
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Implement the ICryptoTransform method.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.GetAuthCode">
            <summary>
            Returns the 10 byte AUTH CODE to be checked or appended immediately following the AES data stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.PwdVerifier">
            <summary>
            Returns the 2 byte password verifier
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.ZipAESTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="T:CADImport.CADImportForms.OpenFileFromWebForm">
            <summary>
            Represents a form that corresponds to the opening of a file from the web dialog
            </summary>
        </member>
        <member name="F:CADImport.CADImportForms.OpenFileFromWebForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.OpenFileFromWebForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CADImport.CADImportForms.OpenFileFromWebForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.OpenFileFromWebForm.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CADImport.CADImportForms.OpenFileFromWebForm"/> class.
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.OpenFileFromWebForm.Path">
            <summary>
            Gets or sets a hyperlink to the opening file
            </summary>
        </member>
        <member name="T:CADImport.CADTreeView">
            <summary>
            Represents a form that shows structure of a CAD drawing as a tree.
            </summary>
        </member>
        <member name="F:CADImport.CADTreeView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CADImport.CADTreeView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CADImport.CADTreeView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CADImport.CADTreeView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADTreeView">CADTreeView</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADTreeView.LoadTreeNodes(CADImport.CADImage)">
            <summary>
            Loads entities of the specified CAD image to the entities tree.
            </summary>
            <param name="aCADImage">A <see cref="T:CADImport.CADImage">CADImage</see> that provides entities for the entities tree.</param>
        </member>
        <member name="M:CADImport.CADTreeView.DoCheckTreeNode(System.Windows.Forms.TreeNode,CADImport.CADImage)">
            <summary>
            Checks for the entity's visibility.
            </summary>
            <param name="img">A <see cref="T:CADImport.CADImage">CADImage</see> that provides entities for the tree.</param>
            <param name="aNode">A <see cref="T:System.Windows.Forms.TreeNode">TreeNode</see> representing an entity whose 
            visibility is to be checked.</param>
        </member>
        <member name="P:CADImport.CADTreeView.Image">
            <summary>
            Gets or sets <see cref="T:CADImport.CADImage">CADImage</see> object for visualization.
            </summary>
        </member>
        <member name="P:CADImport.CADTreeView.DrawTarget">
            <summary>
            Gets or sets a control for visualization.
            </summary>
        </member>
        <member name="T:OpenGL.Color4">
            <summary>
            Represents a color with 4 floating-point components (R, G, B, A).
            </summary>
        </member>
        <member name="F:OpenGL.Color4.R">
            <summary>
            The red component of this Color4 structure.
            </summary>
        </member>
        <member name="F:OpenGL.Color4.G">
            <summary>
            The green component of this Color4 structure.
            </summary>
        </member>
        <member name="F:OpenGL.Color4.B">
            <summary>
            The blue component of this Color4 structure.
            </summary>
        </member>
        <member name="F:OpenGL.Color4.A">
            <summary>
            The alpha component of this Color4 structure.
            </summary>
        </member>
        <member name="M:OpenGL.Color4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Color4 structure from the specified components.
            </summary>
            <param name="r">The red component of the new Color4 structure.</param>
            <param name="g">The green component of the new Color4 structure.</param>
            <param name="b">The blue component of the new Color4 structure.</param>
            <param name="a">The alpha component of the new Color4 structure.</param>
        </member>
        <member name="M:OpenGL.Color4.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a new Color4 structure from the specified System.Drawing.Color.
            </summary>
            <param name="color">The System.Drawing.Color containing the component values.</param>
        </member>
        <member name="M:OpenGL.Color4.op_Equality(OpenGL.Color4,OpenGL.Color4)">
            <summary>
            Compares the specified Color4 structures for equality.
            </summary>
            <param name="left">The left-hand side of the comparison.</param>
            <param name="right">The right-hand side of the comparison.</param>
            <returns>True if left is equal to right; false otherwise.</returns>
        </member>
        <member name="M:OpenGL.Color4.op_Inequality(OpenGL.Color4,OpenGL.Color4)">
            <summary>
            Compares the specified Color4 structures for inequality.
            </summary>
            <param name="left">The left-hand side of the comparison.</param>
            <param name="right">The right-hand side of the comparison.</param>
            <returns>True if left is not equal to right; false otherwise.</returns>
        </member>
        <member name="M:OpenGL.Color4.op_Implicit(System.Drawing.Color)~OpenGL.Color4">
            <summary>
            Converts the specified System.Drawing.Color to a Color4 structure.
            </summary>
            <param name="color">The System.Drawing.Color to convert.</param>
            <returns>A new Color4 structure containing the converted components.</returns>
        </member>
        <member name="M:OpenGL.Color4.op_Explicit(OpenGL.Color4)~System.Drawing.Color">
            <summary>
            Converts the specified Color4 to a System.Drawing.Color structure.
            </summary>
            <param name="color">The Color4 to convert.</param>
            <returns>A new System.Drawing.Color structure containing the converted components.</returns>
        </member>
        <member name="M:OpenGL.Color4.Equals(OpenGL.Color4)">
            <summary>
            Compares whether this Color4 structure is equal to the specified Color4.
            </summary>
            <param name="other">The Color4 structure to compare to.</param>
            <returns>True if both Color4 structures contain the same components; false otherwise.</returns>
        </member>
        <member name="M:OpenGL.Color4.Equals(System.Object)">
            <summary>
            Compares whether this Color4 structure is equal to the specified object.
            </summary>
            <param name="obj">An object to compare to.</param>
            <returns>True obj is a Color4 structure with the same components as this Color4; false otherwise.</returns>
        </member>
        <member name="M:OpenGL.Color4.GetHashCode">
            <summary>
            Calculates the hash code for this Color4 structure.
            </summary>
            <returns>A System.Int32 containing the hashcode of this Color4 structure.</returns>
        </member>
        <member name="M:OpenGL.Color4.ToString">
            <summary>
            Creates a System.String that describes this Color4 structure.
            </summary>
            <returns>A System.String that describes this Color4 structure.</returns>
        </member>
        <member name="T:CADImport.GBR.GBRImage">
            <summary>
            Represents a Gerber files drawing and provides methods for drawing all loaded GBR objects.
            </summary>
        </member>
        <member name="M:CADImport.GBR.GBRImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.GBR.GBRImage">GBRImage</see> class.
            </summary>
        </member>
        <member name="M:CADImport.GBR.GBRImage.OnEndGBRProgram(CADImport.GBR.GBRDrawStatus)">
            <summary>
            Invokes the <see cref="E:CADImport.GBR.GBRImage.EndGBRProgram"/> event
            </summary>
            <param name="status">GBR file loading status to set (<see cref="T:CADImport.GBR.GBRDrawStatus">GBRDrawStatus</see>)</param>
        </member>
        <member name="M:CADImport.GBR.GBRImage.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads a GBR image stored in the specified stream.
            </summary>
            <param name="str">A <see cref="T:System.IO.Stream">Stream</see> that contains a GBR image to be loaded.</param>
        </member>
        <member name="M:CADImport.GBR.GBRImage.DrawPoint(System.Object)">
            <summary>
            Draws GBRPoint object
            </summary>
            <param name="sender">GBRPoint object</param>
        </member>
        <member name="M:CADImport.GBR.GBRImage.DrawArc(System.Object)">
            <summary>
            Draws <see cref="T:CADImport.GBR.GBRArc">GBRArc</see> object
            </summary>
            <param name="sender"><see cref="T:CADImport.GBR.GBRArc">GBRArc</see> object</param>
        </member>
        <member name="M:CADImport.GBR.GBRImage.DrawLine(System.Object)">
            <summary>
            Darws <see cref="T:CADImport.GBR.GBRLine">GBRLine</see> object
            </summary>
            <param name="sender"><see cref="T:CADImport.GBR.GBRLine">GBRLine</see> object</param>
        </member>
        <member name="M:CADImport.GBR.GBRImage.DrawEndAperture(CADImport.GBR.Aperture,CADImport.DPoint,System.Drawing.Brush)">
            <summary>
            Draws final part of the aperture
            </summary>
            <param name="aperture">Aperture values</param>
            <param name="pt">Aperture position</param>
            <param name="curBr">Aperture brush settings</param>
        </member>
        <member name="M:CADImport.GBR.GBRImage.DrawObroundAperture(System.Collections.ArrayList,CADImport.DPoint,System.Drawing.Brush)">
            <summary>
            Draws an obround (oval) aperture
            </summary>
            <param name="values">Aperture values</param>
            <param name="pt">Aperture position</param>
            <param name="br">Aperture brush settings</param>
        </member>
        <member name="M:CADImport.GBR.GBRImage.DrawRegularAperture(System.Collections.ArrayList,CADImport.DPoint,System.Drawing.Brush)">
            <summary>
            Draws a regular aperture
            </summary>
            <param name="values">Aperture values</param>
            <param name="pt">Aperture position</param>
            <param name="br">Aperture brush settings</param>
        </member>
        <member name="M:CADImport.GBR.GBRImage.DrawRectangleAperture(System.Collections.ArrayList,CADImport.DPoint,System.Drawing.Brush)">
            <summary>
            Draws a rectangle aperture
            </summary>
            <param name="values">Aperture values</param>
            <param name="pt">Aperture position</param>
            <param name="br">Aperture brush settings</param>
        </member>
        <member name="M:CADImport.GBR.GBRImage.DrawCircleAperture(System.Collections.ArrayList,CADImport.DPoint,System.Drawing.Brush)">
            <summary>
            Draws a circle aperture
            </summary>
            <param name="values">Aperture values</param>
            <param name="pt">Aperture position</param>
            <param name="br">Aperture brush settings</param>
        </member>
        <member name="P:CADImport.GBR.GBRImage.EnableAperturesDrawingMode">
            <summary>
            Enables apertures drawing mode
            </summary>
        </member>
        <member name="P:CADImport.GBR.GBRImage.EnableAperturesAsHatch">
            <summary>
            Enables a mode which draws apperture as a hatch
            </summary>
        </member>
        <member name="E:CADImport.GBR.GBRImage.EndGBRProgram">
            <summary>
            Occurs on stop/finish of loading GBR file.
            </summary>
        </member>
        <member name="P:CADImport.GBR.GBRImage.DarkPolarityColor">
            <summary>
            Gets or sets positive polarity printing mode for GBR entities
            </summary>
        </member>
        <member name="P:CADImport.GBR.GBRImage.ClearPolarityColor">
            <summary>
            Gets or sets negative polarity printing mode for GBR entities
            </summary>
        </member>
        <member name="P:CADImport.GBR.GBRImage.ProgramStatus">
            <summary>
            Gets GBR file loading status
            </summary>
        </member>
        <member name="P:CADImport.GBR.GBRImage.InchesMode">
            <summary>
            Gets units of the GBR drawing; inches if <b>true</b>
            </summary>
        </member>
        <member name="P:CADImport.GBR.GBRImage.MillimetersMode">
            <summary>
            Gets units of the GBR drawing; millimeters if <b>true</b>
            </summary>
        </member>
        <member name="P:CADImport.GBR.GBRImage.IncrementalCoordinate">
            <summary>
            Gets a value that indicates  absolute or incremental notation
            </summary>
        </member>
        <member name="P:CADImport.GBR.GBRImage.LeadingZeroes">
            <summary>
            Get parameter LeadingZeroes
            </summary>
            <remarks>
            Leading zero omission eliminates all zeroes that precede non-zero digits but
            retains following zeroes. For example, with 2.3 coordinate format, 15 would be
            interpreted as 0.015.
            </remarks>
        </member>
        <member name="P:CADImport.GBR.GBRImage.TrailingZeroes">
            <summary>
            Get parameter TrailingZeroes 
            </summary>
            <remarks>
            Trailing zero omission eliminates all zeroes following non-zero digits but retains
            preceding zeroes. For example, with 2.3 coordinate format, 15 would be
            interpreted as 15.000.
            </remarks>
        </member>
        <member name="T:CADImport.FaceModule.ScrollBarsShow">
            <summary>
            Represents options for the scrollbars activity
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.ScrollBarsShow.Automatic">
            <summary>
            Appear when necessary
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.ScrollBarsShow.Always">
            <summary>
            Always displayed
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.CADPictureBox">
            <summary>
            Represents the advanced <see cref="T:System.Windows.Forms.PictureBox"/> object with scroll bars
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.CADPictureBox.OnScroll(System.Object,CADImport.FaceModule.ScrollEventArgsExt)">
            <summary>
            Invokes the image scrolling event with scroll bars
            </summary>
            <param name="sender">The object caused an event</param>
            <param name="e">Contains event data</param>
        </member>
        <member name="M:CADImport.FaceModule.CADPictureBox.SetGDIStyle">
            <summary>
            Sets options for GDI+ visualization.
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.CADPictureBox.Set3DStyle">
            <summary>
            Sets options for OpenGL visualization.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.CADPictureBox.gdiStyle">
            <summary>
            Represents options for GDI+ visualization.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.CADPictureBox.xnaStyle">
            <summary>
            Represents options for OpenGL visualization.
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.CADPictureBox.#ctor">
            <summary>
            Creates an instance of the <see cref="T:CADImport.FaceModule.CADPictureBox">CADPictureBox</see> class
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.CADPictureBox.Dispose(System.Boolean)">
            <summary>
            Deallocates resources, which are used by Component object.
            </summary>
            <param name="disposing">If true, both controlled and uncontrollable resources are deallocated; if false, uncontrollable resources are deallocated only.</param>
        </member>
        <member name="M:CADImport.FaceModule.CADPictureBox.SetVirtualSizeNoInvalidate(System.Drawing.Size)">
            <summary>
            Sets the new size of the scrolling region
            </summary>
            <param name="value">A new size</param>
        </member>
        <member name="M:CADImport.FaceModule.CADPictureBox.SetPositionNoInvalidate(System.Drawing.Point)">
            <summary>
            Sets a new scrolling position
            </summary>
            <param name="value">A new position</param>
        </member>
        <member name="M:CADImport.FaceModule.CADPictureBox.OnResize(System.EventArgs)">
            <summary>
            Invokes <see cref="E:System.Windows.Forms.Control.Resize">Resize</see> event
            </summary>
            <param name="e">Event's parameters</param>
        </member>
        <member name="M:CADImport.FaceModule.CADPictureBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Handles Windows messages
            </summary>
            <param name="m">Windows Message for handling</param>
        </member>
        <member name="E:CADImport.FaceModule.CADPictureBox.ScrollEvent">
            <summary>
            Occurs on changing of the image position with scroll bars
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADPictureBox.VirtualSize">
            <summary>
            Gets or sets the full image size include the scrolling region
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADPictureBox.DoubleBuffering">
            <summary>
            Gets or sets Double Buffering mode
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADPictureBox.BorderSize">
            <summary>
            Returns border size for this <see cref="T:CADImport.FaceModule.CADPictureBox">CADPictureBox</see> object.
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADPictureBox.ScrollBars">
            <summary>
            Gets or sets a value defining the scrollbars activity.
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADPictureBox.Position">
            <summary>
            Gets or sets scroll bars position
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADPictureBox.Grid">
            <summary>
            Defines the grid for the <see cref="T:CADImport.FaceModule.CADPictureBox">CADPictureBox</see> instance.
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADPictureBox.Ortho">
            <summary>
            Defines the ortho mode for the <see cref="T:CADImport.FaceModule.CADPictureBox">CADPictureBox</see> instance.
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.Grid">
            <summary>
            Represents the grid object for a control.
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.Grid.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates a new instance of the Grid class
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.Grid.Activate">
            <summary>
            Activates the grid object
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADImport.FaceModule.Grid.Deactivate">
            <summary>
            Deactivates the grid object
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.Grid.Color">
            <summary>
            Gets or sets a color for the grid.
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.Grid.StepX">
            <summary>
            Gets or sets the grid step by X axis
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.Grid.StepY">
            <summary>
            Gets or sets the grid step by Y axis
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.Grid.CellScreenSize">
            <summary>
            Gets or sets the size of the grid cell on screen. Takes effect when step of the greed 
            on screen is not enough for good resolution.
            <remarks>The value must belong to interval from 10 to 100. Default value is 30.</remarks>
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.Grid.IsActive">
            <summary>
            Displays grid object activity state
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.ScrollEventArgsExt">
            <summary>Provides data for the Scroll event.</summary>		
        </member>
        <member name="M:CADImport.FaceModule.ScrollEventArgsExt.#ctor(System.Windows.Forms.ScrollEventType)">
            <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.ScrollEventArgs"></see> class
            using the specified values for the <see cref="P:System.Windows.Forms.ScrollEventArgs.Type"></see> and
            <see cref="P:System.Windows.Forms.ScrollEventArgs.NewValue"></see> properties.</summary>
            <param name="type">One of the <see cref="T:System.Windows.Forms.ScrollEventType"></see> values. </param>		
        </member>
        <member name="M:CADImport.FaceModule.ScrollEventArgsExt.#ctor(System.Windows.Forms.ScrollEventType,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.ScrollEventArgs"></see> class
            using the specified values for the <see cref="P:System.Windows.Forms.ScrollEventArgs.Type"></see> and
            <see cref="P:System.Windows.Forms.ScrollEventArgs.NewValue"></see> properties.</summary>
            <param name="type">One of the <see cref="T:System.Windows.Forms.ScrollEventType"></see> values. </param>
            <param name="newValue">The new value for the scroll bar. </param>
        </member>
        <member name="M:CADImport.FaceModule.ScrollEventArgsExt.#ctor(System.Windows.Forms.ScrollEventType,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.ScrollEventArgs"></see> class
            using the specified values for the <see cref="P:System.Windows.Forms.ScrollEventArgs.Type"></see>,
            <see cref="P:System.Windows.Forms.ScrollEventArgs.OldValue"></see>,
            and <see cref="P:System.Windows.Forms.ScrollEventArgs.NewValue"></see> properties.</summary>
            <param name="type">One of the <see cref="T:System.Windows.Forms.ScrollEventType"></see> values. </param>
            <param name="oldValue">The old value for the scroll bar. </param>
            <param name="newValue">The new value for the scroll bar. </param>
        </member>
        <member name="M:CADImport.FaceModule.ScrollEventArgsExt.#ctor(System.Windows.Forms.ScrollEventType,System.Int32,CADImport.FaceModule.ScrollOrientation)">
            <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.ScrollEventArgs"></see> class
            using the given values for the <see cref="P:System.Windows.Forms.ScrollEventArgs.Type"></see>,
            <see cref="P:System.Windows.Forms.ScrollEventArgs.NewValue"></see>,
            and <see cref="P:System.Windows.Forms.ScrollEventArgs.ScrollOrientation"></see> properties.</summary>
            <param name="type">One of the <see cref="T:System.Windows.Forms.ScrollEventType"></see> values. </param>
            <param name="newValue">The new value for the scroll bar. </param>
            <param name="scroll">One of the <see cref="T:System.Windows.Forms.ScrollOrientation"></see> values. </param>
        </member>
        <member name="M:CADImport.FaceModule.ScrollEventArgsExt.#ctor(System.Windows.Forms.ScrollEventType,System.Int32,System.Int32,CADImport.FaceModule.ScrollOrientation)">
            <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.ScrollEventArgs"></see> class
            using the given values for the <see cref="P:System.Windows.Forms.ScrollEventArgs.Type"></see>,
            <see cref="P:System.Windows.Forms.ScrollEventArgs.OldValue"></see>,
            <see cref="P:System.Windows.Forms.ScrollEventArgs.NewValue"></see>,
            and <see cref="P:System.Windows.Forms.ScrollEventArgs.ScrollOrientation"></see> properties.</summary>
            <param name="type">One of the <see cref="T:System.Windows.Forms.ScrollEventType"></see> values. </param>
            <param name="oldValue">The old value for the scroll bar. </param>
            <param name="newValue">The new value for the scroll bar. </param>
            <param name="scroll">One of the <see cref="T:System.Windows.Forms.ScrollOrientation"></see> values. </param>
        </member>
        <member name="P:CADImport.FaceModule.ScrollEventArgsExt.NewValue">
            <summary>Gets or sets the new <see cref="P:System.Windows.Forms.ScrollBar.Value"></see> of the scroll bar.</summary>
            <returns>The numeric value to change the <see cref="P:System.Windows.Forms.ScrollBar.Value"></see> property.</returns>		
        </member>
        <member name="P:CADImport.FaceModule.ScrollEventArgsExt.OldValue">
            <summary>Gets the old <see cref="P:System.Windows.Forms.ScrollBar.Value"></see> of the scroll bar.</summary>
            <returns>The numeric value that the <see cref="P:System.Windows.Forms.ScrollBar.Value"></see> property contained before it was changed.</returns>		
        </member>
        <member name="P:CADImport.FaceModule.ScrollEventArgsExt.ScrollOrientation">
            <summary>Gets the scroll bar orientation that raised the Scroll event.</summary>
            <returns>One of the <see cref="T:System.Windows.Forms.ScrollOrientation"></see> values.</returns>		
        </member>
        <member name="P:CADImport.FaceModule.ScrollEventArgsExt.Type">
            <summary>Gets the type of scroll event that occurred.</summary>
            <returns>One of the <see cref="T:System.Windows.Forms.ScrollEventType"></see> values.</returns>		
        </member>
        <member name="T:CADImport.FaceModule.ScrollOrientation">
            <summary>Specifies the scroll bar orientation for the <see cref="E:System.Windows.Forms.ScrollBar.Scroll"></see> event.</summary>	
        </member>
        <member name="F:CADImport.FaceModule.ScrollOrientation.HorizontalScroll">
            <summary>
            Horizontal orientation
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.ScrollOrientation.VerticalScroll">
            <summary>
            Vertical orientation
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.ScrollEventHandlerExt">
            <summary>Represents the method that handles the Scroll event of a <see cref="T:System.Windows.FormsGridView"></see>, <see cref="T:System.Windows.Forms.ScrollBar"></see>, <see cref="T:System.Windows.Forms.TrackBar"></see>, or <see cref="T:System.Windows.FormsGrid"></see>.</summary>	
        </member>
        <member name="T:CADImport.DimName">
            <summary>
            Describes dimension variables
            </summary>
        </member>
        <member name="F:CADImport.DimName.None">
            <summary>
            Default empty
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMASZ">
            <summary>
            Dimensioning arrow size
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMBLK1">
            <summary>
            First arrow block name
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMBLK2">
            <summary>
            Second arrow block name
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMSD1">
            <summary>
            Suppression of first extension line
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMSD2">
            <summary>
            Suppression of second extension line
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMSE1">
            <summary>
            First extension line suppressed if nonzero
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMSE2">
            <summary>
            Second extension line suppressed if nonzero
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMCLRD">
            <summary>
            Dimension line color
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMCLRE">
            <summary>
            Dimension extension line color
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMCLRT">
            <summary>
            Dimension text color
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMLWD">
            <summary>
            Dimension line lineweight
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMLWE">
            <summary>
            Extension line lineweight
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMTIX">
            <summary>
            Force text inside extensions if nonzero
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMLFAC">
            <summary>
            Linear measurements scale factor
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMDEC">
            <summary>
            Number of decimal places for the tolerance values of a primary units dimension
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMTXT">
            <summary>
            Dimensioning text height
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMTAD">
            <summary>
            Text above dimension line if nonzero
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMTXSTY">
            <summary>
            Dimension text style
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMGAP">
            <summary>
            Dimension line gap
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMEXE">
            <summary>
            Extension line extension
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMEXO">
            <summary>
            Extension line offset
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMTIH">
            <summary>
            Text inside horizontal if nonzero
            </summary>
        </member>
        <member name="F:CADImport.DimName.DIMTOH">
            <summary>
            Text outside horizontal if nonzero
            </summary>
        </member>
        <member name="T:CADImport.CADIterate">
            <summary>
            Provides a set of data for each CAD entity to be processed by 
            the <see cref="M:CADImport.CADConverter.Iterate(CADImport.CADEntityProc,CADImport.CADEntityProc,CADImport.CADIterate)">Iterate</see> method.
            </summary>
        </member>
        <member name="F:CADImport.CADIterate.xScale">
            <summary>
            A CAD entity scale along the X axis.
            </summary>
        </member>
        <member name="F:CADImport.CADIterate.yScale">
            <summary>
            A CAD entity scale along the Y axis.
            </summary>
        </member>
        <member name="F:CADImport.CADIterate.matrix">
            <summary>
            Represents a coordinate transformation matrix.
            </summary>
        </member>
        <member name="F:CADImport.CADIterate.insert">
            <summary>
            Represents the current block reference (can be <b>null</b>).
            </summary>
        </member>
        <member name="F:CADImport.CADIterate.convertor">
            <summary>
            Represents the previous convertor (can be <b>null</b>).
            </summary>
        </member>
        <member name="F:CADImport.CADIterate.color">
            <summary>
            Represents the current block color or <see cref="F:CADImport.CADConst.clNone">clNone</see>.
            </summary>
        </member>
        <member name="F:CADImport.CADIterate.angle">
            <summary>
            A rotation angle of a CAD entity.
            </summary>
        </member>
        <member name="F:CADImport.CADIterate.additional">
            <summary>
            Represents a user-defined value.
            </summary>
        </member>
        <member name="M:CADImport.CADIterate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADIterate">CADIterate</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADIterate.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:CADImport.CADIterate">CADIterate</see> object.
            </summary>
            <returns>An object of the <see cref="T:CADImport.CADIterate">CADIterate</see> class.</returns>
        </member>
        <member name="T:CADImport.CADEntityProc">
            <summary>
            Represents methods for entities.
            </summary>
        </member>
        <member name="T:CADImport.FPointProc">
            <summary>
            Represents methods for getting the entities' points.
            </summary>
        </member>
        <member name="T:CADImport.EventHandler">
            <summary>
            Represents methods that will handle all events in the <b>CADImport</b> namespace.
            </summary>
        </member>
        <member name="T:CADImport.CADXRefResolver">
            <summary>
            Represents methods for resolve unknown xrefs.
            </summary>
        </member>
        <member name="T:CADImport.FontsParameters">
            <summary>
            Represents a set of font parameters.
            </summary>
        </member>
        <member name="F:CADImport.FontsParameters.sDefaultSHXFont">
            <summary>
            Represents a default SHX font.
            </summary>
        </member>
        <member name="M:CADImport.FontsParameters.GetFontFamilyByFontName(System.String)">
            <summary>
            Chooses by font name the most suitable font from <see cref="P:System.Drawing.FontFamily.Families">FontFamily</see> 
            </summary>
            <param name="nm">Font name</param>
            <returns>Returns chosen <see cref="P:System.Drawing.FontFamily.Families">FontFamily</see></returns>
        </member>
        <member name="M:CADImport.FontsParameters.GetFontName(CADImport.CADText)">
            <summary>
            Sets a font name for the <see cref="T:CADImport.CADText">CADText</see> instance.
            </summary>
            <param name="text">A <see cref="T:CADImport.CADText">CADText</see> instance.</param>
        </member>
        <member name="M:CADImport.FontsParameters.Clone">
            <summary>
            Copies a <see cref="T:CADImport.FontsParameters">FontsParameters</see> instance.
            </summary>
            <returns>A new <see cref="T:CADImport.FontsParameters">FontsParameters</see> instance</returns>
        </member>
        <member name="M:CADImport.FontsParameters.SetParams(CADImport.FontsParameters)">
            <summary>
            Sets <see cref="T:CADImport.FontsParameters">FontsParameters</see> instance members values.
            </summary>
            <param name="fontsParameters"></param>
        </member>
        <member name="M:CADImport.FontsParameters.Dispose">
            <summary>
            Release all resources used by <see cref="T:CADImport.FontsParameters">FontsParameters</see> instance.
            </summary>
        </member>
        <member name="P:CADImport.FontsParameters.DefaultSHXTTFFont">
            <summary>
            Gets or sets default TTF font for drawing instead of SHX fonts in SHX disabled mode
            </summary>
        </member>
        <member name="P:CADImport.FontsParameters.SHXFonts">
            <summary>
            Gets a list of SHX fonts.
            </summary>
        </member>
        <member name="P:CADImport.FontsParameters.SearchSHXPaths">
            <summary>
            Gets or sets a value specifying whether SHX paths will be searched for the fonts.
            </summary>
        </member>
        <member name="P:CADImport.FontsParameters.UseTTFFonts">
            <summary>
            Specifies if TTF fonts will be used.
            </summary>
        </member>
        <member name="P:CADImport.FontsParameters.UseSHXFonts">
            <summary>
            Specifies if SHX fonts will be used.
            </summary>
        </member>
        <member name="P:CADImport.FontsParameters.UseMultyTTFFonts">
            <summary>
            Gets or sets a value indicating whether a multimode is used.
            </summary>
        </member>
        <member name="P:CADImport.FontsParameters.SHXSearchPaths">
            <summary>
            Gets or sets paths for searching SHX fonts.
            </summary>
        </member>
        <member name="P:CADImport.FontsParameters.SHXDefaultFont">
            <summary>
            Gets or sets an SHX default font.
            </summary>
        </member>
        <member name="T:CADImport.CADConverter">
            <summary>
            Provides methods for loading a file and producing a set of CAD entities contained in the loaded file. 
            </summary>
            <remarks>All loaded entities are descendants of the <see cref="T:CADImport.CADEntity">CADEntity</see> class.</remarks>
        </member>
        <member name="M:CADImport.CADConverter.GetArrowTypeByName(System.String,System.Byte)">
            <summary>
            Searches a specified dimension arrow name in array
            </summary>
            <param name="str">A name of the dimension arrow</param>
            <param name="defVal">A default dimension arrow type</param>
            <returns>A type of the specified dimension arrow</returns>
            <remarks>If the specified name not found, returns default dimension arrow type</remarks>
        </member>
        <member name="M:CADImport.CADConverter.GetDWGCodePage(System.String)">
            <summary>
            Returns a number of codepage
            </summary>
            <param name="str">A string containing codepage name</param>
            <returns></returns>
        </member>
        <member name="M:CADImport.CADConverter.GetDWGVersion(System.String)">
            <summary>
            Returns a version of DWG or DXF file
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CADImport.CADConverter.SetHandle(CADImport.CADEntity)">
            <summary>
            Sets a handle for a <see cref="T:CADImport.CADEntity">CADEntity</see> object.
            </summary>
            <param name="ent"></param>
        </member>
        <member name="M:CADImport.CADConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADConverter">CADConverter</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADConverter.BlockByName(System.String)">
            <summary>
            Searches blocks section and returns a <see cref="T:CADImport.CADBlock">CADBlock</see> object
            with the specified name.
            </summary>
            <param name="AName">The name of a block</param>
            <returns>The block with the specified name. Null if the block is not found</returns>
        </member>
        <member name="M:CADImport.CADConverter.LayoutByName(System.String)">
            <summary>
            Searches layouts section and returns a <see cref="T:CADImport.CADLayout">CADLayout</see> object
            with the specified name.
            </summary>
            <param name="AName"></param>
            <returns>The layout with the specified name. Null if the block is not found</returns>
        </member>
        <member name="M:CADImport.CADConverter.GetCounts(CADImport.FaceModule.ConvSection)">
            <summary>
            Returns a number of elements in the specified section.
            </summary>
            <param name="aInd">One of the <see cref="T:CADImport.FaceModule.ConvSection">ConvSection</see> values 
            that specify the section in the loaded CAD file.</param>
            <remarks></remarks>
        </member>
        <member name="M:CADImport.CADConverter.GetSection(CADImport.FaceModule.ConvSection)">
            <summary>
            Returns a group of objects corresponding to the specified type of CAD section.
            </summary>
            <param name="Index">One of the <see cref="T:CADImport.FaceModule.ConvSection">ConvSection</see> values 
            that specify the section in the loaded CAD file.</param>
            <returns>A <see cref="T:CADImport.CADGroup">CADGroup</see> object representing a group of objects from 
            the loaded CAD file.</returns>
        </member>
        <member name="M:CADImport.CADConverter.SetSection(CADImport.FaceModule.ConvSection,CADImport.CADPlotEntity)">
            <summary>
            Sets a <see cref="T:CADImport.CADGroup">CADGroup</see> object to the specified section type. 
            </summary>
            <param name="Index">One of the <see cref="T:CADImport.FaceModule.ConvSection">ConvSection</see> values 
            that specify the section type.</param>
            <param name="Value">A <see cref="T:CADImport.CADGroup">CADGroup</see> object that is set to the specified section type.</param>
        </member>
        <member name="M:CADImport.CADConverter.SetNumberOfPartsInSpline(System.Int32)">
            <summary>
            Sets a quantity of segments used to draw a spline to the specified number and 
            loads the spline to the <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="aCount">A quantity of segments that will be used to draw a spline.</param>
        </member>
        <member name="M:CADImport.CADConverter.SetNumberOfPartsInCircle(System.Int32)">
            <summary>
            Sets a quantity of segments used to draw a circle to the specified number and 
            loads the circle to the <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="aCount">A quantity of segments that will be used to draw a circle.</param>
        </member>
        <member name="M:CADImport.CADConverter.OnInsert(System.Object)">
            <summary>
            Raises an <see cref="E:CADImport.CADConverter.OnInsertEvent">OnInsertEvent</see>.
            </summary>
            <param name="Sender">An object of the <see cref="T:CADImport.CADInsert">CADInsert</see> class or its descendants 
            that initiates an insertion event.</param>
        </member>
        <member name="M:CADImport.CADConverter.OnResolveXRef(CADImport.CADXRef,System.String,System.Boolean@)">
            <summary>
            Raises an <see cref="E:CADImport.CADConverter.OnResolveXRefEvent">OnResolveXRefEvent</see>.
            </summary>
        </member>
        <member name="M:CADImport.CADConverter.OnViewPort(System.Object)">
            <summary>
            Raises an <see cref="E:CADImport.CADConverter.OnViewPortEvent">OnViewPortEvent</see>.
            </summary>
            <param name="Sender">A <see cref="T:CADImport.CADViewPort">CADViewPort</see> object that initiates an <see cref="E:CADImport.CADConverter.OnViewPortEvent">OnViewPortEvent</see>.</param>
        </member>
        <member name="M:CADImport.CADConverter.OnXRef(System.Object)">
            <summary>
            Raises an <see cref="E:CADImport.CADConverter.OnXRefEvent">OnXRefEvent</see>.
            </summary>
            <param name="Sender">A <see cref="T:CADImport.CADXRef">CADXRef</see> object that initiates an <see cref="E:CADImport.CADConverter.OnXRefEvent">OnXRefEvent</see>.</param>
        </member>
        <member name="M:CADImport.CADConverter.OnBeforeRead(System.Object)">
            <summary>
            Raises a <see cref="E:CADImport.CADConverter.BeforeReadEvent">BeforeReadEvent</see>.
            </summary>
            <param name="Sender">A <see cref="T:CADImport.CADConverter">CADConverter</see> object that initiates a <see cref="E:CADImport.CADConverter.BeforeReadEvent">BeforeReadEvent</see>.</param>
        </member>
        <member name="M:CADImport.CADConverter.OnAfterRead(System.Object)">
            <summary>
            Raises a <see cref="E:CADImport.CADConverter.AfterReadEvent">AfterReadEvent</see>.
            </summary>
            <param name="Sender">A <see cref="T:CADImport.CADConverter">CADConverter</see> object that initiates a <see cref="E:CADImport.CADConverter.AfterReadEvent">AfterReadEvent</see>.</param>
        </member>
        <member name="M:CADImport.CADConverter.OnCreate(System.Object)">
            <summary>
            Raises an <see cref="E:CADImport.CADConverter.OnCreateEvent">OnCreateEvent</see>.
            </summary>
            <param name="Sender">A CAD entity that initiates an <see cref="E:CADImport.CADConverter.OnCreateEvent">OnCreateEvent</see>.</param>
        </member>
        <member name="M:CADImport.CADConverter.Initialize">
            <summary>
            Initializes a main section of the loaded CAD file.
            </summary>
            <remarks>A main section is specified by the <see cref="P:CADImport.CADConverter.Main">Main</see> property.</remarks>
        </member>
        <member name="M:CADImport.CADConverter.InitializeSections">
            <summary>
            This method makes necessary initializations for sections. Call it when creating CAD object manually.
            </summary>
        </member>
        <member name="M:CADImport.CADConverter.GetLayerNames(System.Collections.ArrayList,System.Boolean,System.Boolean)">
            <summary>
            Adds the names of all layers from the loaded CAD file to the specified list.
            </summary>
            <param name="S">An <see cref="T:System.Collections.ArrayList">ArrayList</see> where the names of layers will be added.</param>
            <param name="DoClear">A value indicating whether to clear the 
            specified <see cref="T:System.Collections.ArrayList">ArrayList</see> before adding the names of layers to it.</param>
            <param name="IncludeUnused">A value indicating whether to include the names of layers that don't 
            contain any entities.</param>
        </member>
        <member name="M:CADImport.CADConverter.LayerByName(System.String)">
            <summary>
            Returns a layer with the specified name.
            </summary>
            <param name="AName">A name of the layer to return.</param>
            <returns>A <see cref="T:CADImport.CADLayer">CADLayer</see> object that has the specified name.</returns>
            <remarks>This method searches a layer with the specified name among the layers from the loaded 
            CAD file. If it doesn't find such layer it creates a <see cref="T:CADImport.CADLayer">CADLayer</see> object 
            that has the specified name.</remarks>
        </member>
        <member name="M:CADImport.CADConverter.StyleByName(System.String)">
            <summary>
            Returns a style with the specified name.
            </summary>
            <param name="aName">A name of the style to return.</param>
            <returns>A <see cref="T:CADImport.CADStyle">CADStyle</see> object that has the specified name.</returns>
            <remarks>This method searches a style with the specified name among the styles from the loaded 
            CAD file. If it doesn't find such style it creates a <see cref="T:CADImport.CADStyle">CADStyle</see> object 
            that has the specified name.</remarks>
        </member>
        <member name="M:CADImport.CADConverter.Iterate(CADImport.CADEntityProc,CADImport.CADEntityProc,CADImport.CADIterate)">
            <summary>
            Invokes a method referenced by the specified delegate for each loaded entity.
            </summary>
            <param name="convProc">A <see cref="T:CADImport.CADEntityProc">CADEntityProc</see> delegate 
            that specifies a method to be invoked.</param>
            <param name="finishProc">A <see cref="T:CADImport.CADEntityProc">CADEntityProc</see> delegate 
            that specifies a method to be finished</param>
            <param name="Params">A <see cref="T:CADImport.CADIterate">CADIterate</see> object that provides 
            parameters used for setting the <see cref="T:CADImport.CADConverter">CADConverter</see> before 
            invoking the specified method for each loaded entity.</param>
            <remarks>
            This method invokes the referenced (by the delegate) method for each existing entity including block  
            references (inserts) of any nesting level. In other words, this method 
            converts CAD tree structure to a linear sequence of entities. It is a basis for different operations 
            such as drawing or importing the CAD files. Before invoking a referenced procedure it is necessary to 
            set the <see cref="F:CADImport.CADIterate.matrix">matrix</see>. This matrix changes automatically on 
            entering a block reference and restores when exiting from it. An <see cref="F:CADImport.CADIterate.additional">additional</see> 
            is a user defined parameter. All other <see cref="T:CADImport.CADIterate">CADIterate</see> fields are initialized 
            by the <b>Iterate</b> method.
            </remarks>
        </member>
        <member name="M:CADImport.CADConverter.IntToColor(System.Int32)">
            <summary>
            Converts an <b>int</b> value to the <see cref="T:System.Drawing.Color">Color</see> object.
            </summary>
            <param name="Value">An <b>int</b> value to convert.</param>
        </member>
        <member name="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">
            <summary>
            Loads the specified entity to the <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="E">A <see cref="T:CADImport.CADEntity">CADEntity</see> to be loaded.</param>
        </member>
        <member name="M:CADImport.CADConverter.DoExtents">
            <summary>
            Sets extents of the CAD drawing.
            </summary>
        </member>
        <member name="M:CADImport.CADConverter.CleaningLayouts(System.Boolean)">
            <summary>
            Deletes all empty instances of the <see cref="T:CADImport.CADLayout">CADLayout</see> class with the 
            exception of the Model_Space layout.
            </summary>
            <param name="ADeletePSpace">A value indicating whether a Paper_Space layout must be deleted. <b>true</b>, 
            if a Paper_Space layout has to be deleted; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:CADImport.CADConverter.LinesByName(System.String)">
            <summary>
            Returns a description of linetype with the specified name.
            </summary>
            <param name="AName">A <b>string</b> containing a name of the linetype to be returned.</param>
            <returns>A <see cref="T:CADImport.SGLines">sgLines</see> object representing a found linetype or <b>null</b> 
            if the linetype was not found.</returns>
        </member>
        <member name="M:CADImport.CADConverter.LTypeByName(System.String)">
            <summary>
            Returns a linetype with the specified name.
            </summary>
            <param name="AName">A <b>string</b> containing a name of the linetype to be returned.</param>
            <returns>A <see cref="T:CADImport.CADLineType">CADLineType</see> object that has the specified name or <b>null</b> 
            if the linetype with such name was not found.</returns>
        </member>
        <member name="M:CADImport.CADConverter.DimensionStyleByName(System.String)">
            <summary>
            Searches a dimension style with the specified name among the dimension styles from the loaded CAD file.
            </summary>
            <param name="AName">A name of the dimension style to search.</param>
            <returns>A <see cref="T:CADImport.CADDimensionStyle">CADDimensionStyle</see> object that has the specified name.</returns>
            <remarks> If it doesn't find such dimension style it creates a <see cref="T:CADImport.CADDimensionStyle">CADDimensionStyle</see> object 
            that has the specified name.</remarks>
        </member>
        <member name="M:CADImport.CADConverter.AddDrawingLayout(System.Object,System.String)">
            <summary>
            Creates a <see cref="T:CADImport.CADLayout">CADLayout</see> with the specified name 
            and adds this layout to the specified CAD image.
            </summary>
            <param name="ACADImage">An <see cref="T:System.Object">Object</see> that represents a CAD image 
            where the newly created layout will be added.</param>
            <param name="AName">A <b>string</b> containing a name for the newly created layout.</param>
        </member>
        <member name="M:CADImport.CADConverter.AddLayout(CADImport.CADLayout)">
            <summary>
            Adds object of the <see cref="T:CADImport.CADLayout">CADLayout</see> class.
            </summary>
            <param name="layout">Object of the <see cref="T:CADImport.CADLayout">CADLayout</see> class.</param>
        </member>
        <member name="M:CADImport.CADConverter.AddXRef(CADImport.CADImage,System.String,CADImport.DPoint,CADImport.DPoint,System.Single)">
            <summary>
            Creates a <see cref="T:CADImport.CADXRef">CADXRef</see> object with the specified name and adds this external reference to the specified CAD image.
            </summary>
            <param name="ACADFile">A <see cref="T:CADImport.CADImage">CADImage</see> where the created 
            external reference will be added.</param>
            <param name="AName">A <b>string</b> containing a name for the newly created external reference.</param>
            <param name="APos">A <see cref="T:CADImport.DPoint">DPoint</see> object representing an insertion point 
            for the newly created external reference.</param>
            <param name="AScale">A <see cref="T:CADImport.DPoint">DPoint</see> object representing a scale 
            for the newly created external reference.</param>
            <param name="Rotation">A rotation angle for the newly created external reference.</param>
        </member>
        <member name="M:CADImport.CADConverter.AddXRefEx(CADImport.CADImage,System.String,CADImport.DPoint,CADImport.DPoint,System.Single,CADImport.CADLayout)">
            <summary>
            Creates a <see cref="T:CADImport.CADXRef">CADXRef</see> object with the specified name 
            and adds this external reference to the specified CAD image.
            </summary>
            <param name="ACADFile">A <see cref="T:CADImport.CADImage">CADImage</see> where the created 
            external reference will be added.</param>
            <param name="AName">A <b>string</b> containing a name for the newly created external reference.</param>
            <param name="APos">A <see cref="T:CADImport.DPoint">DPoint</see> object representing an insertion point 
            for the newly created external reference.</param>
            <param name="AScale">A <see cref="T:CADImport.DPoint">DPoint</see> object representing a scale 
            for the newly created external reference.</param>
            <param name="Rotation">A rotation angle for the newly created external reference.</param>
            <param name="layout">The <see cref="T:CADImport.CADLayout">layout</see> which the XRef entity will be added to.</param>
            <remarks>The created external reference is added to the default layout.</remarks>
        </member>
        <member name="M:CADImport.CADConverter.SortEntities">
            <summary>
            Sorts CAD entities by their handles according to the <see cref="T:CADImport.CADSortEntsTable">CADSortEntsTable</see> 
            loaded from the CAD file.
            </summary>
        </member>
        <member name="P:CADImport.CADConverter.SHXSettings">
            <summary>
            Gets SHX fonts settings.
            </summary>
        </member>
        <member name="E:CADImport.CADConverter.AfterReadEvent">
            <summary>
            Occurs after reading a DXF file.
            </summary>
            <remarks>
            <p>Use an <b>AfterReadEvent</b> handler to take specific actions immediately after the 
            <see cref="T:CADImport.CADConverter">CADConverter</see> has read a DXF file.</p> 
            <p><b>AfterReadEvent</b> is generated by calls to the <see cref="M:CADImport.CADImage.LoadFromFile(System.String)">Load</see> method.</p>
            </remarks>
        </member>
        <member name="E:CADImport.CADConverter.BeforeReadEvent">
            <summary>
            Occurs before reading a DXF file.
            </summary>
            <remarks>
            This event can be used for creating a progress bar that shows a progress of loading CAD entities.
            </remarks>
        </member>
        <member name="P:CADImport.CADConverter.IsHideWipeouts">
            <summary>
            Gets or sets a border visibility of all Wipeout objects in CAD file
            </summary>
        </member>
        <member name="E:CADImport.CADConverter.OnCreateEvent">
            <summary>
            Occurs when an instance of each loaded CAD entity is created.
            </summary>
        </member>
        <member name="E:CADImport.CADConverter.OnInsertEvent">
            <summary>
            Occurs when an object of the <see cref="T:CADImport.CADInsert">CADInsert</see> class or its descendants inserted into a CAD image.
            </summary>
        </member>
        <member name="E:CADImport.CADConverter.OnResolveXRefEvent">
            <summary>
            Occurs when xref filename not found.
            </summary>
        </member>
        <member name="E:CADImport.CADConverter.OnViewPortEvent">
            <summary>
            Occurs when loading a <see cref="T:CADImport.CADInsert">CADViewPort</see> object into a CAD image is complete.
            </summary>
        </member>
        <member name="P:CADImport.CADConverter.MaxHandle">
            <summary>
            Gets or sets a maximal handle of a primitive
            </summary>
        </member>
        <member name="P:CADImport.CADConverter.HeadStruct">
            <summary>
            Gets or sets <see cref="T:CADImport.HeadVarStruct">HeadVarStruct</see> object
            containing settings of CAD file
            </summary>
        </member>
        <member name="P:CADImport.CADConverter.AllArcsAsCurves">
            <summary>
            Gets or sets a value indicating how arcs are drawn.
            </summary>
            <value><b>true</b> if arcs are drawn by means of GDI+; <b>false</b>, if arcs  
            are drawn as polylines.</value>
        </member>
        <member name="P:CADImport.CADConverter.Block">
            <summary>
            Gets a block to be drawn at spesified layout.
            </summary>
            <value>A <see cref="T:CADImport.CADBlock">CADBlock</see> containing the entities </value>
        </member>
        <member name="P:CADImport.CADConverter.Angle">
            <summary>
            Gets or sets a current rotation angle of the active VPort.
            </summary>
        </member>
        <member name="P:CADImport.CADConverter.AutoInsert">
            <summary>
            Gets or sets a value indicating a way of processing CAD blocks.
            </summary>
            <value><b>true</b> if CAD blocks are processed without any conditions; otherwise, <b>false</b>.</value>
            <remarks>If this property is set to <b>true</b>, the <see cref="T:CADImport.CADEntityProc">CADEntityProc</see> delegate 
            does not reference any methods for the <see cref="T:CADImport.CADInsert">CADInsert</see> object when calling 
            the <see cref="M:CADImport.CADConverter.Iterate(CADImport.CADEntityProc,CADImport.CADEntityProc,CADImport.CADIterate)">Iterate</see> method.</remarks>
        </member>
        <member name="P:CADImport.CADConverter.Blocks">
            <summary>
            Gets a collection of blocks contained in the loaded CAD file.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> containing blocks from the loaded CAD file.</value>
        </member>
        <member name="P:CADImport.CADConverter.VPort">
            <summary>
            Gets or sets a viewing direction for the ActiveVPort.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object that specifies a viewing direction for the active VPort.</value>
        </member>
        <member name="P:CADImport.CADConverter.VPorts">
            <summary>
            Gets a list of <see cref="T:CADImport.CADVPort">CADVPort</see> objects contained in CAD file
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> containing 
            the layouts in the loaded CAD file.</value>
        </member>
        <member name="P:CADImport.CADConverter.CodePage">
            <summary>
            Gets or sets a number that identifies the encoding used in the loaded CAD file.
            </summary>
        </member>
        <member name="P:CADImport.CADConverter.DefaultLayoutIndex">
            <summary>
            Gets or sets an index of layout that will be shown after opening a CAD file.
            </summary>
        </member>
        <member name="P:CADImport.CADConverter.DWGPROPS">
            <summary>
            A set of properties for an AutoCAD drawing
            </summary>
        </member>
        <member name="P:CADImport.CADConverter.DimensionStyles">
            <summary>
            Gets a collection of styles used for drawing the dimensions in the loaded CAD file.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> containing 
            the dimension styles used in the loaded CAD file.</value>
        </member>
        <member name="P:CADImport.CADConverter.IsCrossoverMatrix">
            <summary>
            Gets or sets a value indicating an orientation of the used coordinate system.
            </summary>
            <value><b>true</b> if the zero point is located in the bottom-left corner; <b>false</b>, 
            if the zero point is located in the top-left corner.</value>
        </member>
        <member name="P:CADImport.CADConverter.IsLoadXrefs">
            <summary>
            Gets or sets a value indicating whether XRefs to be loaded while opening a CAD file.
            </summary>
            <value><b>true</b> if XRefs are to be loaded; <b>false</b>, if XRefs are not to be loaded.</value>
        </member>
        <member name="P:CADImport.CADConverter.HasActiveVPort">
            <summary>
            Gets or sets a value idicating whether a loaded CAD file has an active VPort.
            </summary>
            <value><b>true</b> if CAD file has an active VPort; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADConverter.Entities">
            <summary>
            Gets a collection of entities contained in the loaded CAD file.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> containing 
            the entities in the loaded CAD file.</value>
        </member>
        <member name="P:CADImport.CADConverter.Extents">
            <summary>
            Gets or sets extents of the loaded CAD file.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing extents of a CAD file.</value>
        </member>
        <member name="P:CADImport.CADConverter.Is3D">
            <summary>
            Checks whether a loaded CAD image is three-dimensional.
            </summary>
            <value><b>true</b> if the loaded CAD image is three-dimensional; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADConverter.Layers">
            <summary>
            Gets a collection of layers contained in the loaded CAD file.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> containing 
            the layers in the loaded CAD file.</value>
        </member>
        <member name="P:CADImport.CADConverter.Layouts">
            <summary>
            Gets a collection of layouts contained in the loaded CAD file.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> containing 
            the layouts in the loaded CAD file.</value>
        </member>
        <member name="P:CADImport.CADConverter.ImageDefs">
            <summary>
            Gets a collection of raster images contained in the loaded CAD file.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> containing 
            the raster images in the loaded CAD file.</value>
        </member>
        <member name="P:CADImport.CADConverter.LayoutsCount">
            <summary>
            Gets a quantity of layouts contained in the loaded CAD file.
            </summary>
        </member>
        <member name="P:CADImport.CADConverter.LScale">
            <summary>
            Gets or sets a scale for all linetypes in the loaded CAD file.
            </summary>
        </member>
        <member name="P:CADImport.CADConverter.LTypes">
            <summary>
            Gets a collection of linetypes contained in the loaded CAD file.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> containing 
            linetypes in the loaded CAD file.</value>
        </member>
        <member name="P:CADImport.CADConverter.Main">
            <summary>
            Gets a main section of the loaded CAD file.
            </summary>
            <remarks>A main section is the section that contains other sections of the CAD file.</remarks>
        </member>
        <member name="P:CADImport.CADConverter.NumberOfPartsInSpline">
            <summary>
            Gets or sets a quantity of segments to be used to draw a spline.
            </summary>
        </member>
        <member name="P:CADImport.CADConverter.NumberOfPartsInCircle">
            <summary>
            Gets or sets a quantity of segments to be used to draw a circle.
            </summary>
        </member>
        <member name="P:CADImport.CADConverter.Params">
            <summary>
            Gets or sets parameters to be processed by 
            the <see cref="M:CADImport.CADConverter.Iterate(CADImport.CADEntityProc,CADImport.CADEntityProc,CADImport.CADIterate)">Iterate</see> method.
            </summary>
            <value>A <see cref="T:CADImport.CADIterate">CADIterate</see> object that contains the parameters.</value>
        </member>
        <member name="P:CADImport.CADConverter.PointDisplayMode">
            <summary>
            Gets or sets a value indicating a mode of displaying the <see cref="T:CADImport.CADPoint">CADPoint</see> 
            entities in the loaded CAD file.
            </summary>
            <value>zero if <see cref="T:CADImport.CADPoint">CADPoint</see>s are visible; 
            1 if <see cref="T:CADImport.CADPoint">CADPoint</see>s are invisible.</value>
        </member>
        <member name="P:CADImport.CADConverter.Source">
            <summary>
            Gets or sets a path to the loaded file.
            </summary>
            <value>A <b>string</b> containing a path to the loaded file.</value>
        </member>
        <member name="P:CADImport.CADConverter.Styles">
            <summary>
            Gets a collection of styles contained in the loaded CAD file.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> containing 
            styles in the loaded CAD file.</value>
        </member>
        <member name="P:CADImport.CADConverter.Tables">
            <summary>
            Gets a collection of tables contained in the loaded CAD file.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> containing 
            tables in the loaded CAD file.</value>
            <remarks>The returned collection realizes the indexed access to all tables described in 
            section <b>TABLES</b> of a DXF-file or loaded from other supported CAD files.</remarks>
        </member>
        <member name="P:CADImport.CADConverter.ViewPortCut">
            <summary>
            Gets a value indicating whether a loaded CAD file appears inside a viewport.
            </summary>
            <value><b>true</b> if a loaded CAD file appears inside a viewport; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADConverter.XRefs">
            <summary>
            Gets a collection of external references contained in the loaded CAD file.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> containing 
            the external references in the loaded CAD file.</value>
        </member>
        <member name="P:CADImport.CADConverter.SHXFonts">
            <summary>
            Gets a list of SHX fonts for the loaded CAD file.
            </summary>
            <remarks>SHX fonts search occurs after loading a CAD file.</remarks>
        </member>
        <member name="P:CADImport.CADConverter.ActiveVPort">
            <summary>
            Gets or sets active <see cref="T:CADImport.CADVPort">CADVPort</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADConverter.ModelLayout">
            <summary>
            Gets <see cref="T:CADImport.CADLayout">CADLayout</see> object of model
            </summary>
        </member>
        <member name="T:CADImport.CADEntity">
            <summary>
            Represents a base class for all entities in a CAD file.
            </summary>
            <remarks><b>CADEntity</b> provides a basic functionality for its descendants.</remarks>
        </member>
        <member name="M:CADImport.CADEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADEntity">CADEntity</see> class.
            </summary>
        </member>
        <member name="F:CADImport.CADEntity.DrawEvent">
            <summary>
            Occurs when the <see cref="T:CADImport.CADEntity">CADEntity</see> is drawn in the CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADEntity.OnDraw(System.Object)">
            <summary>
            Raises a <see cref="F:CADImport.CADEntity.DrawEvent">DrawEvent</see>.
            </summary>
            <param name="Sender">A CAD entity that initiates a <see cref="F:CADImport.CADEntity.DrawEvent">DrawEvent</see>.</param>
        </member>
        <member name="M:CADImport.CADEntity.SetLType(CADImport.CADEntity)">
            <summary>
            Sets a linetype for this <see cref="T:CADImport.CADEntity">CADEntity</see>.
            </summary>
            <param name="Value">A <see cref="T:CADImport.CADEntity">CADEntity</see> representing a linetype to be set.</param>
        </member>
        <member name="M:CADImport.CADEntity.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADEntity.GetBoxPoints(CADImport.FPointProc,System.Boolean)">
            <summary>
            Checks if the <see cref="T:CADImport.CADEntity">CADEntity</see> must be drawn during a drawing cycle.
            </summary>
            <param name="Proc">A <see cref="T:CADImport.FPointProc">FPointProc</see> delegate that references 
            methods for getting <see cref="T:CADImport.CADEntity">CADEntity</see>'s points.</param>
            <param name="Full">A boolean value indicating whether the method realizes full or reduced checking. 
            <b>true</b> if checking is full, <b>false</b> if checking is reduced.</param>
            <returns><b>true</b> if all points passed to the referenced method are real entity's points; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADEntity.AddEntity(CADImport.CADEntity)">
            <summary>
            Virtual method. Redefined in descendant classes.
            </summary>
        </member>
        <member name="M:CADImport.CADEntity.ChangeEntity(CADImport.DPoint[],CADImport.CADConverter)">
            <summary>
            Edits current entity by specified points.
            </summary>
            <param name="pts">Points, which are set for entity</param>
            <param name="conv"><see cref="T:CADImport.CADConverter">CADConverter</see> object</param>
            <returns>Returns <b>true</b> if the object was edited</returns>
        </member>
        <member name="M:CADImport.CADEntity.ChangeEntity(System.Double,System.Double,System.Double,CADImport.CADConverter)">
            <summary>
            Edits current entity by specified offset
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="dz">Z axis offset</param>
            <param name="conv"><see cref="T:CADImport.CADConverter">CADConverter</see> object for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see>
             of entity parameters</param>
            <returns>Returns <b>true</b> if the object was edited</returns>
        </member>
        <member name="M:CADImport.CADEntity.DrawEntityTrace(System.Int32,System.Int32,CADImport.CADImage,System.Windows.Forms.Control)">
            <summary>
            Implements drawing of entity with specified offset to specified 
            <see cref="T:System.Windows.Forms.Control">Control</see>
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="img"><see cref="T:CADImport.CADImage">CADImage</see> object for 
            <see cref="M:CADImport.CADImage.GetPoint(CADImport.DPoint)">getting display coordinates</see> of the entity</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control">Control</see> for drawing of <see cref="T:CADImport.CADEntity">CADEntity</see></param>
        </member>
        <member name="M:CADImport.CADEntity.MakeMarkers(CADImport.CADCollection{CADImport.Professional.Marker})">
            <summary>
            Virtual method. Redefined in descendant classes.
            </summary>
        </member>
        <member name="M:CADImport.CADEntity.Loaded(CADImport.CADConverter)">
            <summary>
            Virtual method. Redefined in descendant classes.
            </summary>
        </member>
        <member name="M:CADImport.CADEntity.Clone(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="ent">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADEntity.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:CADImport.CADEntity">CADEntity</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADEntity.Selected">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:CADImport.CADEntity">CADEntity</see> is selected.
            </summary>
        </member>
        <member name="P:CADImport.CADEntity.EntType">
            <summary>
            The entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration.
            </summary>
        </member>
        <member name="P:CADImport.CADEntity.LineWeight">
            <summary>
            Gets or sets a thickness of lines for this <see cref="T:CADImport.CADEntity">CADEntity</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADEntity.Complex">
            <summary>
            Represents a number that uniquely identifies a <see cref="T:CADImport.CADEntity">CADEntity</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADEntity.Box">
            <summary>
            Gets or sets a three-dimensional box that encloses the <see cref="T:CADImport.CADEntity">CADEntity</see>.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for the <see cref="T:CADImport.CADEntity">CADEntity</see>.</value>
        </member>
        <member name="P:CADImport.CADEntity.Count">
            <summary>
            Gets a number of entities contained in the given <see cref="T:CADImport.CADEntity">CADEntity</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADEntity.Color">
            <summary>
            Gets or sets a color for the given <see cref="T:CADImport.CADEntity">CADEntity</see>.
            </summary>
            <value>A <see cref="T:System.Drawing.Color">Color</see> object representing a color of 
            the <see cref="T:CADImport.CADEntity">CADEntity</see>.</value>
        </member>
        <member name="P:CADImport.CADEntity.Entities">
            <summary>
            Gets a collection of all entities owned by this <see cref="T:CADImport.CADEntity">CADEntity</see>.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> of entities belonging 
            to this <see cref="T:CADImport.CADEntity">CADEntity</see>.</value>
        </member>
        <member name="P:CADImport.CADEntity.Thickness">
            <summary>
            Gets or sets a thickness of lines used for drawing this <see cref="T:CADImport.CADEntity">CADEntity</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADEntity.EntName">
            <summary>
            Gets a name of the <see cref="T:CADImport.CADEntity">CADEntity</see>.
            </summary>
            <value>A string containing a name of the <see cref="T:CADImport.CADEntity">CADEntity</see>.</value>
        </member>
        <member name="P:CADImport.CADEntity.Layer">
            <summary>
            Gets or sets a layer containing this <see cref="T:CADImport.CADEntity">CADEntity</see>.
            </summary>
            <value>A <see cref="T:CADImport.CADLayer">CADLayer</see> containing this <see cref="T:CADImport.CADEntity">CADEntity</see>.</value>
        </member>
        <member name="P:CADImport.CADEntity.Visibility">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:CADImport.CADEntity">CADEntity</see> is visible.
            </summary>
            <value><b>true</b> if a <see cref="T:CADImport.CADEntity">CADEntity</see> is visible; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADEntity.Handle">
            <summary>
            Gets a <see cref="T:CADImport.CADEntity">CADEntity</see> handle.
            </summary>
            <value>A number that uniquely identifies a <see cref="T:CADImport.CADEntity">CADEntity</see>.</value>
        </member>
        <member name="P:CADImport.CADEntity.LineType">
            <summary>
            Gets or sets a linetype of the <see cref="T:CADImport.CADEntity">CADEntity</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADEntity.LineTypeScale">
            <summary>
            Gets or sets a value equal to a quantity of linetype elements per unit of its length.
            </summary>
        </member>
        <member name="T:CADImport.CADObjectEntity">
            <summary>
            Provides a common functionality for all CAD entities, visual and not visual.
            </summary>
            <remarks>The examples of not visual CAD entities are <see cref="T:CADImport.CADLayer">CADLayer</see> and <see cref="T:CADImport.CADLayout">CADLayout</see>.</remarks>
        </member>
        <member name="F:CADImport.CADObjectEntity.converter">
            <summary>
            A <see cref="T:CADImport.CADConverter">CADConverter</see> associated with the given <see cref="T:CADImport.CADObjectEntity">CADObjectEntity</see>.
            </summary>
        </member>
        <member name="M:CADImport.CADObjectEntity.#ctor">
            <summary>
            Initializes an object of the <see cref="T:CADImport.CADObjectEntity">CADObjectEntity</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADObjectEntity.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CADObjectEntity.Converter">
            <summary>
            Gets or sets a <see cref="T:CADImport.CADConverter">CADConverter</see> associated with this <see cref="T:CADImport.CADObjectEntity">CADObjectEntity</see>.
            </summary>
            <value>An object of the <see cref="T:CADImport.CADConverter">CADConverter</see> class.</value>
        </member>
        <member name="T:CADImport.CADPlotEntity">
            <summary>
            Provides a common functionality for all visual CAD entities.
            </summary>
        </member>
        <member name="F:CADImport.CADPlotEntity.layer">
            <summary>
             A layer this <see cref="T:CADImport.CADPlotEntity">CADPlotEntity</see> belongs to.
            </summary>
        </member>
        <member name="F:CADImport.CADPlotEntity.visibility">
            <summary>
            A value indicating whether a <see cref="T:CADImport.CADPlotEntity">CADPlotEntity</see> is visible.
            </summary>
        </member>
        <member name="F:CADImport.CADPlotEntity.lineTypeScale">
            <summary>
            A value equal to a quantity of linetype elements per unit of its length.
            </summary>
        </member>
        <member name="M:CADImport.CADPlotEntity.#ctor">
            <summary>
            Initializes an object of the <see cref="T:CADImport.CADPlotEntity">CADPlotEntity</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADPlotEntity.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CADPlotEntity.LineTypeScale">
            <summary>
            Gets or sets a value equal to a quantity of linetype elements per unit of its length.
            </summary>
            <value>A <b>float</b> value indicating a quantity of linetype elements per unit of its length.</value>
            <remarks>The examples of linetype elements are dots and dashes.</remarks>
        </member>
        <member name="P:CADImport.CADPlotEntity.Layer">
            <summary>
            Gets or sets a layer this <see cref="T:CADImport.CADPlotEntity">CADPlotEntity</see> belongs to.
            </summary>
            <value>A <see cref="T:CADImport.CADLayer">CADlayer</see> this <see cref="T:CADImport.CADPlotEntity">CADPlotEntity</see> belongs to.</value>
        </member>
        <member name="P:CADImport.CADPlotEntity.Visible">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:CADImport.CADPlotEntity">CADPlotEntity</see> is visible 
            taking into account a state of the layer this <see cref="T:CADImport.CADPlotEntity">CADPlotEntity</see> belongs to.
            </summary>
            <value><b>true</b> if a <see cref="T:CADImport.CADPlotEntity">CADPlotEntity</see> is visible; otherwise, <b>false</b>.</value>
            <remarks>If a layer is frozen the CAD entities it contains will be invisible, even if <b>visible</b> propertiy is <b>true</b>.</remarks>
        </member>
        <member name="P:CADImport.CADPlotEntity.Visibility">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:CADImport.CADPlotEntity">CADPlotEntity</see> is visible.
            </summary>
            <value><b>true</b> if a <see cref="T:CADImport.CADPlotEntity">CADPlotEntity</see> is visible; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:CADImport.CADPenEntity">
            <summary>
             Represents a base class for all CAD entities that use <see cref="T:System.Drawing.Pen">Pen</see> object for its drawing.
            </summary>
        </member>
        <member name="M:CADImport.CADPenEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADPenEntity">CADPenEntity</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADPenEntity.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CADPenEntity.Width">
            <summary>
            Gets or sets a line width of <see cref="T:CADImport.CADPenEntity">CADPenEntity</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADPenEntity.DashStyle">
            <summary>
            Gets or sets <see cref="T:System.Drawing.Drawing2D.DashStyle"/> for <see cref="T:CADImport.CADPenEntity"/> object
            </summary>
        </member>
        <member name="P:CADImport.CADPenEntity.Color">
            <summary>
            Gets or sets a color of the pen for this <see cref="T:CADImport.CADPenEntity">CADPenEntity</see>.
            </summary>
            <value>A <see cref="T:System.Drawing.Color">Color</see> for the <see cref="T:System.Drawing.Pen">Pen</see> used 
            for drawing this <see cref="T:CADImport.CADPenEntity">CADPenEntity</see>.</value>
        </member>
        <member name="T:CADImport.CADGroup">
            <summary>
             Represents a base class for all CAD entities that contain other CAD entities.
            </summary>
            <remarks>The examples of the <b>CADGroup</b> entities are <see cref="T:CADImport.CADBlock">CADBlock</see> and 
            <see cref="T:CADImport.CADPolyLine">CADPolyLine</see>.</remarks>
        </member>
        <member name="M:CADImport.CADGroup.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADGroup">CADGroup</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADGroup.Iterate(CADImport.CADConverter,CADImport.CADEntityProc,CADImport.CADEntityProc)">
            <summary>
            Invokes the referenced (by the specified delegate) method for each CAD entity 
            belonging to the given <see cref="T:CADImport.CADGroup">CADGroup</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> that has loaded the <see cref="T:CADImport.CADGroup">CADGroup</see>.</param>
            <param name="convProc">A <see cref="T:CADImport.CADEntityProc">CADEntityProc</see> delegate 
            that specifies a method to be invoked.</param>
            <param name="finishProc">A <see cref="T:CADImport.CADEntityProc">CADEntityProc</see> delegate 
            that specifies a method to be finished.</param>
        </member>
        <member name="M:CADImport.CADGroup.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADGroup">CADGroup</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADGroup">CADGroup</see> is loaded.</param>
        </member>
        <member name="M:CADImport.CADGroup.RemoveEntityByName(System.String)">
            <summary>
            Searches for an entity using its name then removes the entity.
            </summary>
            <param name="AName"></param>
        </member>
        <member name="P:CADImport.CADGroup.List">
            <summary>
            Gets a collection of entities included in the given <see cref="T:CADImport.CADGroup">CADGroup</see>.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> object representing 
            a collection of entities included in this <see cref="T:CADImport.CADGroup">CADGroup</see>.</value>
        </member>
        <member name="P:CADImport.CADGroup.Box">
            <summary>
            Gets a three-dimensional box that encloses this <see cref="T:CADImport.CADGroup">CADGroup</see>.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for this <see cref="T:CADImport.CADGroup">CADGroup</see>.</value>
        </member>
        <member name="P:CADImport.CADGroup.Count">
            <summary>
            Gets a number of entities contained in the specified <see cref="T:CADImport.CADGroup">CADGroup</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADGroup.Entities">
            <summary>
            Gets a collection of CAD entities belonging to the given <see cref="T:CADImport.CADGroup">CADGroup</see>.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> containing 
            CAD entities belonging to the given <see cref="T:CADImport.CADGroup">CADGroup</see>.</value>
        </member>
        <member name="T:CADImport.CADTable">
            <summary>
            Represents a table that contains data about CAD entities described in 
            the <b>Tables</b> section of a DXF file.
            </summary>
        </member>
        <member name="M:CADImport.CADTable.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADTable">CADTable</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADTable.AddEntity(CADImport.CADEntity)">
            <summary>
            Adds the specified entity to this <see cref="T:CADImport.CADTable">CADTable</see> object.
            </summary>
            <param name="E">A <see cref="T:CADImport.CADEntity">CADEntity</see> to add.</param>
            <returns>
            	<b>true</b> if a <see cref="T:CADImport.CADEntity">CADEntity</see> was added; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:CADImport.CADTable.Name">
            <summary>
            Gets or sets a <see cref="T:CADImport.CADTable">CADTable</see> name read from a CAD file.
            </summary>
            <value>A string containing a <see cref="T:CADImport.CADTable">CADTable</see> name read from a CAD file.</value>
        </member>
        <member name="P:CADImport.CADTable.EntName">
            <summary>
            Gets a name of the <see cref="T:CADImport.CADTable">CADTable</see>.
            </summary>
            <value>A string containing a name of the <see cref="T:CADImport.CADTable">CADTable</see>.</value>
        </member>
        <member name="T:CADImport.CADPolylineBase">
            <summary>
            Represents a base class for CADCircle,CADArc,CADPolyline,CADWipeout,CADSpline.
            </summary>
        </member>
        <member name="T:CADImport.CADPenLine">
            <summary>
             Represents a base class for the <see cref="T:CADImport.CADLine">CADLine</see> and <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see> classes.
            </summary>	
        </member>
        <member name="M:CADImport.CADPenLine.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADPenLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADPlotEntity">CADPenLine</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADPenLine.AddThick(CADImport.DRect@)">
            <summary>
            Increases a size of the rectangle that encloses the <see cref="T:CADImport.CADPenLine">CADPenLine</see> entity
            after increasing its thickness.
            </summary>
            <param name="R">A rectangle that encloses the <see cref="T:CADImport.CADPenLine">CADPenLine</see> entity.</param>
        </member>
        <member name="M:CADImport.CADPenLine.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADPenLine">CADPenLine</see> entity to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADPenLine">CADPenLine</see> 
            entity is loaded.</param>
        </member>
        <member name="M:CADImport.CADPenLine.SetLType(CADImport.CADEntity)">
            <summary>
            Sets a linetype for the <see cref="T:CADImport.CADPenLine">CADPenLine</see> entity.
            </summary>
            <param name="Value">A <see cref="T:CADImport.CADEntity">CADEntity</see> object representing a linetype.</param>
        </member>
        <member name="P:CADImport.CADPenLine.LineType">
            <summary>
            Gets or sets line type for this <see cref="T:CADImport.CADPenLine">CADPenLine</see> object.
            </summary>
        </member>
        <member name="P:CADImport.CADPenLine.LineTypeName">
            <summary>
            Gets a name of line type for this <see cref="T:CADImport.CADPenLine">CADPenLine</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADPenLine.Extrusion">
            <summary>
            Gets or sets a direction of axis Z belonging to the coordinate 
            system of this <see cref="T:CADImport.CADPenLine">CADPenLine</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object specifying a direction of axis Z 
            belonging to the coordinate system of this <see cref="T:CADImport.CADPenLine">CADPenLine</see> object.</value>
        </member>
        <member name="P:CADImport.CADPenLine.Lines">
            <summary>
            Gets or sets a type of the line for the <see cref="T:CADImport.CADPenLine">CADPenLine</see> entity.
            </summary>
            <value> An object of the <see cref="T:CADImport.SGLines">SGLines</see> class that specifies a type of the line.</value>
            <remarks>Obsolete. We recommend to use LineType property</remarks>
        </member>
        <member name="P:CADImport.CADPenLine.Point">
            <summary>
            Gets or sets a point that specifies a position of the <see cref="T:CADImport.CADPenLine">CADPenLine</see> entity in the CAD drawing.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object representing a point that specifies a position of 
            the <see cref="T:CADImport.CADPenLine">CADPenLine</see> entity in the CAD drawing.</value>
        </member>
        <member name="P:CADImport.CADPenLine.Thickness">
            <summary>
            Gets a thickness of lines used for drawing this <see cref="T:CADImport.CADPenLine">CADPenLine</see> entity.
            </summary>
        </member>
        <member name="P:CADImport.CADPenLine.ZThick">
            <summary>
            Gets or sets a line thickness measured along the axis Z for this <see cref="T:CADImport.CADPenLine">CADPenLine</see> entity.
            </summary>
        </member>
        <member name="P:CADImport.CADPenLine.LineWeight">
            <summary>
            Gets or sets a thickness of lines for this <see cref="T:CADImport.CADPenLine">CADPenLine</see> object.
            </summary>
        </member>
        <member name="P:CADImport.CADPenLine.Box">
            <summary>
            Gets a default three-dimensional box that encloses the <see cref="T:CADImport.CADPenLine">CADPenLine</see> entity.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for the <see cref="T:CADImport.CADPenLine">CADPenLine</see> entity.</value>
        </member>
        <member name="M:CADImport.CADPolylineBase.DoExtrusion">
            <summary>
            Transforms coordinates of each CADPolylineBase point from object coordinate system (OCS) to global coordinate system (GCS). 
            </summary>
        </member>
        <member name="M:CADImport.CADPolylineBase.CreateDottedList">
            <summary>
            Creates a list of points that specify the dots and dashes of the CADPolylineBase. 
            </summary>
        </member>
        <member name="M:CADImport.CADPolylineBase.ReloadPolyPoints">
            <summary>
            Loads the points belonging to the CADPolylineBase. 
            </summary>
        </member>
        <member name="M:CADImport.CADPolylineBase.GetBoxPoints(CADImport.FPointProc,System.Boolean)">
            <summary>
            Used in drawing cycle for fast checking whether the entity must be drawn
            </summary>
            <param name="func"></param>
            <param name="full"></param>
            <returns></returns>
        </member>
        <member name="M:CADImport.CADPolylineBase.AssignEntity(CADImport.CADEntity)">
            <summary>
            Assign given primitive to current primitive. 
            </summary>
            <param name="source">Given primitive for assignation.</param>
        </member>
        <member name="M:CADImport.CADPolylineBase.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADPolylineBase">CADPolylineBase</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADPolylineBase">CADPolylineBase</see> is loaded.</param>
        </member>
        <member name="M:CADImport.CADPolylineBase.ApplyBox">
            <summary>
            Calculates a box of the current entity.
            </summary>
        </member>
        <member name="M:CADImport.CADPolylineBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:CADImport.CADPolylineBase.Closed">
            <summary>
            Gets or sets a value indicating whether this CADPolyLine is closed.
            </summary>
        </member>
        <member name="P:CADImport.CADPolylineBase.DottedSingPoints">
            <summary>
            Gets a collection of points that specify the dots and dashes of the CADPolylineBase. 
            </summary>
        </member>
        <member name="P:CADImport.CADPolylineBase.PolyPoints">
            <summary>
            Gets a collection of points belonging to the polyline. 
            </summary>
        </member>
        <member name="P:CADImport.CADPolylineBase.Flags">
            <summary>
            Gets or sets a number that specifies an appearance of this CADPolylineBase entity.
            </summary>
        </member>
        <member name="P:CADImport.CADPolylineBase.IsPolyZThickness">
            <summary>
            Gets a value indicating whether a line thickness measured along the axis Z is equal to 0. 
            </summary>
        </member>
        <member name="P:CADImport.CADPolylineBase.Box">
            <summary>
            Return box of the current primitive.
            </summary>
        </member>
        <member name="P:CADImport.CADPolylineBase.IsMeshMClosed">
            <summary>
            Gets a value indicating whether a mesh represented by this CADPolylineBase is closed in the M direction. 
            </summary>
        </member>
        <member name="P:CADImport.CADPolylineBase.IsMeshNClosed">
            <summary>
            Gets a value indicating whether a mesh represented by this CADPolylineBase is closed in the N direction. 
            </summary>
        </member>
        <member name="P:CADImport.CADPolylineBase.IsPolygonMesh">
            <summary>
            Indicates that the current primitive is mesh.
            </summary>
            <returns><b>true</b> ,if primitive is mesh else <b>false</b> </returns>
        </member>
        <member name="P:CADImport.CADPolylineBase.Count">
            <summary>
            Gets a number of entities contained in the given CADPolylineBase.
            </summary>
        </member>
        <member name="T:CADImport.CADWipeout">
            <summary>
            Represents a wipeout entity.
            </summary>
            <remarks>Wipeout is an analog of the filling by the background color.</remarks>
        </member>
        <member name="M:CADImport.CADWipeout.ReloadPolyPoints">
            <summary>
            Loads the points belonging to the CADPolylineBase. 
            </summary>
        </member>
        <member name="M:CADImport.CADWipeout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADWipeout">CADWipeout</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADWipeout.AddPoint(System.Double,System.Double)">
            <summary>
            Adds a point with x,y coordinates into the clip points.
            </summary>
            <param name="x"> x coordinate</param>
            <param name="y"> y coordinate</param>
        </member>
        <member name="M:CADImport.CADWipeout.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity.
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CADWipeout.UVector">
             <summary>
             Gets or sets UVector.
             </summary>
             <remarks>
             This vector represent a width of the current wipeout along given direction.
            </remarks>
        </member>
        <member name="P:CADImport.CADWipeout.VVector">
             <summary>
             Gets or sets VVector.
             </summary>
             <remarks>
             This vector represent a height of the current wipeout along given direction.
            </remarks>
        </member>
        <member name="P:CADImport.CADWipeout.Size">
            <summary>
            Gets or sets scale vector.
            </summary>
            <remarks>
            Each component of this vector represents a scale of the current wipeout along corresponding direction.
            </remarks>
        </member>
        <member name="P:CADImport.CADWipeout.ClipPoints">
            <summary>
            Gets or sets a collection of the clipping points.
            </summary>
        </member>
        <member name="P:CADImport.CADWipeout.ClippingBoundaryType">
            <summary>
            Gets or sets a type of the clipping boundary of the current wipeout.
            </summary>
        </member>
        <member name="P:CADImport.CADWipeout.IsUseClipping">
            <summary>
            Indicates whether the clipping is used.
            </summary>
        </member>
        <member name="P:CADImport.CADWipeout.Height">
            <summary>
            Gets or sets a height of this wipeout.
            </summary>
        </member>
        <member name="P:CADImport.CADWipeout.Width">
            <summary>
            Gets or sets a width of the wipeout.
            </summary>
        </member>
        <member name="P:CADImport.CADWipeout.EntType">
            <summary>
            Gets a type of this <see cref="T:CADImport.CADWipeout">CADWipeout</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.CADLine">
            <summary>
            Represents a line in a CAD image.
            </summary>
            <remarks>A line in a CAD image is specified by two points, <see cref="P:CADImport.CADPenLine.Point">Point</see> and <see cref="P:CADImport.CADLine.Point1">Point1</see>.</remarks>
        </member>
        <member name="M:CADImport.CADLine.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADLine.ChangeEntity(CADImport.DPoint[],CADImport.CADConverter)">
            <summary>
            Changes current <see cref="T:CADImport.CADLine">CADLine</see> object by specified points
            </summary>
            <param name="pts">Points, which are set for an entity</param>
            <param name="conv"><see cref="T:CADImport.CADConverter">CADConverter</see> object
            for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see> of entity</param>
            <returns>Returns <b>true</b> if the entity was changed</returns>
        </member>
        <member name="M:CADImport.CADLine.ChangeEntity(System.Double,System.Double,System.Double,CADImport.CADConverter)">
            <summary>
            Changes current entity by specified offset
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="dz">Z axis offset</param>
            <param name="conv"><see cref="T:CADImport.CADConverter"/> object for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see>
             of entity parameters</param>
            <returns>Returns <b>true</b> if the object was edited</returns>
        </member>
        <member name="M:CADImport.CADLine.DrawEntityTrace(System.Int32,System.Int32,CADImport.CADImage,System.Windows.Forms.Control)">
            <summary>
            Implements drawing of an entity with specified offset to specified 
            <see cref="T:System.Windows.Forms.Control"/>
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="img"><see cref="T:CADImport.CADImage"/> object for 
            <see cref="M:CADImport.CADImage.GetPoint(CADImport.DPoint)">getting display coordinates</see> of the entity</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> for drawing of <see cref="T:CADImport.CADEntity"/></param>
        </member>
        <member name="M:CADImport.CADLine.MakeMarkers(CADImport.CADCollection{CADImport.Professional.Marker})">
            <summary>
            Creates <see cref="T:CADImport.Professional.Marker">markers</see> for <see cref="T:CADImport.CADLine"/> and places them
            to the specified collection
            </summary>
            <param name="collectMarker">A <see cref="T:System.Collections.ArrayList">collection</see> where to <see cref="T:CADImport.Professional.Marker">markers</see> are placed.</param>
        </member>
        <member name="M:CADImport.CADLine.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:CADImport.CADLine">CADLine</see> class.
             </summary>
             <example>
             <p>Creating a new <see cref="T:CADImport.CADLine">CADLine</see> object example:</p>
            <p>[C#]</p>
            <code>		
            	CreateNewImage();
            	CADLine ln1 = new CADLine();
            	ln1.Color = CADConst.clNone;
            	ln1.Point = GetRealPoint(100, 100);
            	ln1.Point1 = GetRealPoint(300, 300);
            	ln1.LineWeight = 0.1;						
            	ln1.Loaded(cadImage.Converter);			
            	ln1.Handle = ln1.GetHashCode();		
            	ln1.KeyEnt = ln1.Handle.ToString();			
            	cadImage.CurrentLayout.Entities.Add(ln1);
            	cadImage.Converter.OnCreate(ln1);		
            	EditorCADPictureBox.Invalidate();					
            	</code>
             </example>		
            	<seealso cref="T:CADImport.DPoint"/>		 
            	<seealso cref="T:CADImport.CADLine"/>		 
            	<seealso cref="T:CADImport.CADImage"/>		 
            	<seealso cref="F:CADImport.CADConst.clNone"/>		 
        </member>
        <member name="M:CADImport.CADLine.GetBoxPoints(CADImport.FPointProc,System.Boolean)">
            <summary>
            Checks if the <see cref="T:CADImport.CADLine">CADLine</see> must be drawn during a drawing cycle.
            </summary>
            <param name="Proc">A <see cref="T:CADImport.FPointProc">FPointProc</see> delegate that references a 
            method for getting points of the <see cref="T:CADImport.CADLine">CADLine</see>.</param>
            <param name="Full">A boolean value indicating whether the method realizes full or reduced checking. 
            <b>true</b> if checking is full, <b>false</b> if checking is reduced.</param>
            <returns><b>true</b> if all points passed to the referenced method are real entity's points; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADLine.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADLine">CADLine</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADLine">CADLine</see> 
            is loaded.</param>
        </member>
        <member name="P:CADImport.CADLine.Point1">
            <summary>
            Gets or sets a second end of the <see cref="T:CADImport.CADLine">CADLine</see>.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object that specifies a second end of the line.</value>
            <remarks>A first end of the line is specified by the <see cref="P:CADImport.CADPenLine.Point">Point</see> property.</remarks>
        </member>
        <member name="P:CADImport.CADLine.DottedSingPts">
            <summary>
            Gets a collection of points that specify the dots and dashes of the <see cref="T:CADImport.CADLine">CADLine</see>.
            </summary>
            <remarks>Each dot or each dash in the line is specified by two <see cref="T:CADImport.DPoint">DPoint</see>s.</remarks>
        </member>
        <member name="P:CADImport.CADLine.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADLine">CADLine</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADLine.Box">
            <summary>
            Gets a three-dimensional box that encloses the <see cref="T:CADImport.CADLine">CADLine</see> entity.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for the <see cref="T:CADImport.CADLine">CADLine</see>.</value>
        </member>
        <member name="T:CADImport.CADCircle">
            <summary>
            Represents a circle in a CAD image.
            </summary>
            <remarks>A circle in a CAD image is specified by the <see cref="P:CADImport.CADPenLine.Point">Point</see> and by the <see cref="P:CADImport.CADCircle.Radius">Radius</see>.</remarks>	
        </member>
        <member name="M:CADImport.CADCircle.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADCircle.ChangeEntity(CADImport.DPoint[],CADImport.CADConverter)">
            <summary>
            Changes current <see cref="T:CADImport.CADCircle">CADCircle</see> object by specified points
            </summary>
            <param name="pts">Points, which are set for entity</param>
            <param name="conv"><see cref="T:CADImport.CADConverter">CADConverter</see> object
            for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see> of entity</param>
            <returns>Returns <b>true</b> if the entity was changed</returns>
        </member>
        <member name="M:CADImport.CADCircle.ChangeEntity(System.Double,System.Double,System.Double,CADImport.CADConverter)">
            <summary>
            Edits current entity by specified offset
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="dz">Z axis offset</param>
            <param name="conv"><see cref="T:CADImport.CADConverter">CADConverter</see> object for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see>
             of entity parameters</param>
            <returns>Returns <b>true</b> if the entity was changed</returns>
        </member>
        <member name="M:CADImport.CADCircle.DrawEntityTrace(System.Int32,System.Int32,CADImport.CADImage,System.Windows.Forms.Control)">
            <summary>
            Implements drawing of entity with specified offset to specified 
            <see cref="T:System.Windows.Forms.Control">Control</see>
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="img"><see cref="T:CADImport.CADImage">CADImage</see> object for 
            <see cref="M:CADImport.CADImage.GetPoint(CADImport.DPoint)">getting display coordinates</see> of the entity</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control">Control</see> for drawing of <see cref="T:CADImport.CADEntity">Entity</see></param>
        </member>
        <member name="M:CADImport.CADCircle.MakeMarkers(CADImport.CADCollection{CADImport.Professional.Marker})">
            <summary>
            Creates <see cref="T:CADImport.Professional.Marker">markers</see> for <see cref="T:CADImport.CADCircle">CADCircle</see> and places them
            to the specified collection
            </summary>
            <param name="collectMarker">A <see cref="T:System.Collections.ArrayList">collection</see> where to <see cref="T:CADImport.Professional.Marker">markers</see> are placed.</param>
        </member>
        <member name="M:CADImport.CADCircle.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:CADImport.CADCircle">CADCircle</see> class.
             </summary>
             <example>
             <p>Creating a new <see cref="T:CADImport.CADCircle">CADCircle</see> object example:</p>
            <p>[C#]</p>
            <code>
            	CreateNewImage();
            	CADCircle circle = new CADCircle();
            	circle.Color = CADConst.clNone;			
            	circle.Point = GetRealPoint(300, 300);
            	circle.Radius = 10;			
            	circle.LineWeight = 0.1;						
            	circle.Loaded(cadImage.Converter);			
            	circle.Handle = circle.GetHashCode();		
            	circle.KeyEnt = circle.Handle.ToString();			
            	cadImage.CurrentLayout.Entities.Add(circle);
            	cadImage.Converter.OnCreate(circle);		
            	EditorCADPictureBox.Invalidate();						
            	</code>
             </example>		
            	<seealso cref="T:CADImport.DPoint"/>		 
            	<seealso cref="T:CADImport.CADCircle"/>		 
            	<seealso cref="T:CADImport.CADImage"/>		 
            	<seealso cref="F:CADImport.CADConst.clNone"/>	
        </member>
        <member name="M:CADImport.CADCircle.ReloadPolyPoints">
            <summary>
            Transforms coordinates of each point belonging to this <see cref="T:CADImport.CADCircle">CADCircle</see> 
            from object coordinate system (OCS) to global coordinate system (GCS).
            </summary>
        </member>
        <member name="M:CADImport.CADCircle.CreateDottedList">
            <summary>
            Creates a list of points that specify the dots and dashes of the <see cref="T:CADImport.CADCircle">CADCircle</see>.
            </summary>
            <remarks>Each dot or dash is specified by two points.</remarks>
        </member>
        <member name="M:CADImport.CADCircle.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADCircle">CADCircle</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADCircle">CADCircle</see> is loaded.</param>
        </member>
        <member name="P:CADImport.CADCircle.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADCircle">CADCircle</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADCircle.Radius">
            <summary>
            Gets or sets a radius for the <see cref="T:CADImport.CADCircle">CADCircle</see>.
            </summary>
        </member>
        <member name="T:CADImport.CADCustomVertex">
            <summary>
            Provides a common functionality for the <see cref="T:CADImport.CADText">CADText</see> and <see cref="T:CADImport.CADInsert">CADInsert</see> classes.
            </summary>
        </member>
        <member name="M:CADImport.CADCustomVertex.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CADCustomVertex.Point">
            <summary>
            Gets or sets a position of the <see cref="T:CADImport.CADCustomVertex">CADCustomVertex</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object that specifies a position of 
            the <see cref="T:CADImport.CADCustomVertex">CADCustomVertex</see> entity in three-dimensional space.</value>
        </member>
        <member name="P:CADImport.CADCustomVertex.Box">
            <summary>
            Gets a three-dimensional box that encloses the <see cref="T:CADImport.CADCustomVertex">CADCustomVertex</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for the <see cref="T:CADImport.CADCustomVertex">CADCustomVertex</see> entity.</value>
        </member>
        <member name="T:CADImport.CADMText">
            <summary>
            Represents a multiline text in a CAD image.
            </summary>
        </member>
        <member name="T:CADImport.CADInsert">
            <summary>
            Represents a block reference in a CAD image.
            </summary>
            <remarks>A <b>CADInsert</b> references a block stored in the current CAD drawing.
            A CAD drawing can have many inserts for one block.</remarks>
        </member>
        <member name="M:CADImport.CADInsert.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADInsert.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADInsert">CADInsert</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADInsert.ChangeEntity(System.Double,System.Double,System.Double,CADImport.CADConverter)">
            <summary>
            Edits current entity by specified offset
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="dz">Z axis offset</param>
            <param name="conv"><see cref="T:CADImport.CADConverter"/> object
            for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see>
             of entity parameters</param>
            <returns>Returns <b>true</b> if the entity was changed</returns>
        </member>
        <member name="M:CADImport.CADInsert.ChangeEntity(CADImport.DPoint[],CADImport.CADConverter)">
            <summary>
            Changes current <see cref="T:CADImport.CADInsert">CADInsert</see> object by specified points
            </summary>
            <param name="pts">Points, which are set for entity</param>
            <param name="conv"><see cref="T:CADImport.CADConverter">CADConverter</see> object
            for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see> of entity</param>
            <returns>Returns <b>true</b> if the entity was changed</returns>
        </member>
        <member name="M:CADImport.CADInsert.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADInsert">CADInsert</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADInsert">CADInsert</see>  
            object is loaded.</param>
        </member>
        <member name="M:CADImport.CADInsert.AddEntity(CADImport.CADEntity)">
            <summary>
            Adds the specified entity to this <see cref="T:CADImport.CADInsert">CADInsert</see> object.
            </summary>
            <param name="E">A <see cref="T:CADImport.CADEntity">CADEntity</see> to add.</param>
            <returns><b>true</b> if a <see cref="T:CADImport.CADEntity">CADEntity</see> was added; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADInsert.Attrib(System.String,CADImport.DPoint@)">
            <summary>
            Returns an attribute contained in the given <see cref="T:CADImport.CADInsert">CADInsert</see> object.
            </summary>
            <param name="S">A <b>string</b> containing a name of the attribute to return.</param>
            <param name="P">A <see cref="T:CADImport.DPoint">DPoint</see> object representing a location of the attribute.</param>
            <returns>A <see cref="T:CADImport.CADAttrib">CADAttrib</see> object or <b>null</b> if this <see cref="T:CADImport.CADInsert">CADInsert</see> 
            doesn't contain an attribute with the specified name.</returns>
        </member>
        <member name="P:CADImport.CADInsert.Selected">
            <summary>
            Get or sets <see cref="T:CADImport.CADInsert"/> selected.
            </summary>
        </member>
        <member name="P:CADImport.CADInsert.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADInsert">CADInsert</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADInsert.LineWeight">
            <summary>
            Gets or sets a thickness of lines for this <see cref="T:CADImport.CADInsert">CADInsert</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADInsert.Angle">
            <summary>
            Gets or sets an angle between a referenced block and CAD drawing.
            </summary>
        </member>
        <member name="P:CADImport.CADInsert.Attribs">
            <summary>
            Gets a collection of an attribs.
            </summary>
        </member>
        <member name="P:CADImport.CADInsert.Block">
            <summary>
            Gets or sets a block referenced by this <see cref="T:CADImport.CADInsert">CADInsert</see> object.
            </summary>
            <value>A <see cref="T:CADImport.CADBlock">CADBlock</see> referenced by this <see cref="T:CADImport.CADInsert">CADInsert</see> object.</value>
        </member>
        <member name="P:CADImport.CADInsert.Box">
            <summary>
            Gets a three-dimensional box that encloses the <see cref="T:CADImport.CADInsert">CADInsert</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for the <see cref="T:CADImport.CADInsert">CADInsert</see> entity.</value>
        </member>
        <member name="P:CADImport.CADInsert.Extrusion">
            <summary>
            Gets or sets a direction of axis Z belonging to the coordinate 
            system of this <see cref="T:CADImport.CADInsert">CADInsert</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object specifying a direction of axis Z 
            belonging to the coordinate system of this <see cref="T:CADImport.CADInsert">CADInsert</see> object.</value>
        </member>
        <member name="P:CADImport.CADInsert.Scale">
            <summary>
            Gets or sets a scale for drawning of the referenced block in a CAD image.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object that specifies a scale in 
            which a referenced block will be drawn in a CAD image.</value>
        </member>
        <member name="P:CADImport.CADInsert.Count">
            <summary>
            Gets a number of attribs belonging to the given <see cref="T:CADImport.CADInsert">CADInsert</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADInsert.Entities">
            <summary>
            Gets a collection of attribs associated with the given <see cref="T:CADImport.CADInsert">CADInsert</see> object.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> of attribs associated with the 
            block insert.</value> 
        </member>
        <member name="P:CADImport.CADInsert.Color">
            <summary>
            Gets or sets a color for the given <see cref="T:CADImport.CADInsert">CADInsert</see> entity.
            </summary>
            <value>A <see cref="T:System.Drawing.Color">Color</see> of the block insert.</value>
        </member>
        <member name="P:CADImport.CADInsert.EntName">
            <summary>
            Gets a name of the <see cref="T:CADImport.CADInsert">CADInsert</see> object.
            </summary>
            <value>A string containing a name of the <see cref="T:CADImport.CADInsert">CADInsert</see> object.</value>
        </member>
        <member name="M:CADImport.CADMText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADMText">CADMText</see> object.
            </summary>		
            <example>
            <p>Creating a new <see cref="T:CADImport.CADMText">CADMText</see> object example:</p>
            <p><c>[C#]</c></p>	
            <code> 
            CreateNewImage();						
            CADMText mText = new CADMText();
            Point p1 = new Point(100, 100);
            mText.Point = GetRealPoint(p1.X, p1.Y);
            mText.Text = AddEntityOptions.AddNewMTextString("Any Text", "NewMText1", new Font("Arial.ttf", 5), 1);				
            mText.LineWeight = 0.1;
            mText.Angle = 0.0f;
            mText.Color = CADConst.clNone; 																		
            mText.Layer = cadImage.Converter.Layers[0] as CADLayer;						
            mText.Handle = mText.GetHashCode();		
            mText.KeyEnt = mText.Handle.ToString();	
            cadImage.Converter.Loads(mText);
            cadImage.Converter.OnCreate(mText);		
            cadImage.CurrentLayout.Entities.Add(mText);				
            EditorCADPictureBox.Invalidate();				
            </code>	
            </example>
            <seealso cref="T:CADImport.DPoint"/>		 
            <seealso cref="T:CADImport.CADMText"/>		 
            <seealso cref="T:CADImport.CADImage"/>		 
            <seealso cref="F:CADImport.CADConst.clNone"/>						
        </member>
        <member name="M:CADImport.CADMText.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADMText.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADMText">CADMText</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADMText">CADMText</see>  
            object is loaded.</param>
        </member>
        <member name="P:CADImport.CADMText.Align">
            <summary>
            Gets or sets an alignment of the text
            </summary>
        </member>
        <member name="P:CADImport.CADMText.Height">
            <summary>
            Gets or sets a height of a text
            </summary>
        </member>
        <member name="P:CADImport.CADMText.LineSpacingFactor">
            <summary>
            Mtext line spacing factor (optional):
            </summary>
            <value>Percentage of default (3-on-5) line spacing to be applied. Valid values range from 0.25 to 4.00</value>
        </member>
        <member name="P:CADImport.CADMText.LineSpacingStyle">
            <summary>
            MText line spacing style (optional):
            </summary>
            <value>1 = At least (taller characters will override) 
            2 = Exact (taller characters will not override)</value>
        </member>
        <member name="P:CADImport.CADMText.Point1">
            <summary>
            X-axis direction vector (in World Coordinate System). 
            </summary>
            <remarks>It can affect smoothing</remarks>
        </member>
        <member name="P:CADImport.CADMText.RectHeight">
            <summary>
            Gets or sets a height of the bounding rectangle for the <see cref="T:CADImport.CADMText"/> object. 
            </summary>
        </member>
        <member name="P:CADImport.CADMText.RectWidth">
            <summary>
            Gets or sets a width of the bounding rectangle for the <see cref="T:CADImport.CADMText"/> object. 
            </summary>
        </member>
        <member name="P:CADImport.CADMText.Style">
            <summary>
            Gets or sets a <see cref="T:CADImport.CADStyle">style</see> for the <see cref="T:CADImport.CADMText"/> object. 
            </summary>
        </member>
        <member name="P:CADImport.CADMText.Text">
            <summary>
            Gets or sets a text contents for this <see cref="T:CADImport.CADMText"/> object. 
            </summary>
        </member>
        <member name="P:CADImport.CADMText.EntName">
            <summary>
            Gets a name of the <see cref="T:CADImport.CADMText">CADMText</see> object.
            </summary>
            <value>A string containing a name of the <see cref="T:CADImport.CADMText">CADMText</see> object.</value>
        </member>
        <member name="P:CADImport.CADMText.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADMText">CADMText</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.CADText">
            <summary>
            Represents a single text line in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADText.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:CADImport.CADText">CADText</see>.
            </summary>
        </member>
        <member name="M:CADImport.CADText.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADText.ChangeEntity(System.Double,System.Double,System.Double,CADImport.CADConverter)">
            <summary>
            Edits current entity by specified offset
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="dz">Z axis offset</param>
            <param name="conv"><see cref="T:CADImport.CADConverter"/>CADConverter object for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)"/>loading
             of entity parameters</param>
            <returns>Returns <b>true</b> if the entity was changed</returns>
        </member>
        <member name="M:CADImport.CADText.ApplyStyle(CADImport.CADStyle)">
            <summary>
            Applies a specified <see cref="T:CADImport.CADStyle">CADStyle</see> to the <see cref="T:CADImport.CADText">CADText</see> entity. 
            </summary>
            <param name="style"><see cref="T:CADImport.CADStyle">CADStyle</see> to apply to the text.</param>
        </member>
        <member name="M:CADImport.CADText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADText">CADText</see> object.
            </summary>		
            <example>
            <p>Creating a new <see cref="T:CADImport.CADText">CADText</see> object example:</p>
            <p><c>[C#]</c></p>	
            <code> 
            CreateNewImage();			
            Point p1 = new Point(100, 100);			
            CADText text = new CADText();		
            text.FontName = "Txt.shx";			
            text.Color = CADConst.clNone; 
            text.Point = GetRealPoint(p1.X, p1.Y);
            text.Height = 5.0;
            text.Rotation = 0.0f;
            text.Text = "Any text";
            text.LineWeight = 0.1;
            text.Layer = cadImage.Converter.Layers[0] as CADLayer;			
            cadImage.Converter.OnCreate(text);
            text.Handle = text.GetHashCode();		
            text.KeyEnt = text.Handle.ToString();	
            cadImage.Converter.OnCreate(text);		
            cadImage.CurrentLayout.Entities.Add(text);			
            EditorCADPictureBox.Invalidate();			
            </code>	
            </example>		 
            <seealso cref="M:CADImport.CADConst.GetRealPoint(System.Int32,System.Int32,CADImport.CADImage,System.Drawing.RectangleF)"/>		 
            <seealso cref="T:CADImport.DPoint"/>		 
            <seealso cref="T:CADImport.CADText"/>		 
            <seealso cref="T:CADImport.CADImage"/>		 
            <seealso cref="F:CADImport.CADConst.clNone"/>						
        </member>
        <member name="M:CADImport.CADText.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADText">CADText</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADText">CADText</see>  
            object is loaded.</param>
        </member>
        <member name="M:CADImport.CADText.ExpR(System.Double,System.Double,CADImport.CADMatrix,CADImport.DRect@)">
            <summary>
            Calculates a rectangle occupied by this <see cref="T:CADImport.CADText">CADText</see>.
            </summary>
            <param name="x">The X coordinate of the <see cref="T:CADImport.CADText">CADText</see> position.</param>
            <param name="y">The Y coordinate of the <see cref="T:CADImport.CADText">CADText</see> position.</param>
            <param name="matrix">A <see cref="T:CADImport.CADMatrix">CADMatrix</see> used for the <see cref="T:CADImport.CADText">CADText</see> transformation.</param>
            <param name="r">A <see cref="T:CADImport.DRect">DRect</see> object representing 
            a rectangle occupied by this <see cref="T:CADImport.CADText">CADText</see>.</param>
        </member>
        <member name="M:CADImport.CADText.ChangeByStyle(CADImport.CADStyle)">
            <summary>
            Changes <see cref="T:CADImport.CADStyle">CADStyle</see> of the <see cref="T:CADImport.CADText">CADText</see> to the specified one.
            </summary>
            <param name="AStyle"><see cref="T:CADImport.CADStyle">CADStyle</see> to be changed.</param>
        </member>
        <member name="P:CADImport.CADText.LineWeight">
            <summary>
            Gets or sets a thickness of lines for this <see cref="T:CADImport.CADText">CADText</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADText.EntType">
            <summary>
            Gets a type of this <see cref="T:CADImport.CADText">CADText</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADText.TextStyle">
            <summary>
            Gets or sets a style of the <see cref="T:CADImport.CADText">CADText</see>.
            </summary>
            <value>A <see cref="T:System.Drawing.FontStyle">FontStyle</see> value containing 
            the style information applied to the <see cref="T:CADImport.CADText">CADText</see>.</value>
        </member>
        <member name="P:CADImport.CADText.FontName">
            <summary>
            Gets or sets a name of the font used by this <see cref="T:CADImport.CADText">CADText</see> object.
            </summary>
            <value>A <b>string</b> containing a name of the font used by this <see cref="T:CADImport.CADText">CADText</see>.</value>
        </member>
        <member name="P:CADImport.CADText.Backward">
            <summary>
            Gets a value indicating whether the text line is turned backwards.
            </summary>
            <value><b>true</b> if the text is turned backwards; otherwise, <b>false</b>.</value>
            <remarks>When the text line is turned backwards, all letters of the text are also turned backwards.</remarks>
        </member>
        <member name="P:CADImport.CADText.HAlign">
            <summary>
            Gets or sets a horizontal alignment of a text.
            </summary>
            <value>A number that identifies a text alignment in reference to the <see cref="P:CADImport.CADText.StartPoint">StartPoint</see>.</value>
            <remarks>A horizontal text alignment is specified by the following numbers:
            0 - left, 1 - center, 2 - right, 3 - aligned(if vertical alignment = 0), 
            4 - middle(if vertical alignment = 0), 
            5 - fit(if vertical alignment = 0).</remarks>
        </member>
        <member name="P:CADImport.CADText.Height">
            <summary>
            Gets or sets a height of the <see cref="T:CADImport.CADText">CADText</see> letters.
            </summary>
        </member>
        <member name="P:CADImport.CADText.ObliqueAngle">
            <summary>
            Gets or sets a tilt angle for the <see cref="T:CADImport.CADText">CADText</see> letters.
            </summary>
        </member>
        <member name="P:CADImport.CADText.Rotation">
            <summary>
            Gets or sets a rotation angle of the <see cref="T:CADImport.CADText">CADText</see> object.
            </summary>
        </member>
        <member name="P:CADImport.CADText.XScale">
            <summary>
            Gets or sets a width scale (width factor) for the <see cref="T:CADImport.CADText">CADText</see>.
            </summary>
            <value>More than one if the text letters are stretched; less than one and more than zero if the 
            text letters are squeezed. A modified width is equal to the previous text width multiplied by a width factor.</value>
        </member>
        <member name="P:CADImport.CADText.StartPoint">
            <summary>
            Gets the start point of the text line.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object representing the start point of 
            the text line.</value>
        </member>
        <member name="P:CADImport.CADText.Style">
            <summary>
            Gets or sets a style for the <see cref="T:CADImport.CADText">CADText</see> object.
            </summary>
            <value>A <see cref="T:CADImport.CADStyle">CADStyle</see> object that represents a style for the single line text.</value>
        </member>
        <member name="P:CADImport.CADText.Text">
            <summary>
            Gets or sets a text contents for the <see cref="T:CADImport.CADText">CADText</see> object.
            </summary>
            <value>A <b>string</b> containing a text represented by this <see cref="T:CADImport.CADText">CADText</see> object.</value>
        </member>
        <member name="P:CADImport.CADText.UpsideDown">
            <summary>
            Gets a value indicating whether the text line is turned downwards (mirrored along axis Z).
            </summary>
            <value><b>true</b> if the text is turned downwards; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADText.VAlign">
            <summary>
            Gets or sets a vetical alignment of the text.
            </summary>
            <value>A number that identifies a text alignment in reference to the <see cref="P:CADImport.CADText.StartPoint">StartPoint</see>.</value>
            <remarks>A vertical text alignment is specified by the following numbers:
            0 - baseline, 1 - bottom, 2 - middle, 3 - top</remarks>
        </member>
        <member name="P:CADImport.CADText.Point1">
            <summary>
            Gets or sets a second alignment point of the <see cref="T:CADImport.CADText">CADText</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object representing the second alignment 
            point for the <see cref="T:CADImport.CADText">CADText</see>.</value>
            <remarks>The return value is meaningful only if 
            the <see cref="P:CADImport.CADText.HAlign">HAlign</see> and <see cref="P:CADImport.CADText.VAlign">VAlign</see> values are nonzero.</remarks>
        </member>
        <member name="P:CADImport.CADText.Extrusion">
            <summary>
            Gets or sets the direction of axis Z belonging to the coordinate 
            system of the <see cref="T:CADImport.CADText">CADText</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object specifying the direction of axis Z 
            belonging to the coordinate system of the <see cref="T:CADImport.CADText">CADText</see> object.</value>
        </member>
        <member name="P:CADImport.CADText.InsideMText">
            <summary>
            Gets a value indicating whether this <see cref="T:CADImport.CADText">CADText</see> object 
            is a part of the multiline text.
            </summary>
            <value><b>true</b> if this text is a part of the multiline text; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADText.UnicodeText">
            <summary>
            Gets the Unicode text contained in this <see cref="T:CADImport.CADText">CADText</see> object.
            </summary>
            <value>A <b>string</b> representing the Unicode text contained in this <see cref="T:CADImport.CADText">CADText</see> 
            object.</value>
        </member>
        <member name="P:CADImport.CADText.IsUnicodeText">
            <summary>
            Gets a value indicating whether this <see cref="T:CADImport.CADText">CADText</see> object 
            consists of unicode characters.
            </summary>
            <value><b>true</b> if this text consists of unicode characters; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADText.IsSHXFont">
            <summary>
            Gets a value indicating whether this <see cref="T:CADImport.CADText">CADText</see> object
            contains SHX fonts.
            </summary>
            <value><b>true</b> if this text contains SHX fonts; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADText.Box">
            <summary>
            Gets a three-dimensional box that encloses this <see cref="T:CADImport.CADText">CADText</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the a box that encloses a text.</value>
        </member>
        <member name="P:CADImport.CADText.Color">
            <summary>
            Gets or sets a color for the this <see cref="T:CADImport.CADText">CADText</see> object.
            </summary>
            <value>A <see cref="T:System.Drawing.Color">Color</see> of the text.</value>
        </member>
        <member name="P:CADImport.CADText.EntName">
            <summary>
            Gets a name of this <see cref="T:CADImport.CADText">CADText</see> object.
            </summary>
            <value>A string containing a name of the <see cref="T:CADImport.CADText">CADText</see> object.</value>
        </member>
        <member name="P:CADImport.TrialText.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.TrialText">TrialText</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.CADArc">
            <summary>
            Represents an arc in a CAD image.
            </summary>
            <remarks>An arc in a CAD image can be specified by the central <see cref="P:CADImport.CADPenLine.Point">Point</see>, <see cref="P:CADImport.CADCircle.Radius">Radius</see> or by 
            the central <see cref="P:CADImport.CADPenLine.Point">Point</see>, <see cref="P:CADImport.CADCircle.Radius">Radius</see>, 
            <see cref="P:CADImport.CADArc.StartAngle">StartAngle</see>, <see cref="P:CADImport.CADArc.EndAngle">EndAngle</see>.</remarks>		
        </member>
        <member name="M:CADImport.CADArc.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:CADImport.CADArc">CADArc</see> object.
             </summary>		
             <example>
             <p>Creating a new <see cref="T:CADImport.CADArc">CADArc</see> object example:</p>
            <p>[C#]</p>
            <code>		
            	CreateNewImage();
            	CADArc arc = new CADArc();
            	arc.Color = CADConst.clNone;			
            	arc.Point = GetRealPoint(300, 300);
            	arc.Radius = 10;
            	arc.StartAngle = 0;
            	arc.EndAngle = 180;			
            	arc.LineWeight = 0.1;						
            	arc.Loaded(cadImage.Converter);			
            	arc.Handle = arc.GetHashCode();		
            	arc.KeyEnt = arc.Handle.ToString();			
            	cadImage.CurrentLayout.Entities.Add(arc);
            	cadImage.Converter.OnCreate(arc);		
            	EditorCADPictureBox.Invalidate();					
            	</code>
             </example>		
            	<seealso cref="T:CADImport.DPoint"/>		 
            	<seealso cref="T:CADImport.CADArc"/>		 
            	<seealso cref="T:CADImport.CADImage"/>		 
            	<seealso cref="F:CADImport.CADConst.clNone"/>		
        </member>
        <member name="M:CADImport.CADArc.CreateArcFromVertexes(CADImport.CADVertex,CADImport.CADVertex)">
            <summary>
            Creates a new instance of the <see cref="T:CADImport.CADArc">CADArc</see> class using two 
            instances of the <see cref="T:CADImport.CADVertex">CADVertex</see> class.
            </summary>
            <param name="vertex1">The first vertex</param>
            <param name="vertex2">The second vertex</param>
            <returns>The created instance of the <see cref="T:CADImport.CADArc">CADArc</see> class. If the
            first vertex have Bulge value equal to zero, then null returned</returns>
        </member>
        <member name="M:CADImport.CADArc.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADArc.ChangeEntity(CADImport.DPoint[],CADImport.CADConverter)">
            <summary>
            Changes current <see cref="T:CADImport.CADArc">CADArc</see> object by specified points
            </summary>
            <param name="pts">Points, which are set for entity</param>
            <param name="conv"><see cref="T:CADImport.CADConverter">CADConverter</see> object
            for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see> of entity</param>
            <returns>Returns <b>true</b> if the entity was changed</returns>
        </member>
        <member name="M:CADImport.CADArc.MakeMarkers(CADImport.CADCollection{CADImport.Professional.Marker})">
            <summary>
            Creates <see cref="T:CADImport.Professional.Marker">markers</see> for <see cref="T:CADImport.CADArc">CADArc</see> and places them
            to the specified collection
            </summary>
            <param name="collectMarker">A <see cref="T:System.Collections.ArrayList">collection</see> where to <see cref="T:CADImport.Professional.Marker">markers</see> are placed.</param>
        </member>
        <member name="M:CADImport.CADArc.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADArc">CADArc</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADArc">CADArc</see> is loaded.</param>
        </member>
        <member name="P:CADImport.CADArc.EndPoint">
            <summary>
            Gets end point of <see cref="T:CADImport.CADArc">CADArc</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADArc.StartPoint">
            <summary>
            Gets start point of <see cref="T:CADImport.CADArc">CADArc</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADArc.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADArc">CADArc</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADArc.EndAngle">
            <summary>
            Gets or sets an angle between axis X and the line connecting the end point with the central <see cref="P:CADImport.CADPenLine.Point">Point</see>. 
            </summary>
            <remarks>The angle is formed counterclockwise.</remarks>
        </member>
        <member name="P:CADImport.CADArc.StartAngle">
            <summary>
            Gets or sets an angle between axis X and the line connecting the start point with the central <see cref="P:CADImport.CADPenLine.Point">Point</see>.
            </summary>
            <remarks>The angle is formed counterclockwise.</remarks>
        </member>
        <member name="T:CADImport.CADEllipse">
            <summary>
            Represents a full ellipse or elliptical arc in a CAD image.
            </summary>
            <remarks>An ellipse is specified by two perpendicular axes that define its width and length. 
            The longer axis is called the major axis, and the shorter one is the minor axis.</remarks>
        </member>
        <member name="M:CADImport.CADEllipse.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADEllipse.ChangeEntity(CADImport.DPoint[],CADImport.CADConverter)">
            <summary>
            Changes current <see cref="T:CADImport.CADEllipse">CADEllipse</see> object by specified points
            </summary>
            <param name="pts">Points, which are set for entity</param>
            <param name="conv"><see cref="T:CADImport.CADConverter">CADConverter</see> object
            for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see> of entity</param>
            <returns>Returns <b>true</b> if the entity was changed</returns>
        </member>
        <member name="M:CADImport.CADEllipse.ChangeEntity(System.Double,System.Double,System.Double,CADImport.CADConverter)">
            <summary>
            Edits current entity by specified offset
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="dz">Z axis offset</param>
            <param name="conv"><see cref="T:CADImport.CADConverter">CADConverter</see> object for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see>
             of entity parameters</param>
            <returns>Returns <b>true</b> if the entity was changed</returns>
        </member>
        <member name="M:CADImport.CADEllipse.MakeMarkers(CADImport.CADCollection{CADImport.Professional.Marker})">
            <summary>
            Creates <see cref="T:CADImport.Professional.Marker">markers</see> for a <see cref="T:CADImport.CADEllipse">CADEllipse</see> and places them
            to the specified collection
            </summary>
            <param name="collectMarker">A <see cref="T:System.Collections.ArrayList">collection</see> where to <see cref="T:CADImport.Professional.Marker">markers</see> are placed.</param>
        </member>
        <member name="M:CADImport.CADEllipse.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:CADImport.CADEllipse">CADEllipse</see> class.
             </summary>			
             <example>
             <p>Creating a new <see cref="T:CADImport.CADEllipse">CADEllipse</see> object example:</p>
            <p>[C#]</p>
            <code>		
            	CreateNewImage();
            	CADEllipse ellipse = new CADEllipse();
            	ellipse.Color = CADConst.clNone;						
            	DPoint pt1 = GetRealPoint(100, 100);
            	DPoint pt2 = GetRealPoint(300, 300);
            	double dX = (pt2.X - pt1.X) / 2;
            	double dY = (pt2.Y - pt1.Y) / 4;
            	CADEllipse ell = new CADEllipse();
            	ellipse.Point = new DPoint(pt1.X + dX, pt1.Y + dY, 0);
            	ellipse.RadPt = new DPoint((pt2.X - pt1.X) / 2, (pt2.Y - pt2.Y) / 2, 0);
            	ellipse.Ratio = dY / dX;
            	ellipse.LineWeight = 0.1;
            	ellipse.StartAngle = 360.0;
            	ellipse.EndAngle = 0.0;
            	ellipse.LineWeight = 0.1;						
            	ellipse.Loaded(cadImage.Converter);			
            	ellipse.Handle = ellipse.GetHashCode();		
            	ellipse.KeyEnt = ellipse.Handle.ToString();			
            	cadImage.CurrentLayout.Entities.Add(ellipse);
            	cadImage.Converter.OnCreate(ellipse);		
            	EditorCADPictureBox.Invalidate();	
            	</code>
             </example>		
            	<seealso cref="T:CADImport.DPoint"/>		 
            	<seealso cref="T:CADImport.CADEllipse"/>		 
            	<seealso cref="T:CADImport.CADImage"/>		 
            	<seealso cref="F:CADImport.CADConst.clNone"/>			
        </member>
        <member name="M:CADImport.CADEllipse.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADEllipse">CADEllipse</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADEllipse">CADEllipse</see> is loaded.</param>
        </member>
        <member name="P:CADImport.CADEllipse.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADEllipse">CADEllipce</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADEllipse.Angle">
            <summary>
            Gets or sets an angle between axis X in World Coordinate System (WCS) and a major ellipse axis 
            measured counterclockwise.
            </summary>
        </member>
        <member name="P:CADImport.CADEllipse.Ratio">
            <summary>
            Gets or sets a ratio between a minor axis and a major axis of the <see cref="T:CADImport.CADEllipse">CADEllipse</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADEllipse.RadPt">
            <summary>
            Gets an initial end point of the major axis relative to the ellipse center point. 
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object that represents 
            an initial end point of the major axis relative to the ellipse center point.</value> 
        </member>
        <member name="T:CADImport.CADPolyLine">
            <summary>
            Represents objects composed of the connected lines and bulge segments.
            </summary>
            <remarks>A <b>CADPolyLine</b> object is specified by an array of vertices 
            connected by lines and bulges.</remarks>
        </member>
        <member name="M:CADImport.CADPolyLine.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADPolyLine.ChangeEntity(CADImport.DPoint[],CADImport.CADConverter)">
            <summary>
            Changes current <see cref="T:CADImport.CADPolyLine"/> object by specified points
            </summary>
            <param name="pts">Points, which are set for an entity</param>
            <param name="conv"><see cref="T:CADImport.CADConverter"/> object
            for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading of entity</see></param>
            <returns>Returns <b>true</b> if the entity was changed; otherwise <b>false</b></returns>
        </member>
        <member name="M:CADImport.CADPolyLine.ChangeEntity(System.Double,System.Double,System.Double,CADImport.CADConverter)">
            <summary>
            Changes current entity by specified offset
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="dz">Z axis offset</param>
            <param name="conv"><see cref="T:CADImport.CADConverter"/> object for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see>
             of entity parameters</param>
            <returns>Returns <b>true</b> if the entity was changed; otherwise <b>false</b></returns>
        </member>
        <member name="M:CADImport.CADPolyLine.DrawEntityTrace(System.Int32,System.Int32,CADImport.CADImage,System.Windows.Forms.Control)">
            <summary>
            Implements drawing of an entity with specified offset to specified 
            <see cref="T:System.Windows.Forms.Control"/>
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="img"><see cref="T:CADImport.CADImage"/> object for 
            <see cref="M:CADImport.CADImage.GetPoint(CADImport.DPoint)">getting display coordinates</see> of the entity</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> for drawing of <see cref="T:CADImport.CADEntity">Entity</see></param>
        </member>
        <member name="M:CADImport.CADPolyLine.MakeMarkers(CADImport.CADCollection{CADImport.Professional.Marker})">
            <summary>
            Creates <see cref="T:CADImport.Professional.Marker">markers</see> for a <see cref="T:CADImport.CADPolyLine"/> and places them
            to the specified collection
            </summary>
            <param name="collectMarker">A <see cref="T:System.Collections.ArrayList">collection</see> where to <see cref="T:CADImport.Professional.Marker">markers</see> are placed.</param>
        </member>
        <member name="M:CADImport.CADPolyLine.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:CADImport.CADPolyLine">CADPolyLine</see> class.
             </summary>
             <example>
             <p>Creating a new <see cref="T:CADImport.CADPolyLine">CADPolyLine</see> object example:</p>
            <p>[C#]</p>
            <code>		
            	CreateNewImage();												
            	CADPolyLine poly = new CADPolyLine();
            	poly.Color = CADConst.clNone;
            	CADVertex vert;		
            	int i = 0;
            	while(i != 11)
            	{		
            		vert = new CADVertex();
            		vert.Point = GetRealPoint(100 + i*20, 100 + (i%2)*20);
            		poly.Entities.Add(vert);
            		i++;
            	}
            	poly.LineWeight = 0.1;			
            	poly.Loaded(cadImage.Converter);
            	poly.Handle = poly.GetHashCode();		
            	poly.KeyEnt = poly.Handle.ToString();	
            	cadImage.Converter.Loads(poly);
            	cadImage.Converter.OnCreate(poly);		
            	cadImage.CurrentLayout.Entities.Add(poly);				
            	EditorCADPictureBox.Invalidate();
            	</code>
             </example>			 
            	<seealso cref="M:CADImport.CADConst.GetRealPoint(System.Int32,System.Int32,CADImport.CADImage,System.Drawing.RectangleF)"/>		 
            	<seealso cref="T:CADImport.DPoint"/>		 
            	<seealso cref="T:CADImport.CADPolyLine"/>		 
            	<seealso cref="T:CADImport.CADImage"/>		 
            	<seealso cref="F:CADImport.CADConst.clNone"/>		
        </member>
        <member name="M:CADImport.CADPolyLine.ApplyBox">
            <summary>
            Calculates a box of the current entity.
            </summary>
        </member>
        <member name="M:CADImport.CADPolyLine.AddEntity(CADImport.CADEntity)">
            <summary>
            Adds the specified entity to this <see cref="T:CADImport.CADPolyLine">CADPolyLine</see>.
            </summary>
            <param name="E">A <see cref="T:CADImport.CADEntity">CADEntity</see> to add.</param>
            <returns><b>true</b> if a <see cref="T:CADImport.CADEntity">CADEntity</see> was added; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADPolyLine.Last">
            <summary>
            Returns a last vertex in the collection of vertices belonging to this <see cref="T:CADImport.CADPolyLine">CADPolyLine</see>.
            </summary>
            <returns>A <see cref="T:CADImport.CADVertex">CADVertex</see> representing a last vertex in the collection of vertices 
            belonging to this polyline.</returns>
        </member>
        <member name="P:CADImport.CADPolyLine.GlobalWidth">
            <summary>
            Gets or sets a width for all parts of the <see cref="T:CADImport.CADPolyLine">CADPolyLine</see>.
            </summary>
            <remarks>If this property returns a value greater than zero, all points specifying an arrow 
            shape coincide with the sides of the polyline (an arrow shapes for all parts of the polyline is disappear).</remarks>
        </member>
        <member name="P:CADImport.CADPolyLine.IsPolygonMesh">
            <summary>
            Gets a value indicating whether this <see cref="T:CADImport.CADPolyLine">CADPolyLine</see> represents a polygon mesh.
            </summary>
            <value><b>true</b> if this <see cref="T:CADImport.CADPolyLine">CADPolyLine</see> is a polygon mesh; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADPolyLine.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADPolyLine">CADPolyLine</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADPolyLine.LineWeight">
            <summary>
            Gets or sets a thickness of the lines for this <see cref="T:CADImport.CADPolyLine">CADPolyLine</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADPolyLine.Arrows">
            <summary>
            Gets or sets a collection of points that specify an arrow shape for 
            the <see cref="T:CADImport.CADPolyLine">CADPolyLine</see> segments.
            </summary>
            <value>A <see cref="T:CADImport.CADPolyLine">CADPolyLine</see> containing a points 
            that specifies an arrow shape for the polyline segments.</value>
            <remarks>Each arrow shape is specified by four points: two at the base of arrow head and two 
            at the end of arrow head.</remarks>
        </member>
        <member name="P:CADImport.CADPolyLine.IsPolyFaceMesh">
            <summary>
            Gets a value indicating whether this <see cref="T:CADImport.CADPolyLine">CADPolyLine</see> represents a polyface mesh.
            </summary>
            <value><b>true</b> if this <see cref="T:CADImport.CADPolyLine">CADPolyLine</see> is a polyface mesh; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADPolyLine.MeshM">
            <summary>
            Gets or sets a number of vertices traversed in a polygon mesh in M direction.
            </summary>
        </member>
        <member name="P:CADImport.CADPolyLine.MeshN">
            <summary>
            Gets or sets a number of vertices traversed in a polygon mesh in N direction.
            </summary>
            <remarks>A number returned by this property represents a quantity of vertices 
            contained on each of M levels.</remarks>
        </member>
        <member name="P:CADImport.CADPolyLine.PolyFaceVertexIndexes">
            <summary>
            Gets a list of indices specifying an order of traversing vertices of this polyface mesh.
            </summary>
        </member>
        <member name="P:CADImport.CADPolyLine.PolyLineEntities">
            <summary>
            Gets a collection of entities included in this <see cref="T:CADImport.CADPolyLine">CADPolyLine</see>.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> object representing 
            a collection of entities included in this <see cref="T:CADImport.CADPolyLine">CADPolyLine</see>.</value>
        </member>
        <member name="P:CADImport.CADPolyLine.Vertexes">
            <summary>
            Gets a collection of vertices of this <see cref="T:CADImport.CADPolyLine">CADPolyLine</see>.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> of vertices belonging to the polyline.</value>
        </member>
        <member name="P:CADImport.CADPolyLine.Color">
            <summary>
            Gets or sets a color for the given <see cref="T:CADImport.CADPolyLine">CADPolyLine</see> entity.
            </summary>
            <value>A <see cref="T:System.Drawing.Color">Color</see> of the polyline.</value>
        </member>
        <member name="P:CADImport.CADPolyLine.Count">
            <summary>
            Gets a number of entities contained in the specified <see cref="T:CADImport.CADPolyLine">CADPolyLine</see> object.
            </summary>
        </member>
        <member name="P:CADImport.CADPolyLine.Entities">
            <summary>
            Gets a collection of CAD entities belonging to the given <see cref="T:CADImport.CADPolyLine">CADPolyLine</see>.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> containing 
            CAD entities belonging to the given <see cref="T:CADImport.CADPolyLine">CADPolyLine</see>.</value>
        </member>
        <member name="P:CADImport.CADPolyLine.Layer">
            <summary>
            Gets or sets a layer containing this <see cref="T:CADImport.CADPolyLine">CADPolyLine</see>.
            </summary>
            <value>A <see cref="T:CADImport.CADLayer">CADLayer</see> containing this <see cref="T:CADImport.CADPolyLine">CADPolyLine</see>.</value>
        </member>
        <member name="P:CADImport.CADPolyLine.Box">
            <summary>
            Gets or sets a three-dimensional box that encloses the <see cref="T:CADImport.CADPolyLine">CADPolyLine</see>.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for the <see cref="T:CADImport.CADEntity">CADEntity</see>.</value>
        </member>
        <member name="T:CADImport.CADLWPolyLine">
            <summary>
            Represents a planar polyline.
            </summary>
            <remarks>All parts of the <b>CADLWPolyLine</b> lie in the same plane.</remarks>
        </member>
        <member name="P:CADImport.CADLWPolyLine.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADLWPolyLine">CADLWPolyLine</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.CADSpline">
            <summary>
            Represents a spline in a CAD image.
            </summary>
            <remarks>A spline is specified by fit points and control points. Fit points are connected by 
            a smooth curve that forms a spline. Control points form a spline as a continuous approximation line 
            that goes proportionally remote from them.</remarks>
        </member>
        <member name="M:CADImport.CADSpline.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADSpline.DrawEntityTrace(System.Int32,System.Int32,CADImport.CADImage,System.Windows.Forms.Control)">
            <summary>
            Implements drawing of an entity with the specified offset to the specified 
            <see cref="T:System.Windows.Forms.Control"/>
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="img">The <see cref="T:CADImport.CADImage"/> object for 
            <see cref="M:CADImport.CADImage.GetPoint(CADImport.DPoint)">getting display coordinates</see> of an entity</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> for drawing of an <see cref="T:CADImport.CADEntity"/>CADEntity</param>
        </member>
        <member name="M:CADImport.CADSpline.ChangeEntity(System.Double,System.Double,System.Double,CADImport.CADConverter)">
            <summary>
            Edits current entity by specified offset
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="dz">Z axis offset</param>
            <param name="conv"><see cref="T:CADImport.CADConverter"/> object
            for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see>
             of entity parameters</param>
            <returns>Returns <b>true</b> if the entity was changed</returns>
        </member>
        <member name="M:CADImport.CADSpline.ChangeEntity(CADImport.DPoint[],CADImport.CADConverter)">
            <summary>
            Changes current <see cref="T:CADImport.CADSpline"/> object by specified points
            </summary>
            <param name="pts">Points, which are set for an entity</param>
            <param name="conv"><see cref="T:CADImport.CADConverter"/> object
            for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see> of an entity</param>
            <returns>Returns <b>true</b> if an entity was changed</returns>
        </member>
        <member name="M:CADImport.CADSpline.MakeMarkers(CADImport.CADCollection{CADImport.Professional.Marker})">
            <summary>
            Creates <see cref="T:CADImport.Professional.Marker">markers</see> for a <see cref="T:CADImport.CADSpline"/> and places them
            to the specified collection
            </summary>
            <param name="collectMarker">A <see cref="T:System.Collections.ArrayList">collection</see> where to <see cref="T:CADImport.Professional.Marker">markers</see> are placed.</param>
        </member>
        <member name="M:CADImport.CADSpline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADSpline">CADSpline</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADSpline.ReloadPolyPoints">
            <summary>
            Loads the points belonging to the <see cref="T:CADImport.CADSpline">CADSpline</see>.
            </summary>
        </member>
        <member name="M:CADImport.CADSpline.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADSpline">CADSpline</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADSpline">CADSpline</see> is loaded.</param>
        </member>
        <member name="M:CADImport.CADSpline.CreateDottedList">
            <summary>
            Creates a list of points that specify the dots and dashes of the <see cref="T:CADImport.CADSpline">CADSpline</see>.
            </summary>
            <remarks>Each dot or dash is specified by two points.</remarks>
        </member>
        <member name="P:CADImport.CADSpline.EntType">
            <summary>
            Gets a type of this <see cref="T:CADImport.CADSpline">CADSpline</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADSpline.Controls">
            <summary>
            Gets or sets a collection of control points.
            </summary>
            <value>A <see cref="T:CADImport.CADSpline">CADSpline</see> that contains control points.</value>
            <remarks>Control points form a spline as a continuous approximation line 
            that goes proportionally remote from them.</remarks>
        </member>
        <member name="P:CADImport.CADSpline.Fit">
            <summary>
            Gets or sets a collection of fit points.
            </summary>
            <remarks>Fit points are connected by a smooth curve that forms a spline.</remarks>
        </member>
        <member name="P:CADImport.CADSpline.Knots">
            <summary>
            Gets a collection of knots for this <see cref="T:CADImport.CADSpline">CADSpline</see> entity.
            </summary>
            <value>Knots are the points on a spline used for specifying domains of influence for each control point. 
            A control point influences the part of the spline between the first and last knot of its domain. 
            </value>
        </member>
        <member name="P:CADImport.CADSpline.Weights">
            <summary>
            Gets a collection of weights for <see cref="T:CADImport.CADSpline">CADSpline</see> points.
            </summary>
        </member>
        <member name="P:CADImport.CADSpline.FitCount">
            <summary>
            Gets a number of fit points.
            </summary>
        </member>
        <member name="P:CADImport.CADSpline.ControlCount">
            <summary>
            Gets a number of control points.
            </summary>
        </member>
        <member name="P:CADImport.CADSpline.Degree">
            <summary>
            Gets or sets degree of the <see cref="T:CADImport.CADSpline">CADSpline</see>.
            </summary>
        </member>
        <member name="T:CADImport.CADLeader">
            <summary>
            Represents objects consisting of a line segments or a spline with an arrowhead at one end 
            and a multiline text at the other. 
            </summary>
        </member>
        <member name="M:CADImport.CADLeader.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADLeader.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:CADImport.CADLeader">CADLeader</see> class.
             </summary>
             <example>
             <p>Creating a new <see cref="T:CADImport.CADLeader">CADLeader</see> object example:</p>
            <p>[C#]</p>
            <code>		
            	CreateNewImage();			
            	CADLeader leader = new CADLeader();
            	leader.Color = CADConst.clNone;
            	leader.ArrowSize = 3.5f;
            	leader.Arrowhead = true;
            	leader.ArrowScale = 1.0f;					
            	DPoint pt1 = GetRealPoint(100, 100);
            	DPoint pt2 = GetRealPoint(500, 500);
            	leader.Controls.Add(pt1);
            	leader.Controls.Add(pt2);
            	leader.LineWeight = 0.1;						
            	leader.Loaded(cadImage.Converter);			
            	leader.Handle = leader.GetHashCode();		
            	leader.KeyEnt = leader.Handle.ToString();	
            	cadImage.Converter.OnCreate(leader);		
            	cadImage.CurrentLayout.Entities.Add(leader);			
            	EditorCADPictureBox.Invalidate();	
            	</code>
             </example>		
            	<seealso cref="T:CADImport.DPoint"/>		 
            	<seealso cref="T:CADImport.CADLeader"/>		 
            	<seealso cref="T:CADImport.CADImage"/>		 
            	<seealso cref="F:CADImport.CADConst.clNone"/>		 
        </member>
        <member name="M:CADImport.CADLeader.MakeMarkers(CADImport.CADCollection{CADImport.Professional.Marker})">
            <summary>
            Creates <see cref="T:CADImport.Professional.Marker">markers</see> for <see cref="T:CADImport.CADLeader"/> and places them
            to the specified collection
            </summary>
            <param name="collectMarker">A <see cref="T:System.Collections.ArrayList">collection</see> where to <see cref="T:CADImport.Professional.Marker">markers</see> are placed.</param>
        </member>
        <member name="M:CADImport.CADLeader.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADLeader">CADLeader</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADLeader">CADLeader</see> is loaded.</param>
        </member>
        <member name="P:CADImport.CADLeader.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADLeader">CADLeader</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADLeader.Insert">
            <summary>
            Gets an insert associated with the specified <see cref="T:CADImport.CADLeader">CADLeader</see>.
            </summary>
            <value>A <see cref="T:CADImport.CADInsert">CADInsert</see> object associated with the specified <see cref="T:CADImport.CADLeader">CADLeader</see>.</value>
        </member>
        <member name="P:CADImport.CADLeader.IsSpline">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CADImport.CADLeader">CADLeader</see> contains a spline.
            </summary>
            <value><b>true</b> if this <see cref="T:CADImport.CADLeader">CADLeader</see> contains a spline; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADLeader.Visibility">
            <summary>
            Gets or sets a value determined visibility of this <see cref="T:CADImport.CADLeader">CADLeader</see> object.
            </summary>
        </member>
        <member name="P:CADImport.CADLeader.Arrowhead">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CADImport.CADLeader">CADLeader</see> contains an arrow.
            </summary>
            <value><b>true</b> if this <see cref="T:CADImport.CADLeader">CADLeader</see> contains an arrow; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADLeader.ArrowType">
            <summary>
            Gets or sets a value of the arrow type
            </summary>
        </member>
        <member name="P:CADImport.CADLeader.ArrowSize">
            <summary>
            Gets or sets a size of the arrowhead of the <see cref="T:CADImport.CADLeader">CADLeader</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADLeader.ArrowScale">
            <summary>
            Gets or sets a scale for the arrowhead of the <see cref="T:CADImport.CADLeader">CADLeader</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADLeader.Color">
            <summary>
            Gets or sets a color for the specified <see cref="T:CADImport.CADLeader">CADLeader</see> entity.
            </summary>
            <value>A <see cref="T:System.Drawing.Color">Color</see> of the <see cref="T:CADImport.CADLeader">CADLeader</see>.</value>
        </member>
        <member name="T:CADImport.CADVertex">
            <summary>
            Represents a vertex of a <see cref="T:CADImport.CADPolyLine">CADPolyLine</see>.
            </summary>
            <remarks>The vertex is a special point of a polyline. It can specify the start point of a polyline, 
            or its end point, or a junction point of two polyline segments. The vertex also has the index value 
            that specifies an order the vertex appears within the polyline, with the first being numbered 1.</remarks>
        </member>
        <member name="M:CADImport.CADVertex.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADVertex.SetHandle(System.UInt64)">
            <summary>
            need help
            </summary>
            <param name="handle"></param>
        </member>
        <member name="P:CADImport.CADVertex.Point">
            <summary>
            Gets or sets coordinates of the <see cref="T:CADImport.CADVertex">CADVertex</see>.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object that provides coordinates of the vertex.</value>
        </member>
        <member name="P:CADImport.CADVertex.Box">
            <summary>
            Gets a three-dimensional box that encloses the <see cref="T:CADImport.CADVertex">CADVertex</see> entity.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for the <see cref="T:CADImport.CADVertex">CADVertex</see>.</value>
        </member>
        <member name="P:CADImport.CADVertex.Bulge">
            <summary>
            Gets or sets a bulge for the arc segment starting at this vertex.
            </summary>
            <remarks>The bulge is the tangent of one fourth the included angle for an arc segment, 
            made negative if the arc goes clockwise from the start point to the end point. A bulge of 0 
            indicates a straight segment, and a bulge of 1 is a semicircle.</remarks>
        </member>
        <member name="P:CADImport.CADVertex.EndWidth">
            <summary>
            Gets or sets a width at the end point of a polyline segment that started at this vertex.
            </summary>
        </member>
        <member name="P:CADImport.CADVertex.Flags">
            <summary>
            Gets or sets a byte that contains flags for this <see cref="T:CADImport.CADVertex">CADVertex</see>.
            </summary>
            <remarks>Vertex flags:
            1 = Extra vertex created by curve-fitting.
            2 = Curve-fit tangent defined for this vertex. A curve-fit tangent direction of 0 may be omitted from DXF output but is significant if this bit is set.
            4 = Not used.
            8 = Spline vertex created by spline-fitting.
            16 = Spline frame control point.
            32 = 3D polyline vertex.
            64 = 3D polygon mesh.
            128 = Polyface mesh vertex.</remarks>
        </member>
        <member name="P:CADImport.CADVertex.StartWidth">
            <summary>
            Gets or sets a width at the start point of a polyline segment that started at this vertex.
            </summary>
        </member>
        <member name="P:CADImport.CADVertex.PolyFaceVertexIndex1">
            <summary>
            Gets or sets an index of this <see cref="T:CADImport.CADVertex">CADVertex</see> when it represents 
            a first vertex specifying a face belonging to the polyface mesh.
            </summary>
            <remarks>Every vertex that is a part of a polyface mesh has its vertex flag 128 bit set.</remarks>
        </member>
        <member name="P:CADImport.CADVertex.PolyFaceVertexIndex2">
            <summary>
            Gets or sets an index of this <see cref="T:CADImport.CADVertex">CADVertex</see> when it represents 
            a second vertex specifying a face belonging to the polyface mesh.
            </summary>
            <remarks>Every vertex that is a part of a polyface mesh has its vertex flag 128 bit set.</remarks>
        </member>
        <member name="P:CADImport.CADVertex.PolyFaceVertexIndex3">
            <summary>
            Gets or sets an index of this <see cref="T:CADImport.CADVertex">CADVertex</see> when it represents 
            a third vertex specifying a face belonging to the polyface mesh.
            </summary>
            <remarks>Every vertex that is a part of a polyface mesh has its vertex flag 128 bit set.</remarks>
        </member>
        <member name="P:CADImport.CADVertex.PolyFaceVertexIndex4">
            <summary>
            Gets or sets an index of this <see cref="T:CADImport.CADVertex">CADVertex</see> when it represents 
            a fourth vertex specifying a face belonging to the polyface mesh.
            </summary>
            <remarks>Every vertex that is a part of a polyface mesh has its vertex flag 128 bit set.</remarks>
        </member>
        <member name="T:CADImport.CADSection">
            <summary>
            Represents a section of a CAD file.
            </summary>
            <remarks>The common sections of a CAD file are: Header, Classes, Objects, Blocks and others.</remarks>
        </member>
        <member name="M:CADImport.CADSection.AddEntity(CADImport.CADEntity)">
            <summary>
            Adds the specified entity to this <see cref="T:CADImport.CADSection">CADSection</see> object.
            </summary>
            <param name="E">A <see cref="T:CADImport.CADEntity">CADEntity</see> to add.</param>
            <returns><b>true</b> if a <see cref="T:CADImport.CADEntity">CADEntity</see> was added; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:CADImport.CADBlock">
            <summary>
            Represents a block in a CAD file.
            </summary>
            <remarks>A CAD block is a collection of related objects that can be treated as a single object.</remarks>
        </member>
        <member name="M:CADImport.CADBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADBlock">CADBlock</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADBlock.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADBlock">CADBlock</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADBlock">CADBlock</see> is loaded.</param>
        </member>
        <member name="M:CADImport.CADBlock.AddEntity(CADImport.CADEntity)">
            <summary>
            Adds the specified entity to this <see cref="T:CADImport.CADBlock">CADBlock</see>.
            </summary>
            <param name="E">A <see cref="T:CADImport.CADEntity">CADEntity</see> to add.</param>
            <returns><b>true</b> if a <see cref="T:CADImport.CADEntity">CADEntity</see> was added; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:CADImport.CADBlock.Flags">
            <summary>
            Gets or sets a byte that contains flags for this <see cref="T:CADImport.CADBlock">CADBlock</see>.
            </summary>
            <remarks>Block flags:</remarks>
            <remarks>0 = Indicates none of the following flags apply.
            1 = This is an anonymous block generated by hatching, associative
            	 dimensioning, other internal operations, or an application.
            2 = This block has non-constant attribute definitions (this bit is not set if
            	the block has any attribute definitions that are constant, or has no attribute definitions at all).
            4 = This block is an external reference (xref).
            8 = This block is an xref overlay.
            16 = This block is externally dependent.
            32 = This is a resolved external reference, or dependent of an external reference (ignored on input).
            64 = This definition is a referenced external reference (ignored on input).</remarks>
        </member>
        <member name="P:CADImport.CADBlock.Name">
            <summary>
            Gets or sets a <see cref="T:CADImport.CADBlock">CADBlock</see> name read from a CAD file.
            </summary>
            <value>A string containing a <see cref="T:CADImport.CADBlock">CADBlock</see> name read from a CAD file.</value>
        </member>
        <member name="P:CADImport.CADBlock.Offset">
            <summary>
            Gets or sets a base point for the coordinate system of this <see cref="T:CADImport.CADBlock">CADBlock</see>.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object representing a base point 
            for the coordinate system of this <see cref="T:CADImport.CADBlock">CADBlock</see>.</value>
        </member>
        <member name="P:CADImport.CADBlock.SpecPaperSpace">
            <summary>
            Gets or sets SpecPaperSpace parameter
            </summary>
        </member>
        <member name="P:CADImport.CADBlock.XrefPath">
            <summary>
            Gets or sets a path to the file containing a CAD image when this <see cref="T:CADImport.CADBlock">CADBlock</see> 
            represents an external reference.
            </summary>
            <value>A <b>string</b> containing a path to the external CAD file.</value>
            <remarks>If this <see cref="T:CADImport.CADBlock">CADBlock</see> does't represent an external reference 
            this property returns an empty string.</remarks>
        </member>
        <member name="P:CADImport.CADBlock.EntName">
            <summary>
            Gets a name of the <see cref="T:CADImport.CADBlock">CADBlock</see>.
            </summary>
            <value>A string containing a name of the <see cref="T:CADImport.CADBlock">CADBlock</see>.</value>
        </member>
        <member name="T:CADImport.CADLayer">
            <summary>
            Represents a layer in a CAD image.
            </summary>
        </member>
        <member name="T:CADImport.CADPenTableItem">
            <summary>
            Represents a table item for all entities organized in tables in a CAD file.
            </summary>
        </member>
        <member name="M:CADImport.CADPenTableItem.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CADPenTableItem.Name">
            <summary>
            Gets or sets a name of the <see cref="T:CADImport.CADPenTableItem">CADPenTableItem</see>.
            </summary>
            <remarks>A <b>string</b> containing a name of the <see cref="T:CADImport.CADPenTableItem">CADPenTableItem</see> read from a CAD file.</remarks>
        </member>
        <member name="P:CADImport.CADPenTableItem.EntName">
            <summary>
            Gets a name of this <see cref="T:CADImport.CADPenTableItem">CADPenTableItem</see>.
            </summary>
            <value>A string containing a name of this <see cref="T:CADImport.CADPenTableItem">CADPenTableItem</see>.</value>
        </member>
        <member name="P:CADImport.CADPenTableItem.Flags">
            <summary>
            Gets or sets a drawing flags.
            </summary>
        </member>
        <member name="M:CADImport.CADLayer.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADLayer.SetLType(CADImport.CADEntity)">
            <summary>
            Sets a linetype for the <see cref="T:CADImport.CADLayer">CADLayer</see> entity.
            </summary>
            <param name="Value">A <see cref="T:CADImport.CADEntity">CADEntity</see> object representing a linetype.</param>
        </member>
        <member name="M:CADImport.CADLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADLayer">CADLayer</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADLayer.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADLayer">CADLayer</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADLayer">CADLayer</see> is loaded.</param>
        </member>
        <member name="P:CADImport.CADLayer.LineType">
            <summary>
            Gets or sets line type
            </summary>
        </member>
        <member name="P:CADImport.CADLayer.LineTypeName">
            <summary>
            Gets line type name
            </summary>
        </member>
        <member name="P:CADImport.CADLayer.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADLayer">CADLayer</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADLayer.LineWeight">
            <summary>
            Gets or sets a thickness of lines for this <see cref="T:CADImport.CADLayer">CADLayer</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADLayer.Lines">
            <summary>
            Gets or sets a type of the line used on this layer.
            </summary>
            <value> An object of the <see cref="T:CADImport.SGLines">sgLines</see> class that specifies a type of the line.</value>
            <remarks>Obsolete. We recommend to use LineType property</remarks>
        </member>
        <member name="P:CADImport.CADLayer.IsPlotting">
            <summary>
            Gets or sets a value indicating whether this layer's contents can be plotted.
            </summary>
            <value><b>true</b> if this layer's contents can be plotted; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADLayer.Visible">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:CADImport.CADLayer">CADLayer</see> is visible.
            </summary>
            <value><b>true</b> if a <see cref="T:CADImport.CADLayer">CADLayer</see> is visible; otherwise, <b>false</b>.</value>
            <remarks>If a layer is frozen or invisible the CAD entities it contains will also be invisible. If a layer 
            is invisible but not frozen and it contains inserts of blocks belonging to visible layers then 
            those blocks will be visible.</remarks>
        </member>
        <member name="P:CADImport.CADLayer.Frozen">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:CADImport.CADLayer">CADLayer</see> is frozen.
            </summary>
            <value><b>true</b> if a <see cref="T:CADImport.CADLayer">CADLayer</see> is frozen; otherwise, <b>false</b>.</value>
            <remarks>If a layer is frozen all CAD entities it contains will be invisible even if it has inserts of blocks 
            belonging to visible layers.</remarks>
        </member>
        <member name="T:CADImport.CADStyle">
            <summary>
            Represents a text style in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADStyle.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADStyle">CADStyle</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADStyle.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADStyle">CADStyle</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADStyle">CADStyle</see> is loaded.</param>
        </member>
        <member name="P:CADImport.CADStyle.BigFont">
            <summary>
            Gets or sets a path to a file containing big fonts.
            </summary>
            <value>A <b>string</b> containing a path to a file containing big fonts.</value>
            <remarks>Big font files include glyphs for multiple character sets 
            and accommodate many languages.</remarks>
        </member>
        <member name="P:CADImport.CADStyle.FixedHeight">
            <summary>
            Gets or sets a fixed text height.
            </summary>
            <remarks>A fixed text height is an initial text height of all newly added texts 
            defined by this <see cref="T:CADImport.CADStyle">CADStyle</see>. A zero value means that 
            a text height is not fixed and a user will be prompted to enter a height value for a newly 
            added text.</remarks>
        </member>
        <member name="P:CADImport.CADStyle.FontName">
            <summary>
            Gets or sets a font name.
            </summary>
            <value>A <b>string</b> containing a font name.</value>
        </member>
        <member name="P:CADImport.CADStyle.LastHeightUsed">
            <summary>
            Gets or sets an initial height of the last added text defined by this <see cref="T:CADImport.CADStyle">CADStyle</see>.
            </summary>
            <remarks>A value returned by this property can coincide with the <see cref="P:CADImport.CADStyle.FixedHeight">FixedHeight</see> 
            or be defined at the moment of adding a text to a CAD image.</remarks>
        </member>
        <member name="P:CADImport.CADStyle.ObliqueAngle">
            <summary>
            Gets or sets a tilt angle for letters defined by this <see cref="T:CADImport.CADStyle">CADStyle</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADStyle.PrimaryFont">
            <summary>
            Gets or sets a name of the file containing fonts for texts in a CAD image.
            </summary>
            <value>A <b>string</b> representing a name of the file containing fonts for texts in a CAD image.</value>
        </member>
        <member name="P:CADImport.CADStyle.TextGenFlags">
            <summary>
            Gets or sets a byte that contains text generation flags.
            </summary>
            <remarks>Text generation flags (bit-coded values):
            2 = Text is backward (mirrored in X).
            4 = Text is upside down (mirrored in Y).</remarks>.
        </member>
        <member name="P:CADImport.CADStyle.WidthFactor">
            <summary>
            Gets or sets a width factor (width scale) defined by this <see cref="T:CADImport.CADStyle">CADStyle</see>.
            </summary>
            <value>More than one if text letters are stretched; less than one and more than zero if the 
            text letters are squeezed. A modified width is equal to the previous width multiplied by a width factor.</value>
        </member>
        <member name="P:CADImport.CADStyle.UpsideDown">
            <summary>
            Defines whether text is upside down (mirrored in Y) or not.
            </summary>
        </member>
        <member name="P:CADImport.CADStyle.Backward">
            <summary>
            Gets a value indicating whether a text is backward (mirrored in X) or not.
            </summary>
        </member>
        <member name="T:CADImport.CADDimensionStyle">
            <summary>
            Represents a style applicable to dimension lines in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADDimensionStyle.InitDimProperties(CADImport.HeadVarStruct)">
            <summary>
            Initializes dimension style using default values from the specified header.
            </summary>
            <param name="header">The header to get default values from.</param>
        </member>
        <member name="M:CADImport.CADDimensionStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADDimensionStyle">CADDimensionStyle</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADDimensionStyle.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CADDimensionStyle.ArrowType1">
            <summary>
            Gets or sets a type of the first arrow exterior
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.ArrowType2">
            <summary>
            Gets or sets a type of the second arrow exterior
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.ArrowTypeL">
            <summary>
            Gets or sets arrow block name.
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.DIMCLRD">
            <summary>
            Gets or sets dimension line color. Range is 0 = BYBLOCK; 256 = BYLAYER.
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.DIMCLRE">
            <summary>
            Gets or sets dimension extension line color. Range is 0 = BYBLOCK; 256 = BYLAYER.
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.DIMCLRT">
            <summary>
            Gets or sets dimension text color. Range is 0 = BYBLOCK; 256 = BYLAYER.
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.DIMDEC">
            <summary>
            Gets or sets a number of decimal places for the tolerance values
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.DIMLFAC">
            <summary>
            Gets or sets a linear measurements scale factor
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.DIMLWD">
            <summary>
            Gets or sets the dimension line lineweight.
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.DIMLWE">
            <summary>
            Gets or sets a force text inside extensions
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.DIMTIX">
            <summary>
            Gets or sets the force text inside extensions if nonzero.
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.DIMTIH">
            <summary>
            Gets or sets the text inside horizontal if nonzero.
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.DIMTOH">
            <summary>
            Gets or sets the text outside horizontal if nonzero.
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.DIMSD1">
            <summary>
            Gets or sets a suppression of the first dimensional line
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.DIMSD2">
            <summary>
            Gets or sets a suppression of the second dimensional line
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.DIMSE1">
            <summary>
            Gets or sets a supression of the first extension line
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.DIMSE2">
            <summary>
            Gets or sets a supression of the second extension line
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.TextStyle">
            <summary>
            Gets or sets a style of the dimension text defined by this <see cref="T:CADImport.CADDimensionStyle">CADDimensionStyle</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.TextPosVert">
            <summary>
            Gets or sets text above dimension line if nonzero.
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.Scale">
            <summary>
            Gets or sets overall dimensioning scale factor.
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.SizeCenterMark">
            <summary>
            Gets or sets a size of the center mark defined by this <see cref="T:CADImport.CADDimensionStyle">CADDimensionStyle</see>.
            </summary>
            <remarks>A center mark specifies a center of circle or arc and looks as a small symmetric cross consisting of two 
            perpendicular lines. A size of the center mark is a distance from the center of the circle or arc to the end of the center mark.</remarks>
        </member>
        <member name="P:CADImport.CADDimensionStyle.ArrowSize">
            <summary>
            Gets or sets a size of the arrowhead defined by this <see cref="T:CADImport.CADDimensionStyle">CADDimensionStyle</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.ExtLineExt">
            <summary>
            Gets or sets a distance to extend the extension lines above the dimension line.
            </summary>
            <remarks>The extension lines are the lines that go from a measured object to the dimesion line.</remarks>
        </member>
        <member name="P:CADImport.CADDimensionStyle.ExtLineOffset">
            <summary>
            Gets or sets a distance to offset the extension lines from the points on the drawing that define the dimension.
            </summary>
            <remarks>The extension lines are the lines that go from a measured object to the dimesion line.</remarks>
        </member>
        <member name="P:CADImport.CADDimensionStyle.TextOffset">
            <summary>
            Gets or sets a gap between the dimension text and the dimension line.
            </summary>
        </member>
        <member name="P:CADImport.CADDimensionStyle.TextHeight">
            <summary>
            Gets or sets a height of the dimension text defined by this <see cref="T:CADImport.CADDimensionStyle">CADDimensionStyle</see>.
            </summary>
        </member>
        <member name="T:CADImport.CADDimension">
            <summary>
            Represents dimensions in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADDimension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADDimension">CADDimension</see> class.
            </summary>
            <example>
            <p>Creating a new <see cref="T:CADImport.CADDimension">CADDimension</see> object example:</p>
            <p><c>[C#]</c></p>	
            <code> 
            CreateNewImage();
            DPoint startPoint = GetRealPoint(10.0f / 100.0f , 1.0f - 10.0f / 100.0f);
            DPoint endPoint = GetRealPoint(20.0f / 100.0f, 1.0f - 20.0f / 100.0f);			
            CADDimension vDimension = new CADDimension();
            vDimension.Flags = 1;			
            vDimension.Color = CADConst.clNone;
            vDimension.LinDefPoint1 = startPoint;
            vDimension.LinDefPoint2 = endPoint;
            vDimension.DefPoint = new DPoint(endPoint.X, endPoint.Y + 20.0, 0.0);
            vDimension.Style = new CADDimensionStyle();
            vDimension.Style.ArrowSize = 0.5;
            vDimension.Style.TextHeight = 0.5;		
            cadImage.Converter.OnCreate(vDimension);
            cadImage.Converter.Loads(vDimension);
            cadImage.Converter.Entities.Add(vDimension);
            </code>	
            </example>
            <seealso cref="T:CADImport.DPoint"/>		 
            <seealso cref="T:CADImport.CADDimension"/>		 
            <seealso cref="T:CADImport.CADImage"/>		 
            <seealso cref="F:CADImport.CADConst.clNone"/>				
        </member>
        <member name="M:CADImport.CADDimension.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADDimension.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADDimension">CADDimension</see> object to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADDimension">CADDimension</see>   
            object is loaded.</param>
        </member>
        <member name="P:CADImport.CADDimension.ExtLineExt">
            <summary>
            Gets or sets a distance to extend the extension lines above the dimension line.
            </summary>
            <remarks>The extension lines are the lines that go from a measured object to the dimesion line.</remarks>
        </member>
        <member name="P:CADImport.CADDimension.ExtLineOffset">
            <summary>
            Gets or sets a distance to offset the extension lines from the points on the drawing that define the dimension.
            </summary>
            <remarks>The extension lines are the lines that go from a measured object to the dimesion line.</remarks>
        </member>
        <member name="P:CADImport.CADDimension.DIMCLRD">
            <summary>
            Gets or sets dimension line color. Range is 0 = BYBLOCK; 256 = BYLAYER.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.DIMCLRE">
            <summary>
            Gets or sets dimension extension line color. Range is 0 = BYBLOCK; 256 = BYLAYER.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.DIMCLRT">
            <summary>
            Gets or sets dimension text color. Range is 0 = BYBLOCK; 256 = BYLAYER.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.DIMDEC">
            <summary>
            Gets or sets a number of decimal places for the tolerance values of a primary units dimension.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.DIMLFAC">
            <summary>
            Gets or sets a linear measurements scale factor.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.DIMLWD">
            <summary>
            Gets or sets the dimension line lineweight.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.DIMLWE">
            <summary>
            Gets or sets the extension line lineweight.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.DIMTIX">
            <summary>
            Gets or sets the force text inside extensions if nonzero.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.DIMTIH">
            <summary>
            Gets or sets the text inside horizontal if nonzero.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.DIMTOH">
            <summary>
            Gets or sets the text outside horizontal if nonzero.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.DIMSD1">
            <summary>
            Gets or sets a suppression of the first dimensional line.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.DIMSD2">
            <summary>
            Gets or sets a suppression of the second dimensional line.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.DIMSE1">
            <summary>
            Gets or sets a supression of the first extension line.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.DIMSE2">
            <summary>
            Gets or sets a supression of the second extension line.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.ArcDefPoint">
            <summary>
            Gets or sets the point defining dimension arc for angular dimensions (in object coordinates system).
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.RadDefPoint">
            <summary>
            Gets or sets the definition point for diameter, radius, and angular dimensions (in world coordinates system)
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.ArrowType1">
            <summary>
            Gets or sets first arrow block name.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.ArrowType2">
            <summary>
            Gets or sets second arrow block name
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.TextHeight">
            <summary>
            Gets or sets dimensioning text height.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.TextOffset">
            <summary>
            Gets or sets a gap between the dimension text and the dimension line.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.TextRotation">
            <summary>
            Gets or sets the rotation angle of the dimension text.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.TextAlign">
            <summary>
            Gets the integer value specifing text alignment or sets text alignment by this integer value.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.TextOverride">
            <summary>
            For internal uses
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.TextPosVert">
            <summary>
            Gets or sets text above dimension line if nonzero.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.Precision">
            <summary>
            Outdated.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.MeasurementsScale">
            <summary>
            Outdated.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.TextStyle">
            <summary>
            Gets or sets a style of the dimension text.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.AssociatedEntity">
            <summary>
            need help
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.Properties">
            <summary>
            Gets or sets CADDimension <see cref="T:CADImport.CADDimensionStyle"/>style
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.ForceText">
            <summary>
            Outdated.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.ArrowSize">
            <summary>
            Gets or sets dimensioning arrow size.
            </summary>
        </member>
        <member name="P:CADImport.CADDimension.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADDimension">CADDimension</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADDimension.DefPoint">
            <summary>
            Gets or sets a location of the dimension in a CAD image.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object representing a location 
            of the dimension in a CAD image.</value>
        </member>
        <member name="P:CADImport.CADDimension.Flags">
            <summary>
            Gets or sets a byte containing flags for the <see cref="T:CADImport.CADDimension">CADDimension</see> object.
            </summary>
            <remarks>The return values 0–6 are integer values that represent the dimension type. 
            0 = Rotated, horizontal, or vertical; 
            1 = Aligned;
            2 = Angular; 
            3 = Diameter; 
            4 = Radius;
            5 = Angular 3 point; 
            6 = Ordinate.
            Values 32, 64, and 128 are bit values, which are added to the integer values
            (value 32 is always set in R13 and later releases).
            32 = Indicates that the block is referenced by this dimension only.
            64 = Ordinate type. This is a bit value (bit 7) used only with integer value 6. 
            	If set, ordinate is X-type; if not set, ordinate is Y-type.
            128 = This is a bit value (bit 8) added to the other values if
            	the dimension text has been positioned at a user-defined location
            	rather than at the default location.</remarks>
        </member>
        <member name="P:CADImport.CADDimension.LinDefPoint1">
            <summary>
            Gets or sets an origin of the first extension line of the <see cref="T:CADImport.CADDimension">CADDimension</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object representing an origin of the first extension line.</value>
        </member>
        <member name="P:CADImport.CADDimension.LinDefPoint2">
            <summary>
            Gets or sets an origin of the second extension line of the <see cref="T:CADImport.CADDimension">CADDimension</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object representing an origin of the second extension line.</value>
        </member>
        <member name="P:CADImport.CADDimension.MiddlePoint">
            <summary>
            Gets or sets a middle point of the dimension text.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object representing a middle point of the dimension text.</value>
        </member>
        <member name="P:CADImport.CADDimension.Style">
            <summary>
            Gets or sets a style for the <see cref="T:CADImport.CADDimension">CADDimension</see> object.
            </summary>
            <value>A <see cref="T:CADImport.CADDimensionStyle">CADDimensionStyle</see> object.</value>
        </member>
        <member name="T:CADImport.CADBlockRecord">
            <summary>
            This class is for internal use only.
            </summary>
        </member>
        <member name="T:CADImport.CADSeqend">
            <summary>
            This class is for internal use only.
            </summary>
        </member>
        <member name="T:CADImport.CADAttdef">
            <summary>
            Represents an attribute in a CAD image.
            </summary>
            <remarks>Exists mostly inside the <b>Block</b> objects</remarks>
        </member>
        <member name="M:CADImport.CADAttdef.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADAttdef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADAttdef">CADAttdef</see> class.
            </summary>
        </member>
        <member name="P:CADImport.CADAttdef.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADAttdef">CADAttdef</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADAttdef.Tag">
            <summary>
            Gets or sets a name that identifies each occurrence of the attribute in a CAD image.
            </summary>
            <value>A <b>string</b> containing a name that identifies each occurrence of the attribute in a CAD image.</value>
        </member>
        <member name="P:CADImport.CADAttdef.Flags">
            <summary>
            Gets or sets a byte that contains flags for the <see cref="T:CADImport.CADAttdef">CADAttdef</see> object.
            </summary>
            <remarks>bit-coded values:</remarks>
            <remarks>1 = Attribute is invisible (does not appear);
            2 = This is a constant attribute;
            4 = Verification is required on input of this attribute;
            8 = Attribute is preset (no prompt during insertion).</remarks>
        </member>
        <member name="P:CADImport.CADAttdef.EntName">
            <summary>
            Gets a name of the <see cref="T:CADImport.CADAttdef">CADAttdef</see> object.
            </summary>
            <value>A string containing a name of the <see cref="T:CADImport.CADAttdef">CADAttdef</see> object.</value>
        </member>
        <member name="P:CADImport.CADAttdef.Value">
            <summary>
            Gets or sets <b>string</b> value of this <see cref="T:CADImport.CADAttdef">CADAttdef</see> object.
            </summary>
        </member>
        <member name="T:CADImport.CADAttrib">
            <summary>
            Allow to redefy <see cref="T:CADImport.CADAttdef">CADAttdef</see> object with corresponding tag property.
            </summary>
            <remarks>Can only exist inside <b>Insert</b> entity</remarks>
        </member>
        <member name="P:CADImport.CADAttrib.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADAttrib">CADAttrib</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADAttrib.Value">
            <summary>
            Gets or sets <b>string</b> value of this <see cref="T:CADImport.CADAttrib">CADAttrib</see> object.
            </summary>
        </member>
        <member name="P:CADImport.CADAttrib.Tag">
            <summary>
            Gets or sets a name that identifies each occurrence of the attribute in a CAD image.
            </summary>
            <value>A <b>string</b> containing a name that identifies each occurrence of the attribute in a CAD image.</value>
        </member>
        <member name="T:CADImport.CADSolid">
            <summary>
            Represents triangles and four-sided polygons in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADSolid.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADSolid.ChangeEntity(System.Double,System.Double,System.Double,CADImport.CADConverter)">
            <summary>
            Edits current entity by specified offset
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="dz">Z axis offset</param>
            <param name="conv"><see cref="T:CADImport.CADConverter"/> object
            for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see>
             of entity parameters</param>
            <returns>Returns <b>true</b> if an entity was changed; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADSolid.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADSolid">CADSolid</see> object to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADSolid">CADSolid</see> 
            object is loaded.</param>
        </member>
        <member name="M:CADImport.CADSolid.GetBoxPoints(CADImport.FPointProc,System.Boolean)">
            <summary>
            Checks if the <see cref="T:CADImport.CADSolid">CADSolid</see> object must be drawn during a drawing cycle.
            </summary>
            <param name="Proc">A <see cref="T:CADImport.FPointProc">FPointProc</see> delegate that references a 
            method for getting <see cref="T:CADImport.CADSolid">CADSolid</see> object's points.</param>
            <param name="Full">A boolean value indicating whether the method realizes full or reduced checking. 
            <b>true</b> if checking is full, <b>false</b> if checking is reduced.</param>
            <returns><b>true</b> if all points passed to the referenced method are real entity's points; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:CADImport.CADSolid.EntType">
            <summary>
            Gets a type of this <see cref="T:CADImport.CADSolid">CADSolid</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADSolid.Point2">
            <summary>
            Gets or sets a third point of the <see cref="T:CADImport.CADSolid">CADSolid</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object that specifies a third point of the <see cref="T:CADImport.CADSolid">CADSolid</see> entity.</value>
            <remarks>The first point of the <see cref="T:CADImport.CADSolid">CADSolid</see> object is specified by the <see cref="P:CADImport.CADPenLine.Point">Point</see> property. 
            The second point is specified by the <see cref="P:CADImport.CADLine.Point1">Point1</see> property.</remarks>
        </member>
        <member name="P:CADImport.CADSolid.Point3">
            <summary>
            Gets or sets a fourth point of the <see cref="T:CADImport.CADSolid">CADSolid</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object that specifies a fourth point of the <see cref="T:CADImport.CADSolid">CADSolid</see> entity.</value>
            <remarks>A first point of the <see cref="T:CADImport.CADSolid">CADSolid</see> object is specified by the <see cref="P:CADImport.CADPenLine.Point">Point</see> property. 
            The second point is specified by the <see cref="P:CADImport.CADLine.Point1">Point1</see> property. 
            The third point is specified by the <see cref="P:CADImport.CADSolid.Point2">Point2</see> property.</remarks>
        </member>
        <member name="P:CADImport.CADSolid.Box">
            <summary>
            Gets a three-dimensional box that encloses the <see cref="T:CADImport.CADSolid">CADSolid</see> entity.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for the <see cref="T:CADImport.CADSolid">CADSolid</see> object.</value>
        </member>
        <member name="T:CADImport.CADTrace">
            <summary>
            Trace entity
            </summary>
        </member>
        <member name="P:CADImport.CADTrace.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADTrace">CADTrace</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.CAD3dFace">
            <summary>
            Represents a three-dimensional three- or four-sided surface in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CAD3dFace.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity 
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CAD3dFace.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CAD3DSolid">CAD3DSolid</see> entity
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CAD3dFace.Flags">
            <summary>
            Gets or sets an integer value that provides flags for the <see cref="T:CADImport.CAD3dFace">CAD3DFace</see> object.
            </summary>
            <remarks>bit-coded values (default = 0):</remarks>
            <remarks>1 = first edge is invisible;
            2 = second edge is invisible;
            4 = third edge is invisible;
            8 = fourth edge is invisible.</remarks>
        </member>
        <member name="T:CADImport.CADLayout">
            <summary>
            Represents a layout of the CAD drawing.
            </summary>
            <remarks>A layout is used to compose a CAD drawing for plotting. 
            It may include a title block, one or more viewports, and annotations.</remarks>
        </member>
        <member name="M:CADImport.CADLayout.AddEntity(CADImport.CADEntity)">
            <summary>
            Adds a new child <see cref="T:CADImport.CADEntity">entity</see>.
            </summary>
            <param name="E">Child entity</param>
            <returns>Returns true if a child entity has been added.</returns>
        </member>
        <member name="M:CADImport.CADLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADLayout">CADLayout</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADLayout.Iterate(CADImport.CADConverter,CADImport.CADEntityProc,CADImport.CADEntityProc)">
            <summary>
            Invokes the referenced (by the specified delegate) method for each CAD entity 
            belonging to the specified <see cref="T:CADImport.CADLayout">CADLayout</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> that has loaded the <see cref="T:CADImport.CADLayout">CADLayout</see>.</param>
            <param name="Proc">A <see cref="T:CADImport.CADEntityProc">CADEntityProc</see> delegate 
            that specifies a method to be invoked.</param>
        </member>
        <member name="M:CADImport.CADLayout.GetIsModel">
            <summary>
            Gets a value indicating whether this <see cref="T:CADImport.CADLayout">CADLayout</see> is a model space layout.
            </summary>
            <returns><b>true</b> if this <see cref="T:CADImport.CADLayout">CADLayout</see> is a model space layout; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADLayout.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADLayout">CADLayout</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADLayout">CADLayout</see> is loaded.</param>
        </member>
        <member name="P:CADImport.CADLayout.Entities">
            <summary>
            Gets a collection of entities contained in the loaded CAD image.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> containing 
            the entities in the loaded CAD image.</value>
        </member>
        <member name="P:CADImport.CADLayout.Count">
            <summary>
            Gets a number of entities on this <see cref="T:CADImport.CADLayout">CADLayout</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADLayout.Name">
            <summary>
            Gets or sets a name of the layout which read from a CAD file.
            </summary>
            <value>A string containing a layout name.</value>
        </member>
        <member name="P:CADImport.CADLayout.PaperSpaceBlock">
            <summary>
            Gets or sets a block containing entities that will be drawn to a specified layout.
            </summary>
            <value>A <see cref="T:CADImport.CADBlock">CADBlock</see> object that contains entities that will be drawn to a specified layout.</value> 
        </member>
        <member name="P:CADImport.CADLayout.PSLTScalingByViewport">
            <summary>
            Gets or sets using PSLTSCALE value for the <see cref="T:CADImport.CADLayout">CADLayout</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADLayout.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:CADImport.CADLayout">CADLayout</see> is empty.
            </summary>
            <value><b>true</b> if this <see cref="T:CADImport.CADLayout">CADLayout</see> doesn't contain any entities; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADLayout.Box">
            <summary>
            Gets or sets a three-dimensional box that encloses the <see cref="T:CADImport.CADLayout">CADLayout</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for the <see cref="T:CADImport.CADLayout">CADLayout</see> object.</value>
        </member>
        <member name="T:CADImport.CADPoint">
            <summary>
            Represents a point in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADPoint">CADPoint</see> class.
            </summary>
            <example>
            <p>Creating a new <see cref="T:CADImport.CADPoint">CADPoint</see> object example:</p>
            <p><c>[C#]</c></p>	
            <code> 
            CreateNewImage();			
            Point p1 = new Point(200, 200);
            CADPoint point = new CADPoint();
            point.Color = CADConst.clNone;
            point.Point = GetRealPoint(p1.X, p1.Y);
            point.LineWeight = 0.1;
            cadImage.Converter.OnCreate(point);
            point.Handle = point.GetHashCode();		
            point.KeyEnt = point.Handle.ToString();	
            cadImage.Converter.OnCreate(point);		
            cadImage.CurrentLayout.Entities.Add(point);			
            EditorCADPictureBox.Invalidate();		
            </code>	
            </example>		 
            <seealso cref="T:CADImport.DPoint"/>		 
            <seealso cref="T:CADImport.CADPoint"/>		 
            <seealso cref="T:CADImport.CADImage"/>		 
            <seealso cref="F:CADImport.CADConst.clNone"/>				
        </member>
        <member name="M:CADImport.CADPoint.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADPoint">CADPoint</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADPoint">CADPoint</see> 
            is loaded.</param>
        </member>
        <member name="M:CADImport.CADPoint.GetBoxPoints(CADImport.FPointProc,System.Boolean)">
            <summary>
            Checks if the <see cref="T:CADImport.CADPoint">CADPoint</see> must be drawn during a drawing cycle.
            </summary>
            <param name="Proc">A <see cref="T:CADImport.FPointProc">FPointProc</see> delegate that references 
            methods for getting <see cref="T:CADImport.CADPoint">CADPoint</see>.</param>
            <param name="Full">A boolean value indicating whether the method realizes full or reduced checking. 
            <b>true</b> if checking is full, <b>false</b> if checking is reduced.</param>
            <returns><b>true</b> if all points passed to the referenced method are real entity's points; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADPoint.ChangeEntity(CADImport.DPoint[],CADImport.CADConverter)">
            <summary>
            Changes current <see cref="T:CADImport.CADPoint">CADPoint</see> object by specified points
            </summary>
            <param name="pts">Points, which are set for an entity</param>
            <param name="conv"><see cref="T:CADImport.CADConverter">CADConverter</see> object
            for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see> of the entity</param>
            <returns>Returns <b>true</b> if the entity was changed</returns>
        </member>
        <member name="M:CADImport.CADPoint.DrawEntityTrace(System.Int32,System.Int32,CADImport.CADImage,System.Windows.Forms.Control)">
            <summary>
            Implements drawing of entity with specified offset to specified <see cref="T:System.Windows.Forms.Control"/>
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="img"><see cref="T:CADImport.CADImage"/> object for 
            <see cref="M:CADImport.CADImage.GetPoint(CADImport.DPoint)">getting display coordinates</see> of the entity</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> for drawing of <see cref="T:CADImport.CADEntity">Entity</see></param>
        </member>
        <member name="M:CADImport.CADPoint.MakeMarkers(CADImport.CADCollection{CADImport.Professional.Marker})">
            <summary>
            Creates <see cref="T:CADImport.Professional.Marker">markers</see> for a <see cref="T:CADImport.CADPoint"/> and places them
            to the specified collection
            </summary>
            <param name="collectMarker">A <see cref="T:System.Collections.ArrayList">collection</see> where to <see cref="T:CADImport.Professional.Marker">markers</see> are placed.</param>
        </member>
        <member name="M:CADImport.CADPoint.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CADPoint.EntType">
            <summary>
            Gets a type of this <see cref="T:CADImport.CADPoint">CADPoint</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADPoint.Box">
            <summary>
            Gets a three-dimensional box that encloses the <see cref="T:CADImport.CADPoint">CADPoint</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for the <see cref="T:CADImport.CADPoint">CADPoint</see> entity.</value>
        </member>
        <member name="P:CADImport.CADPoint.Extrusion">
            <summary>
            Gets or sets a direction of axis Z belonging to the coordinate 
            system of this <see cref="T:CADImport.CADPoint">CADPoint</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object specifying a direction of axis Z 
            belonging to the coordinate system of this <see cref="T:CADImport.CADPoint">CADPoint</see> object.</value>
        </member>
        <member name="P:CADImport.CADPoint.LineWeight">
            <summary>
            Gets or sets a thickness of lines for this <see cref="T:CADImport.CADPoint">CADPoint</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADPoint.ZThick">
            <summary>
            Gets or sets a <see cref="T:CADImport.CADPoint">CADPoint</see> entity thickness.
            </summary>
        </member>
        <member name="P:CADImport.CADPoint.Points">
            <summary>
            Gets a collection of points for drawing <see cref="T:CADImport.CADPoint">CADPoint</see> object.
            </summary>
        </member>
        <member name="P:CADImport.CADPoint.Color">
            <summary>
            Gets or sets a color of the <see cref="T:CADImport.CADPoint"/> entity.
            </summary>
        </member>
        <member name="T:CADImport.CADVPort">
            <summary>
            Represents a viewport in a model space.
            </summary>
        </member>
        <member name="M:CADImport.CADVPort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADVPort">CADVPort</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADVPort.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADVPort">CADVPort</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADVPort">CADVPort</see> is loaded.</param>
        </member>
        <member name="P:CADImport.CADVPort.ViewTarget">
            <summary>
            Gets or sets a view target of this <see cref="T:CADImport.CADVPort">CADVPort</see> object.
            </summary>
        </member>
        <member name="P:CADImport.CADVPort.UCSVP">
            <summary>
            For internal uses
            </summary>
        </member>
        <member name="P:CADImport.CADVPort.UCSXDir">
            <summary>
            For internal uses
            </summary>
        </member>
        <member name="P:CADImport.CADVPort.UCSYDir">
            <summary>
            For internal uses
            </summary>
        </member>
        <member name="P:CADImport.CADVPort.UCSOrigin">
            <summary>
            For internal uses
            </summary>
        </member>
        <member name="P:CADImport.CADVPort.ViewCenterPoint">
            <summary>
            Gets or sets a view center point of this <see cref="T:CADImport.CADVPort">CADVPort</see> object.
            </summary>
        </member>
        <member name="P:CADImport.CADVPort.ViewAspectRatio">
            <summary>
            Gets or sets a view aspect ratio of this <see cref="T:CADImport.CADVPort">CADVPort</see> object.
            </summary>
        </member>
        <member name="P:CADImport.CADVPort.CircleZoomPercent">
            <summary>
            Gets or sets a circle zoom percent of this <see cref="T:CADImport.CADVPort">CADVPort</see> object.
            </summary>
        </member>
        <member name="P:CADImport.CADVPort.Name">
            <summary>
            Gets or sets a name of this <see cref="T:CADImport.CADVPort"/> object.
            </summary>
        </member>
        <member name="P:CADImport.CADVPort.ViewDirection">
            <summary>
            Gets or sets a view direction of this <see cref="T:CADImport.CADVPort">CADVPort</see> object.
            </summary>
        </member>
        <member name="P:CADImport.CADVPort.ViewHeight">
            <summary>
            Gets or sets a view height of this <see cref="T:CADImport.CADVPort">CADVPort</see> object.
            </summary>
        </member>
        <member name="P:CADImport.CADVPort.ViewTwistAngle">
            <summary>
            Gets or sets a view twist angle for this <see cref="T:CADImport.CADVPort">CADVPort</see> object.
            </summary>
        </member>
        <member name="T:CADImport.CADLineType">
            <summary>
            Represents a linetype in a CAD image.
            </summary>
            <remarks>A linetype is a repeating pattern of dashes, dots, and blank spaces 
            displayed in a line or a curve. Linetypes can be assigned to objects either 
            by layer or by specifying the linetype explicitly, independent of layers.</remarks> 
        </member>
        <member name="M:CADImport.CADLineType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADLineType">CADLineType</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADLineType.Loaded(CADImport.CADConverter)">
            <summary>
            Loads the <see cref="T:CADImport.CADLineType">CADLineType</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADLineType">CADLineType</see> 
            is loaded.</param>
        </member>
        <member name="M:CADImport.CADLineType.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CADLineType.Lines">
            <summary>
            Gets a type of the line used by this <see cref="T:CADImport.CADLineType">CADLineType</see> object.
            </summary>
            <value> An object of the <see cref="T:CADImport.SGLines">sgLines</see> class that specifies a type of the line.</value>
        </member>
        <member name="P:CADImport.CADLineType.MaxSizeOfPatterns">
            <summary>
            Gets a max size of pattern.
            </summary>
        </member>
        <member name="T:CADImport.CADXRef">
            <summary>
            Represents an external reference in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADXRef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADXRef">CADXRef</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADXRef.#ctor(CADImport.CADConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADXRef">CADXRef</see> class.
            </summary>
            <param name="AConverter"></param>
        </member>
        <member name="M:CADImport.CADXRef.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADXRef.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADXRef">CADXRef</see> object to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADXRef">CADXRef</see> object is loaded.</param>
        </member>
        <member name="M:CADImport.CADXRef.AddCADImage(System.String)">
            <summary>
            Adds a CAD image from the specified file to the CAD drawing that owns this external reference.
            </summary>
            <param name="AFilePath">A <b>string</b> containing a full path to the referenced file.</param>
            <returns><b>true</b> if a CAD image from the referenced file has been added successfully; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADXRef.LoadFromWeb(System.String)">
            <summary>
            Loads specified file from web
            </summary>
            <param name="path">Web path to load the file</param>
            <returns>Returns <b>true</b> if the file has been loaded</returns>
        </member>
        <member name="M:CADImport.CADXRef.LoadFile(System.String)">
            <summary>
            Loads a file from web by specified path
            </summary>
            <param name="path">A path to file</param>
            <returns>Returns <b>true</b> if the file has been loaded</returns>
        </member>
        <member name="P:CADImport.CADXRef.EntType">
            <summary>
            Gets a type of this <see cref="T:CADImport.CADXRef">CADXRef</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADXRef.Box">
            <summary>
            Gets a three-dimensional box that encloses the <see cref="T:CADImport.CADXRef">CADXref</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for the <see cref="T:CADImport.CADXRef">CADXref</see> entity.</value>
        </member>
        <member name="P:CADImport.CADXRef.Path">
            <summary>
            Gets a full path to the referenced file.
            </summary>
            <remarks>A <b>string</b> containing a full path to the referenced file.</remarks>
        </member>
        <member name="P:CADImport.CADXRef.Name">
            <summary>
            Gets a name of the referenced file.
            </summary>
            <remarks>A <b>string</b> containing a name of the referenced file.</remarks>
        </member>
        <member name="P:CADImport.CADXRef.CADImage">
            <summary>
            Gets a CAD image received from the referenced file.
            </summary>
            <value>An <see cref="T:System.Object">Object</see> representing an image from the referenced file.</value>
        </member>
        <member name="T:CADImport.CADViewPort">
            <summary>
            Represents a layout viewport in a CAD drawing.
            </summary>
            <remarks>Viewport is a window through that a model space can be viewed.</remarks>
        </member>
        <member name="M:CADImport.CADViewPort.GetDrawModel">
            <summary>
            Returns a value indicating whether a model space can be displayed in the viewport.
            </summary>
            <returns><b>true</b> if a model space can be displayed in the viewport; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADViewPort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADViewPort">CADViewPort</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADViewPort.GetBoundary(CADImport.CADConverter)">
            <summary>
            Gets a boundary of the <see cref="T:CADImport.CADViewPort">CADViewPort</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> that provides an entity specifying 
            a shape of the viewport's boundary.</param>
            <returns>A <see cref="T:CADImport.CADEntity">CADEntity</see> that specifies a shape of the viewport's boundary.</returns>
        </member>
        <member name="M:CADImport.CADViewPort.SetBoundary(CADImport.CADEntity)">
            <summary>
            Sets a boundary of the <see cref="T:CADImport.CADViewPort">CADViewPort</see>.
            </summary>
            <param name="ABoundary">A <see cref="T:CADImport.CADEntity">CADEntity</see> that specifies 
            a shape of the viewport's boundary.</param>
        </member>
        <member name="M:CADImport.CADViewPort.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADViewPort">CADViewPort</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADViewPort">CADViewPort</see> is loaded.</param>
        </member>
        <member name="M:CADImport.CADViewPort.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CADViewPort.EntType">
            <summary>
            Gets a type of this <see cref="T:CADImport.CADViewPort">CADViewPort</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADViewPort.FrozenLayers">
            <summary>
            Gets or sets a list of frozen layers in the current viewport.
            </summary>
        </member>
        <member name="P:CADImport.CADViewPort.ViewDirection">
            <summary>
            Gets or sets a view direction vector in the world coordinate system (WCS).
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object specifying a view direction vector.</value>
        </member>
        <member name="P:CADImport.CADViewPort.ViewTarget">
            <summary>
            Gets or sets a view target point in the world coordinate system (WCS).
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object representing a view target point.</value>
        </member>
        <member name="P:CADImport.CADViewPort.ViewTwistAngle">
            <summary>
            Gets or sets a rotation angle for the image displayed in the <see cref="T:CADImport.CADViewPort">CADViewPort</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADViewPort.VisibleBoundary">
            <summary>
            Gets or sets a value indicating whether the viewport's boundary is visible.
            </summary>
            <value><b>true</b> if the boundary is visible; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADViewPort.MSpaceCenter">
            <summary>
            Gets or sets a view center point in display coordinate system (DCS).
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object representing a view center point in display coordinate system (DCS).</value>
        </member>
        <member name="P:CADImport.CADViewPort.MSpaceHeight">
            <summary>
            Gets or sets a height of the model space displayed in the viewport and measured in model space units.
            </summary>
        </member>
        <member name="P:CADImport.CADViewPort.PSpaceCenter">
            <summary>
            Gets or sets a view center point in world coordinate system (WCS).
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object representing a view center point in world coordinate system (WCS).</value>
        </member>
        <member name="P:CADImport.CADViewPort.PSpaceHeight">
            <summary>
            Gets or sets a height of the model space displayed in the viewport and measured in paper space units.
            </summary>
        </member>
        <member name="P:CADImport.CADViewPort.PSpaceWidth">
            <summary>
            Gets or sets a width of the model space displayed in the viewport and measured in paper space units.
            </summary>
        </member>
        <member name="P:CADImport.CADViewPort.Box">
            <summary>
            Gets a three-dimensional box that encloses the <see cref="T:CADImport.CADViewPort">CADViewPort</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the box that encloses
            the <see cref="T:CADImport.CADViewPort">CADViewPort</see> object.</value>
        </member>
        <member name="T:CADImport.CADSortEntsTable">
            <summary>
            Represents a table that contains handles of entities before sorting.
            </summary>
        </member>
        <member name="M:CADImport.CADSortEntsTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADSortEntsTable">CADSortEntsTable</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADSortEntsTable.ReplaceHandles(CADImport.CADEntityCollection,System.Collections.Generic.List{CADImport.CADEntity},System.Collections.Generic.List{System.UInt64})">
            <summary>
            Replaces an old handle with a new one for the specified entity.
            </summary>
            <param name="entities">A <see cref="T:CADImport.CADObjectEntity">CADObjectEntity</see> whose handle will be replaced.</param>
            <returns><b>true</b> if an entity's handle has been replaced with a new one; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADSortEntsTable.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADSortEntsTable">CADSortEntsTable</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="aConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADSortEntsTable">CADSortEntsTable</see> is loaded.</param>
        </member>
        <member name="P:CADImport.CADSortEntsTable.HandlesNew">
            <summary>
            Gets a list of new handles of CAD entities.
            </summary>
        </member>
        <member name="P:CADImport.CADSortEntsTable.HandlesOld">
            <summary>
            Gets a list of old handles of CAD entities.
            </summary>
        </member>
        <member name="T:CADImport.CADImageDef">
            <summary>
            Represents a raster image inserted in the CAD drawing.
            </summary>
        </member>
        <member name="M:CADImport.CADImageDef.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADImageDef.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADImageDef">CADImageDef</see> object to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADImageDef">CADImageDef</see> object is loaded.</param>
        </member>
        <member name="M:CADImport.CADImageDef.LoadFile(System.String)">
            <summary>
            Loads a file by specified path
            </summary>
            <param name="path">A path to file</param>
            <returns>Returns <b>true</b> if the file has been loaded</returns>
        </member>
        <member name="M:CADImport.CADImageDef.LoadFromWeb(System.String)">
            <summary>
            Loads specified file from web
            </summary>
            <param name="path">Web path to loading file</param>
            <returns>Returns <b>true</b> if the file has loaded, <b>false</b> otherwise</returns>
        </member>
        <member name="P:CADImport.CADImageDef.FileName">
            <summary>
            Gets or sets an image file name
            </summary>
        </member>
        <member name="P:CADImport.CADImageDef.Size">
            <summary>
            Gets the size of <see cref="T:CADImport.CADImageDef">CADImageDef</see> picture.
            </summary>
        </member>
        <member name="P:CADImport.CADImageDef.Picture">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Bitmap"/> object.
            </summary>
        </member>
        <member name="P:CADImport.CADImageDef.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADImageDef">CADImageDef</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.CADImageEnt">
            <summary>
            Represents a reference to the raster image in the CAD drawing.
            </summary>
            <remarks>A CAD drawing can have many references to the same raster image.</remarks>
        </member>
        <member name="M:CADImport.CADImageEnt.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:CADImport.CADImageEnt">CADImageEnt</see> class.
             </summary>
             <example>
             <p>Creating a new <see cref="T:CADImport.CADImageEnt">CADImageEnt</see> object example:</p>
            <p>[C#]</p>
            <code>		
            	CreateNewImage();			
            	Point p1 = new Point(100, 100);
            	Point p2 = new Point(300, 300);
            	Rectangle r1 = CADConst.SetNewRect(p1, p2);
            	DPoint pt1 = GetRealPoint(r1.X, r1.Y);				
            	DPoint pt2 = GetRealPoint(r1.Right, r1.Bottom);				
            	CADImageEnt imgEnt = new CADImageEnt();
            	string path = @"http://www.cadsofttools.com/en/templates/moveax/images/01.gif";
            	Bitmap bmpTmp = null;			
            	Stream tmpStream;
            	try
            	{
            		tmpStream = CADConst.LoadDataFromWeb(path);
            		bmpTmp = new Bitmap(tmpStream);
            		tmpStream.Close();
            	}
            	catch
            	{
            		//error load file from web
            		return;
            	}			
            	imgEnt.SetImage(bmpTmp);
            	imgEnt.Color = CADConst.clNone;
            	imgEnt.Point = new DPoint(pt1.X, pt1.Y, 0);
            	imgEnt.Point1 = new DPoint(Math.Abs(pt2.X - pt1.X), -Math.Abs(pt2.Y - pt1.Y), 0);				
            	imgEnt.Point2 = new DPoint(1.0, 1.0, 0.0);
            	imgEnt.Point3 = new DPoint(1.0, 1.0, 0.0);
            	imgEnt.Rotate = 0.0;
            	imgEnt.LineWeight = 0.1;
            	imgEnt.Layer = (CADLayer)cadImage.Converter.Layers[0];
            	imgEnt.Loaded(cadImage.Converter);
            	imgEnt.Point2 = new DPoint(0.0, 0.0, 0.0);
            	imgEnt.Rotate = 0.0;			
            	imgEnt.Handle = imgEnt.GetHashCode();		
            	imgEnt.KeyEnt = imgEnt.Handle.ToString();	
            	cadImage.Converter.OnCreate(imgEnt);		
            	cadImage.CurrentLayout.Entities.Add(imgEnt);			
            	EditorCADPictureBox.Invalidate();		
            	</code>
             </example>		
            	<seealso cref="T:CADImport.DPoint"/>		 
            	<seealso cref="T:CADImport.CADImageEnt"/>		 
            	<seealso cref="T:CADImport.CADImage"/>		 
            	<seealso cref="F:CADImport.CADConst.clNone"/>		 
        </member>
        <member name="M:CADImport.CADImageEnt.AddPt(CADImport.DPoint,CADImport.DPoint@)">
            <summary>
            Performs an addition of coordinates of two points.
            </summary>
            <param name="Src">A <see cref="T:CADImport.DPoint">DPoint</see> object representing a first point to add.</param>
            <param name="Dst">A <see cref="T:CADImport.DPoint">DPoint</see> object representing a second point to add. 
            The summarized coordinates will be assigned to this point.</param>
        </member>
        <member name="M:CADImport.CADImageEnt.ChangeEntity(CADImport.DPoint[],CADImport.CADConverter)">
            <summary>
            Changes current <see cref="T:CADImport.CADImageEnt">CADImageEnt</see> object by specified points
            </summary>
            <param name="pts">Points, which are set for an entity</param>
            <param name="conv"><see cref="T:CADImport.CADConverter">CADConverter</see> object
            for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see> of entity</param>
            <returns>Returns <b>true</b> if the entity was changed</returns>
        </member>
        <member name="M:CADImport.CADImageEnt.ChangeEntity(System.Double,System.Double,System.Double,CADImport.CADConverter)">
            <summary>
            Edits current entity by specified offset
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="dz">Z axis offset</param>
            <param name="conv"><see cref="T:CADImport.CADConverter"/> object
            for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see>
             of entity parameters</param>
            <returns>Returns <b>true</b> if the entity was changed</returns>
        </member>
        <member name="M:CADImport.CADImageEnt.DrawEntityTrace(System.Int32,System.Int32,CADImport.CADImage,System.Windows.Forms.Control)">
            <summary>
            Implements drawing of entity with specified offset to specified 
            <see cref="T:System.Windows.Forms.Control"/>
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="img"><see cref="T:CADImport.CADImage"/> object for 
            <see cref="M:CADImport.CADImage.GetPoint(CADImport.DPoint)">getting display coordinates</see> of the entity</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> for drawing of <see cref="T:CADImport.CADEntity"/></param>
        </member>
        <member name="M:CADImport.CADImageEnt.MakeMarkers(CADImport.CADCollection{CADImport.Professional.Marker})">
            <summary>
            Creates <see cref="T:CADImport.Professional.Marker">markers</see> for a <see cref="T:CADImport.CADImageEnt"/> and places them
            to the specified collection
            </summary>
            <param name="collectMarker">A <see cref="T:System.Collections.ArrayList">collection</see> where to <see cref="T:CADImport.Professional.Marker">markers</see> are placed.</param>
        </member>
        <member name="M:CADImport.CADImageEnt.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADImageEnt">CADImageEnt</see> object to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADImageEnt">CADImageEnt</see> object is loaded.</param>
        </member>
        <member name="M:CADImport.CADImageEnt.SetImage(System.Drawing.Image)">
            <summary>
            Sets an image referenced by this <see cref="T:CADImport.CADImageEnt">CADImageEnt</see> object to the specified image.
            </summary>
            <param name="image">An <see cref="T:System.Drawing.Image">Image</see> object that will be set 
            as image referenced by this <see cref="T:CADImport.CADImageEnt">CADImageEnt</see> instance.</param>
        </member>
        <member name="M:CADImport.CADImageEnt.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADImageEnt.ApplyBox">
            <summary>
            Calculates a box of the current entity.
            </summary>
        </member>
        <member name="P:CADImport.CADImageEnt.FlagsEx">
            <summary>
            Gets or sets a flags for drawing a <see cref="T:CADImport.CADImageEnt">CADImageEnt</see>. 
            </summary>
        </member>
        <member name="P:CADImport.CADImageEnt.Point1">
            <summary>
            This proprty is obsolete. We recommend to use UVector instead of it.
            </summary>
        </member>
        <member name="P:CADImport.CADImageEnt.Point2">
            <summary>
            This proprty is obsolete. We recommend to use VVector instead of it.
            </summary>
        </member>
        <member name="P:CADImport.CADImageEnt.Point3">
            <summary>
            This proprty is obsolete. We recommend to use Size instead of it.
            </summary>
        </member>
        <member name="P:CADImport.CADImageEnt.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADImageEnt">CADImageEnt</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADImageEnt.Picture">
            <summary>
            Gets an image referenced by this <see cref="T:CADImport.CADImageEnt">CADImageEnt</see> object.
            </summary>
            <value>A <see cref="T:System.Drawing.Image">Image</see> object representing a referenced raster image.</value>
            <remarks>A referenced raster image in the CAD drawing is represented by the <see cref="T:CADImport.CADImageDef">CADImageDef</see> object.</remarks>
        </member>
        <member name="P:CADImport.CADImageEnt.ImageDef">
            <summary>
            Gets or sets a raster image in the CAD drawing.
            </summary>
        </member>
        <member name="P:CADImport.CADImageEnt.Rotate">
            <summary>
            Gets or sets a rotation angle of the referenced raster image when inserting it into the CAD drawing.
            </summary>
        </member>
        <member name="P:CADImport.CADImageEnt.IsMonoChrome">
            <summary>
            Gets or sets a value indicating whether the referenced raster image is monochrome.
            </summary>
            <value><b>true</b> if the referenced raster image is monochrome; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADImageEnt.EntName">
            <summary>
            Gets a name of the <see cref="T:CADImport.CADImageEnt">CADImageEnt</see> object.
            </summary>
            <value>A string containing a name of the <see cref="T:CADImport.CADImageEnt">CADImageEnt</see> object.</value>
        </member>
        <member name="P:CADImport.CADImageEnt.Transparency">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:CADImport.CADImageEnt">CADImageEnt</see> is transparent. 
            </summary>
        </member>
        <member name="P:CADImport.CADImageEnt.TransparentColor">
            <summary>
            Gets or sets transparent color.
            </summary>
        </member>
        <member name="T:CADImport.CAD2DCurve">
            <summary>
            The abstract class. Represents a hatch border as a curve line.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DCurve.Clone">
            <summary>
            Creates a new object that is a copy of a <see cref="T:CADImport.CAD2DCurve">CAD2DCurve</see> inherited object.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DCurve.Dispose">
            <summary>
            Releases all resources used by a <see cref="T:CADImport.CAD2DCurve">CAD2DCurve</see> inherited object.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DCurve.EndPoint">
            <summary>
            Gets or sets the end point for a <see cref="T:CADImport.CAD2DCurve">CAD2DCurve</see> inherited object.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DCurve.StartPoint">
            <summary>
            Gets or sets the start point for a <see cref="T:CADImport.CAD2DCurve">CAD2DCurve</see> inherited object.
            </summary>
        </member>
        <member name="T:CADImport.CAD2DArc">
            <summary>
            Represents a hatch border as an arc curve.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DArc.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:CADImport.CAD2DArc">CAD2DArc</see> class instance.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DArc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CAD2DArc">CAD2DArc</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DArc.Clone">
            <summary>
            Creates and returns a copy of the current <see cref="T:CADImport.CAD2DArc">CAD2DArc</see> class instance. 
            </summary>
            <returns>A new object that is a copy of the <see cref="T:CADImport.CAD2DArc">CAD2DArc</see> class instance.</returns>
        </member>
        <member name="P:CADImport.CAD2DArc.CenterPoint">
            <summary>
            Gets or sets the center point of the <see cref="T:CADImport.CAD2DArc">CAD2DArc</see> instance.
            </summary>
            <value>A <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> object representing the center point 
            of the <see cref="T:CADImport.CAD2DArc">CAD2DArc</see> instance.</value>
        </member>
        <member name="P:CADImport.CAD2DArc.EndParam">
            <summary>
            Gets or sets the end angle of the <see cref="T:CADImport.CAD2DArc">CAD2DArc</see> instance.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DArc.Radius">
            <summary>
            Gets or sets the radius of the <see cref="T:CADImport.CAD2DArc">CAD2DArc</see> instance.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DArc.StartParam">
            <summary>
            Gets or sets the start angle of the <see cref="T:CADImport.CAD2DArc">CAD2DArc</see> instance.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DArc.CounterClockWise">
            <summary>
            Gets or sets arc direction.				
            </summary>
            <remarks>
            if <b>true</b> arc is CounterClockWise, else Arc is ClockWise
            </remarks>
        </member>
        <member name="P:CADImport.CAD2DArc.EndPoint">
            <summary>
            Gets the end point of the <see cref="T:CADImport.CAD2DArc">CAD2DArc</see> instance.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DArc.StartPoint">
            <summary>
            Gets the start point of the<see cref="T:CADImport.CAD2DArc">CAD2DArc</see> instance.
            </summary>
        </member>
        <member name="T:CADImport.CAD2DEllipse">
            <summary>
            Represents a hatch border as an ellipse.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DEllipse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CAD2DEllipse">CAD2DEllipse</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DEllipse.Clone">
            <summary>
            Creates and returns a copy of the current <see cref="T:CADImport.CAD2DEllipse">CAD2DEllipse</see> class instance. 
            </summary>
            <returns>A new object that is a copy of the <see cref="T:CADImport.CAD2DEllipse">CAD2DEllipse</see> class instance.</returns>
        </member>
        <member name="P:CADImport.CAD2DEllipse.MajorPoint">
            <summary>
            Gets or sets the ellipse's end point of major axis relative to its center point.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DEllipse.IsAngleInParam">
            <summary>
            Gets or sets a value indicating which type of angle specifies the start and end points of this <see cref="T:CADImport.CAD2DEllipse">CAD2DEllipse</see>.  
            </summary>
            <value><b>true</b> if the start and end points are specified by the angle formed by two radiuses of the external circumference; 
            <b>false</b> if the start and end points are specified by the angle formed by two radiuses of the internal circumference.</value>
            <remarks>Each ellipse is specified by two circumferences: internal and external. The internal circumference is incorporated by the ellipse 
            and its diameter coincides with the ellipse's minor axis. The external circumference incorporates the ellipse 
            and its diameter coincides with the ellipse's major axis.</remarks>
        </member>
        <member name="T:CADImport.CAD2DLine">
            <summary>
            Represents a hatch border as a straight line.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DLine.Clone">
            <summary>
            Creates and returns a copy of the current <see cref="T:CADImport.CAD2DLine">CAD2DLine</see> class instance. 
            </summary>
            <returns>A new object that is a copy of the <see cref="T:CADImport.CAD2DLine">CAD2DLine</see> class instance.</returns>
        </member>
        <member name="P:CADImport.CAD2DLine.EndPoint">
            <summary>
            Gets or sets the end point of the <see cref="T:CADImport.CAD2DLine">CAD2DLine</see> instance.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DLine.StartPoint">
            <summary>
            Gets or sets the start point of the <see cref="T:CADImport.CAD2DLine">CAD2DLine</see> instance.
            </summary>
        </member>
        <member name="T:CADImport.CAD2DPolyline">
            <summary>
            Represents a hatch border as a polyline.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DPolyline.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:CADImport.CAD2DPolyline">CAD2DPolyline</see> class instance.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DPolyline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CAD2DPolyline">CAD2DPolyline</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DPolyline.AddVertex(CADImport.CAD2DPoint)">
            <summary>
            Adds a new <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see>
            into <see cref="P:CADImport.CAD2DPolyline.Vertexes">points collection</see>
            of the <see cref="T:CADImport.CAD2DPolyline">CAD2DPolyline</see> instance.
            </summary>
            <param name="point">A 2D point to add</param>
        </member>
        <member name="M:CADImport.CAD2DPolyline.Clone">
            <summary>
            Creates and returns a copy of the current <see cref="T:CADImport.CAD2DPolyline">CAD2DPolyline</see> class instance. 
            </summary>
            <returns>A new object that is a copy of the <see cref="T:CADImport.CAD2DPolyline">CAD2DPolyline</see> class instance.</returns>
        </member>
        <member name="P:CADImport.CAD2DPolyline.Vertexes">
            <summary>
            Represents list of vertexes of the <see cref="T:CADImport.CAD2DPolyline">CAD2DPolyline</see> instance.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DPolyline.Bulges">
            <summary>
            Represents list of bulges of the <see cref="T:CADImport.CAD2DPolyline">CAD2DPolyline</see> instance.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DPolyline.Points">
            <summary>
            Represents list of points of the <see cref="T:CADImport.CAD2DPolyline">CAD2DPolyline</see> instance.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DPolyline.Closed">
            <summary>
            Gets or sets <b>true</b> if <see cref="T:CADImport.CAD2DPolyline">CAD2DPolyline</see> curve is closed,
            else gets or sets <b>false</b>.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DPolyline.EndPoint">
            <summary>
            Gets or sets the end point of the <see cref="T:CADImport.CAD2DPolyline">CAD2DPolyline</see> instance.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DPolyline.StartPoint">
            <summary>
            Gets or sets the start point of the <see cref="T:CADImport.CAD2DPolyline">CAD2DPolyline</see> instance.
            </summary>
        </member>
        <member name="T:CADImport.CAD2DSpline">
            <summary>
            Represents a hatch border as a spline curve.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DSpline.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:CADImport.CAD2DSpline">CAD2DSpline</see> class instance.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DSpline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CAD2DSpline">CAD2DSpline</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DSpline.AddControl(CADImport.CAD2DPoint)">
            <summary>
            Adds a 2D point to the <see cref="T:CADImport.CAD2DSpline">CAD2DSpline</see> instance.
            </summary>
            <param name="point">The <see cref="T:CADImport.CAD2DPoint">CAD2DPoint</see> for adding to the spline</param>		
        </member>
        <member name="M:CADImport.CAD2DSpline.AddKnot(System.Double)">
            <summary>
            Adds a Knot value to the <see cref="T:CADImport.CAD2DSpline">CAD2DSpline</see> instance.
            </summary>
            <param name="val">The Knot value</param>
        </member>
        <member name="M:CADImport.CAD2DSpline.Clone">
            <summary>
            Creates and returns a copy of the current <see cref="T:CADImport.CAD2DSpline">CAD2DSpline</see> class instance. 
            </summary>
            <returns>A new object that is a copy of the <see cref="T:CADImport.CAD2DSpline">CAD2DSpline</see> class instance.</returns>
        </member>
        <member name="P:CADImport.CAD2DSpline.Degree">
            <summary>
            Gets or sets the degree for the spline.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DSpline.Rational">
            <summary>
            Gets or sets a value defining if the spline is rational.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DSpline.EndPoint">
            <summary>
            Gets or sets the end point of the <see cref="T:CADImport.CAD2DSpline">CAD2DSpline</see> instance.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DSpline.StartPoint">
            <summary>
            Gets or sets the start point of the <see cref="T:CADImport.CAD2DSpline">CAD2DSpline</see> instance.
            </summary>
        </member>
        <member name="T:CADImport.CAD2DBoundaryList">
            <summary>
            Represents a collection of hatch borders.
            </summary>
            <remarks>Each border is represented by one of the following classes: <see cref="T:CADImport.CAD2DCurve">CAD2DCurve</see>, <see cref="T:CADImport.CAD2DArc">CAD2DArc</see>, 
            <see cref="T:CADImport.CAD2DEllipse">CAD2DEllipse</see>, <see cref="T:CADImport.CAD2DLine">CAD2DLine</see>, <see cref="T:CADImport.CAD2DPolyline">CAD2DPolyline</see>, <see cref="T:CADImport.CAD2DSpline">CAD2DSpline</see>.</remarks>
        </member>
        <member name="M:CADImport.CAD2DBoundaryList.#ctor">
            <summary>
            Initializes a new instance of the CAD2DBoundaryList class.
            </summary>
        </member>
        <member name="M:CADImport.CAD2DBoundaryList.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the CAD2DBoundaryList class.
            </summary>
            <param name="capacity">A recommended amount of the internal data members.</param>
        </member>
        <member name="M:CADImport.CAD2DBoundaryList.Clone">
            <summary>
            Creates and returns a copy of the current <see cref="T:CADImport.CAD2DBoundaryList">CAD2DBoundaryList</see> class instance.
            </summary>
            <returns>A new object that is a copy of the <see cref="T:CADImport.CAD2DBoundaryList">CAD2DBoundaryList</see> class instance.</returns>
        </member>
        <member name="P:CADImport.CAD2DBoundaryList.BoundaryType">
            <summary>
            Gets or sets a type of the <see cref="T:CADImport.CAD2DBoundaryList">CAD2DBoundaryList</see> boundary.
            </summary>
        </member>
        <member name="P:CADImport.CAD2DBoundaryList.IsTextBox">
            <summary>
            Gets a value indicating whether the hatch bypasses a box occupied by a text.
            </summary>
            <value><b>true</b> if the hatch bypasses a box occupied by a text; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CAD2DBoundaryList.IsNotUse">
            <summary>
            Gets a value indicating whether the <see cref="T:CADImport.CAD2DBoundaryList">CAD2DBoundaryList</see> instance is not used.
            </summary>
        </member>
        <member name="T:CADImport.CADPolyPolygon">
            <summary>
            Represents a simple hatch with a border shaped as polyline.
            </summary>
        </member>
        <member name="M:CADImport.CADPolyPolygon.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADPolyPolygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADPolyPolygon.Destroy">
            <summary>
            Clears a collection of this <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see> boundaries.
            </summary>
        </member>
        <member name="M:CADImport.CADPolyPolygon.CalcFMatrix">
            <summary>
            The base method that creates a matrix required for three-dimensional 
            displaying this <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see>.
            </summary>
        </member>
        <member name="M:CADImport.CADPolyPolygon.ClearBoundaryData">
            <summary>
            The base method that clears the contents of the list containing the entities that 
            form a border of this <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see>.
            </summary>
        </member>
        <member name="M:CADImport.CADPolyPolygon.BoxTransformation(CADImport.CADConverter)">
            <summary>
            The base method that calculates a matrix required for three-dimensional 
            displaying this <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see>.
            </summary>
            <param name="converter">A <see cref="T:CADImport.CADConverter">CADConverter</see> used for loading the current CAD file.</param>
        </member>
        <member name="M:CADImport.CADPolyPolygon.MakeBorderPolylines(CADImport.CADConverter)">
            <summary>
            The base method that populates a list of points forming the border polylines for 
            this <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see>.
            </summary>
            <param name="converter">A <see cref="T:CADImport.CADConverter">CADConverter</see> used for loading the current CAD file.</param>
        </member>
        <member name="M:CADImport.CADPolyPolygon.ParseLines">
            <summary>
            The base method that fills the area bounded by this <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see> 
            with the existing hatch pattern. 
            </summary>
        </member>
        <member name="M:CADImport.CADPolyPolygon.CloseBoundary">
            <summary>
            Closes the border of this <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see>.
            </summary>
        </member>
        <member name="M:CADImport.CADPolyPolygon.GetBoxPoints(CADImport.FPointProc,System.Boolean)">
            <summary>
            Checks if the <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see> must be drawn during a drawing cycle.
            </summary>
            <param name="Proc">A <see cref="T:CADImport.FPointProc">FPointProc</see> delegate that references a 
            method for getting <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see>'s points.</param>
            <param name="Full">A boolean value indicating whether the method realizes full or reduced checking. 
            <b>true</b> if checking is full, <b>false</b> if checking is reduced.</param>
            <returns><b>true</b> if all points passed to the referenced method are the real entity's points; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADPolyPolygon.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see> is loaded.</param>
        </member>
        <member name="P:CADImport.CADPolyPolygon.EntType">
            <summary>
            Gets a type of this <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADPolyPolygon.Boundaries">
            <summary>
            Gets a collection of boundaries of this <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see>.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList">ArrayList</see> containing the <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see> boundaries.</value>
        </member>
        <member name="P:CADImport.CADPolyPolygon.Box">
            <summary>
            Gets a three-dimensional box that encloses this <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see>.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for this <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see>.</value>
        </member>
        <member name="P:CADImport.CADPolyPolygon.Color">
            <summary>
            Gets or sets a color of this <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see>.
            </summary>
            <value>A <see cref="T:System.Drawing.Color">Color</see> of this <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see>.</value>
        </member>
        <member name="T:CADImport.CADGradientPolygon">
            <summary>
            Represents a hatch with a gradient filling.
            </summary>
        </member>
        <member name="M:CADImport.CADGradientPolygon.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CADGradientPolygon.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADGradientPolygon">CADGradientPolygon</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADGradientPolygon.GradientColor">
            <summary>
            Gets or sets a gradient color.
            </summary>
            <value>A <see cref="T:System.Drawing.Color">Color</see> object representing the gradient color.</value>
        </member>
        <member name="P:CADImport.CADGradientPolygon.GradientName">
            <summary>
            Gets or sets a name of the gradient.
            </summary>
            <value>A <b>string</b> containing a name of the gradient.</value>
        </member>
        <member name="T:CADImport.CADCurvePolygon">
            <summary>
            Represents a hatch with a border of arbitrary shape.
            </summary>
        </member>
        <member name="M:CADImport.CADCurvePolygon.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADCurvePolygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADCurvePolygon">CADCurvePolygon</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADCurvePolygon.ChangeEntity(System.Double,System.Double,System.Double,CADImport.CADConverter)">
            <summary>
            Edits current entity by specified offset
            </summary>
            <param name="dx">X axis offset</param>
            <param name="dy">Y axis offset</param>
            <param name="dz">Z axis offset</param>
            <param name="conv"><see cref="T:CADImport.CADConverter">CADConverter</see> object
            for <see cref="M:CADImport.CADConverter.Loads(CADImport.CADEntity)">loading</see> of entity parameters</param>
            <returns>Returns <b>true</b> if the entity was changed</returns>
        </member>
        <member name="M:CADImport.CADCurvePolygon.Destroy">
            <summary>
            Clears a borders list of this <see cref="T:CADImport.CADCurvePolygon">CADCurvePolygon</see>.
            </summary>
        </member>
        <member name="M:CADImport.CADCurvePolygon.CalcFMatrix">
            <summary>
            Creates a matrix required for three-dimensional 
            displaying this <see cref="T:CADImport.CADCurvePolygon">CADCurvePolygon</see>.
            </summary>
        </member>
        <member name="M:CADImport.CADCurvePolygon.ClearBoundaryData">
            <summary>
            Clears the contents of the list containing the entities that 
            form a border of this <see cref="T:CADImport.CADCurvePolygon">CADCurvePolygon</see>.
            </summary>
        </member>
        <member name="M:CADImport.CADCurvePolygon.BoxTransformation(CADImport.CADConverter)">
            <summary>
            Calculates a matrix required for three-dimensional 
            displaying this <see cref="T:CADImport.CADCurvePolygon">CADCurvePolygon</see>.
            </summary>
            <param name="converter">A <see cref="T:CADImport.CADConverter">CADConverter</see> used for loading the current CAD file.</param>
        </member>
        <member name="M:CADImport.CADCurvePolygon.GetBoxPoints(CADImport.FPointProc,System.Boolean)">
            <summary>
            Checks if the <see cref="T:CADImport.CADCurvePolygon">CADCurvePolygon</see> must be drawn during a drawing cycle.
            </summary>
            <param name="Proc">A <see cref="T:CADImport.FPointProc">FPointProc</see> delegate that references a 
            method for getting <see cref="T:CADImport.CADCurvePolygon">CADCurvePolygon</see>'s points.</param>
            <param name="Full">A boolean value indicating whether the method realizes full or reduced checking. 
            <b>true</b> if checking is full, <b>false</b> if checking is reduced.</param>
            <returns><b>true</b> if all points passed to the referenced method are the real entity's points; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADCurvePolygon.MakeBorderPolylines(CADImport.CADConverter)">
            <summary>
            Populates a list of points that form the border polylines for 
            this <see cref="T:CADImport.CADCurvePolygon">CADCurvePolygon</see>.
            </summary>
            <param name="converter">A <see cref="T:CADImport.CADConverter">CADConverter</see> used for loading the current CAD file.</param>
        </member>
        <member name="P:CADImport.CADCurvePolygon.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADCurvePolygon">CADCurvePolygon</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADCurvePolygon.BoundaryData">
            <summary>
            Gets a list of borders for this <see cref="T:CADImport.CADCurvePolygon">CADCurvePolygon</see>.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList">ArrayList</see> containing the lists of entities 
            that form a border for this <see cref="T:CADImport.CADCurvePolygon">CADCurvePolygon</see>.</value>
        </member>
        <member name="P:CADImport.CADCurvePolygon.Elevation">
            <summary>
            Gets or sets a distance on which this <see cref="T:CADImport.CADCurvePolygon">CADCurvePolygon</see> is elevated along the Z axis.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object that defines the elevation level of this 
            <see cref="T:CADImport.CADCurvePolygon">CADCurvePolygon</see> along the Z axis in the object coordinate system.</value>
        </member>
        <member name="P:CADImport.CADCurvePolygon.Extrusion">
            <summary>
            Gets or sets the Z axis direction of the <see cref="T:CADImport.CADCurvePolygon">CADCurvePolygon</see> 
            object coordinate system.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object that defines the Z axis direction of the <see cref="T:CADImport.CADCurvePolygon">CADCurvePolygon</see> 
            object coordinate system in the world coordinate system.</value>
        </member>
        <member name="T:CADImport.CADHatch">
            <summary>
            Represents a hatch in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADHatch.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADHatch.MakeMarkers(CADImport.CADCollection{CADImport.Professional.Marker})">
            <summary>
            Creates <see cref="T:CADImport.Professional.Marker">markers</see> for a <see cref="T:CADImport.CADHatch">CADHatch</see> and places them
            to the specified collection.
            </summary>
            <param name="collectMarker">A <see cref="T:System.Collections.ArrayList">collection</see> where to <see cref="T:CADImport.Professional.Marker">markers</see> are placed.</param>
        </member>
        <member name="M:CADImport.CADHatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADHatch">CADHatch</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADHatch.Destroy">
            <summary>
            Clears all data that specify a hatch pattern of this <see cref="T:CADImport.CADHatch">CADHatch</see> object.
            </summary>
        </member>
        <member name="M:CADImport.CADHatch.HatchLine(CADImport.CADCollection{System.Double},CADImport.DPoint,CADImport.DPoint,CADImport.DPoint,CADImport.CADCollection{CADImport.DPoint})">
            <summary>
            For internal use
            </summary>
            Adds the hatch line represented by this <see cref="T:CADImport.SGLines">sgLines</see> object 
            to the specified point collection.
            <param name="Pt1">A first endpoint of the hatch line whose points will be added to the collection.</param>
            <param name="Pt2">A second endpoint of the hatch line whose points will be added to the collection.</param>
            <param name="BasePt">A base point of the hatch line whose points will be added to the collection.</param>
            <param name="DottedSingPts">A collection where the points of the represented hatch line will be added to.</param>
        </member>
        <member name="M:CADImport.CADHatch.ParseLines">
            <summary>
            Fills the area occupied by this <see cref="T:CADImport.CADHatch">CADHatch</see> object
            with the hatch pattern. 
            </summary>
        </member>
        <member name="P:CADImport.CADHatch.LineType">
            <summary>
            Gets or sets line type
            </summary>
        </member>
        <member name="P:CADImport.CADHatch.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADHatch">CADHatch</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADHatch.LineWeight">
            <summary>
            Gets or sets a thickness of lines for this <see cref="T:CADImport.CADHatch">CADHatch</see> entity.
            </summary>
        </member>
        <member name="P:CADImport.CADHatch.HatchPatternData">
             <summary>
             Gets a collection of hatch patterns used in the pattern of this <see cref="T:CADImport.CADHatch">CADHatch</see> object.
             </summary>
             <value>An <see cref="T:System.Collections.ArrayList">ArrayList</see> containing the hatch patterns used in 
             the pattern of this <see cref="T:CADImport.CADHatch">CADHatch</see> entity.</value>
             <remarks>Returns a list of <see cref="T:CADImport.HatchPatternData">HatchPatternData</see> class elements.
            Hatch pattern consists of simple lines, which are repeated with offset. 
            HatchPatternData is a list of pointers on lines data. Line data is an instance of HatchPatternData  type.</remarks>
        </member>
        <member name="P:CADImport.CADHatch.HatchName">
            <summary>
            Gets or sets a name of this <see cref="T:CADImport.CADHatch">CADHatch</see> entity.
            </summary>
            <value>A <b>string</b> containing the name of this <see cref="T:CADImport.CADHatch">CADHatch</see> entity.</value>
        </member>
        <member name="P:CADImport.CADHatch.HatchStyle">
            <summary>
            Gets or sets a style of this <see cref="T:CADImport.CADHatch">CADHatch</see> entity.
            </summary>
            <value>A <see cref="T:CADImport.CADHatchStyle">CADHatchStyle</see> enumeration value.</value>
        </member>
        <member name="P:CADImport.CADHatch.Lines">
            <summary>
            Gets a type of the line used by this <see cref="T:CADImport.CADHatch">CADHatch</see> object.
            </summary>
            <value> An object of the <see cref="T:CADImport.SGLines">sgLines</see> class that specifies a linetype.</value>
            <remarks>Obsolete. We recommend to use LineType property</remarks>
        </member>
        <member name="P:CADImport.CADHatch.ParsedLines">
            <summary>
            Gets a collection of points that specify the hatch pattern.
            </summary>
            <value>A <see cref="P:CADImport.CADHatch.ParsedLines">ParsedLines</see> object that contains 
            points specifying the pattern for this <see cref="T:CADImport.CADHatch">CADHatch</see> entity.</value>
        </member>
        <member name="P:CADImport.CADHatch.PttBaseP">
            <summary>
            Gets or sets a base point from which filling a shape with the hatch patterns starts.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object that defines the base point of 
            this <see cref="T:CADImport.CADHatch">CADHatch</see> entity.</value>
        </member>
        <member name="P:CADImport.CADHatch.PttNumLines">
            <summary>
            Gets or sets a number of lines that specify a linetype for 
            the lines used in this  <see cref="T:CADImport.CADHatch">CADHatch</see> entity.
            </summary>
            <value>A number of lines that specify a linetype for 
            the lines used in this  <see cref="T:CADImport.CADHatch">CADHatch</see> object.</value>
        </member>
        <member name="P:CADImport.CADHatch.PttLineAngle">
            <summary>
            Gets or sets an angle for this <see cref="T:CADImport.CADHatch">CADHatch</see> object.
            </summary>
            <value>An angle under which the <see cref="T:CADImport.CADHatch">CADHatch</see> lines are drawn.</value>
        </member>
        <member name="P:CADImport.CADHatch.PttOffset">
            <summary>
            Gets or sets an offset from the base point of this <see cref="T:CADImport.CADHatch">CADHatch</see> object.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object that specifies an offset from 
            the base point of this <see cref="T:CADImport.CADHatch">CADHatch</see> entity.</value>
        </member>
        <member name="T:CADImport.CADMPolygon">
            <summary>
            Represents MPolygon in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADMPolygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADMPolygon">CADMPolygon</see> class.
            </summary>
        </member>
        <member name="P:CADImport.CADMPolygon.FillColor">
            <summary>
            Gets or sets the pattern fill color.
            </summary>
        </member>
        <member name="P:CADImport.CADMPolygon.Offset">
            <summary>
            Gets or sets the offset vector.
            </summary>
        </member>
        <member name="T:CADImport.CADACISEntity">
            <summary>
            Represents entities of incorporate graphics 
            received by 3D modelling engine developed by Spatial company.
            </summary>
            <remarks>The <b>CADACISEntity</b> class is a base class for <see cref="T:CADImport.CAD3DSolid">CAD3DSolid</see>, <see cref="T:CADImport.CADBody">CADBody</see>, <see cref="T:CADImport.CADRegion">CADRegion</see> classes.</remarks>
        </member>
        <member name="M:CADImport.CADACISEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADACISEntity">CADACISEntity</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADACISEntity.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADACISEntity.SetLType(CADImport.CADEntity)">
            <summary>
            Sets a line type for the current instance of the <see cref="T:CADImport.CADACISEntity">CADACISEntity</see> class.
            </summary>
            <param name="Value">A line type to be set for this <see cref="T:CADImport.CADACISEntity">CADACISEntity</see> object.</param>
        </member>
        <member name="M:CADImport.CADACISEntity.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADACISEntity">CADACISEntity</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADACISEntity">CADACISEntity</see> is loaded.</param>
        </member>
        <member name="P:CADImport.CADACISEntity.Color">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Color">Color</see> for this <see cref="T:CADImport.CADACISEntity">CADACISEntity</see> object.
            </summary>
        </member>
        <member name="T:CADImport.CADRegion">
            <summary>
            Represents a <b>CADRegion</b> descendant of the <see cref="T:CADImport.CADACISEntity">CADACISEntity</see> class.
            </summary>
        </member>
        <member name="P:CADImport.CADRegion.EntType">
            <summary>
            Gets a type of this <see cref="T:CADImport.CADRegion">CADRegion</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.CAD3DSolid">
            <summary>
            Represents a <b>CAD3DSolid</b> descendant of the <see cref="T:CADImport.CADACISEntity">CADACISEntity</see> class.
            </summary>
        </member>
        <member name="P:CADImport.CAD3DSolid.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CAD3DSolid">CAD3DSolid</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.CADBody">
            <summary>
            Represents a <b>CADBody</b> descendant of the <see cref="T:CADImport.CADACISEntity">CADACISEntity</see> class.
            </summary>
        </member>
        <member name="P:CADImport.CADBody.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADBody">CADBody</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.FlatEntity">
            <summary>
            FlatEntity class defines base class for 2D entities (<see cref="T:CADImport.FlatHatch">FlatHatch</see> and <see cref="T:CADImport.FlatPoly">FlatPoly</see>).	
             </summary>
        </member>
        <member name="M:CADImport.FlatEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.FlatEntity">FlatEntity</see> class.
            </summary>
        </member>
        <member name="M:CADImport.FlatEntity.GetXY(System.Int32)">
            <summary>
            Gets a point defined by the specified parameter.
            </summary>
            <param name="index">An index that specifies the point.</param>
            <returns>A <see cref="T:CADImport.DPoint">DPoint</see> defined by the specified parameter.</returns>
        </member>
        <member name="M:CADImport.FlatEntity.SetXY(System.Int32,CADImport.DPoint)">
            <summary>
            Sets the specified point equal to the specified value.
            </summary>
            <param name="index">An index that specifies the point.</param>
            <param name="val">The <see cref="T:CADImport.DPoint">DPoint</see> whose coordinates are used as setup values.</param>
        </member>
        <member name="M:CADImport.FlatEntity.PCount">
            <summary>
            Returns the number of coordinates. 
            </summary>
            <returns>Returns the number of coordinates. It counts X and Y coordinates.</returns>
        </member>
        <member name="M:CADImport.FlatEntity.SetHandle(System.UInt64)">
            <summary>
            need help
            </summary>
            <param name="handle"></param>
        </member>
        <member name="P:CADImport.FlatEntity.LineWeight">
            <summary>
            Gets or sets a thickness of lines for this <see cref="T:CADImport.FlatEntity">FlatEntity</see>.
            </summary>
        </member>
        <member name="P:CADImport.FlatEntity.Box">
            <summary>
            Gets a three-dimensional box that encloses the <see cref="T:CADImport.CADEntity">CADEntity</see>.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for the <see cref="T:CADImport.CADEntity">CADEntity</see>.</value>
        </member>
        <member name="P:CADImport.FlatEntity.Color">
            <summary>
            Gets or sets a color for the <see cref="T:CADImport.FlatEntity">FlatEntity</see> entity.
            </summary>
            <value>A <see cref="T:System.Drawing.Color">Color</see> of the <see cref="T:CADImport.FlatEntity">FlatEntity</see>.</value>
        </member>
        <member name="P:CADImport.FlatEntity.Points">
            <summary>
            Gets a list of points representing the vertices of the polyline. 
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList">ArrayList</see> containing the points that 
            represents the vertices of the polyline.</value>
        </member>
        <member name="P:CADImport.FlatEntity.Counts">
            <summary>
            Gets a list of the counters of points. 
            </summary>
        </member>
        <member name="P:CADImport.FlatEntity.EntType">
            <summary>
            Gets a type of this <see cref="T:CADImport.FlatEntity">FlatEntity</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.FlatPoly">
            <summary>
            Defines a two-dimensional polyline.
            </summary>
        </member>
        <member name="M:CADImport.FlatPoly.Accepts(CADImport.CADPolylineBase)">
            <summary>
            Gets a value indicating if the specified polyline is accepted by this <see cref="T:CADImport.FlatPoly">FlatPoly</see> entity.
            </summary>
            <param name="p">A <see cref="T:CADImport.CADPolyLine">CADPolyLine</see> object to add to this <see cref="T:CADImport.FlatPoly">FlatPoly</see> entity.</param>
            <returns><b>true</b> if the specified polyline can be accepted by this <see cref="T:CADImport.FlatPoly">FlatPoly</see> object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.FlatPoly.Add(CADImport.CADPolylineBase)">
            <summary>
            Adds a polyline to this <see cref="T:CADImport.FlatPoly">FlatPoly</see> entity.
            </summary>
            <param name="p">A <see cref="T:CADImport.CADPolyLine">CADPolyline</see> to add.</param>
        </member>
        <member name="P:CADImport.FlatPoly.Width">
            <summary>
            Gets a width of the <see cref="T:CADImport.FlatPoly">FlatPoly</see> entity.
            </summary>
        </member>
        <member name="P:CADImport.FlatPoly.EntType">
            <summary>
            Gets a type of this <see cref="T:CADImport.FlatPoly">FlatPoly</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.FlatHatch">
            <summary>
            Defines a two-dimensional hatch.
            </summary>
        </member>
        <member name="M:CADImport.FlatHatch.Accepts(CADImport.CADPolyPolygon)">
            <summary>
            Gets a value indicating if the specified hatch is accepted by this <see cref="T:CADImport.FlatHatch">FlatHatch</see> entity.
            </summary>
            <param name="p">A <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see> object representing the hatch to add to this <see cref="T:CADImport.FlatHatch">FlatHatch</see> entity.</param>
            <returns><b>true</b> if the specified hatch can be accepted by this <see cref="T:CADImport.FlatHatch">FlatHatch</see> object; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.FlatHatch.Add(CADImport.CADPolyPolygon)">
            <summary>
            Adds the specified hatch to this <see cref="T:CADImport.FlatHatch">FlatHatch</see> object.
            </summary>
            <param name="p">A <see cref="T:CADImport.CADPolyPolygon">CADPolyPolygon</see> object representing the hatched area 
            that will be added to this <see cref="T:CADImport.FlatHatch">FlatHatch</see> entity.</param>
        </member>
        <member name="P:CADImport.FlatHatch.EntType">
            <summary>
            Gets a type of this <see cref="T:CADImport.FlatHatch">FlatHatch</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.CADProxy">
            <summary>
            Represent CAD entities created by applications other than AutoCAD.
            </summary>
            <remarks>A <b>CADProxy</b> object is a substitute for a custom object 
            when the application that created this custom object is not available to AutoCAD.
            If the application becomes available, the <b>CADProxy</b> object is replaced by the custom object.</remarks>
        </member>
        <member name="M:CADImport.CADProxy.AddEntity(CADImport.CADEntity)">
            <summary>
            Adds the specified entity to this <see cref="T:CADImport.CADInsert">CADInsert</see> object.
            </summary>
            <param name="E">A <see cref="T:CADImport.CADEntity">CADEntity</see> to add.</param>
            <returns><b>true</b> if a <see cref="T:CADImport.CADEntity">CADEntity</see> was added; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADProxy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADProxy">CADProxy</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADProxy.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADProxy">CADProxy</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADProxy">CADProxy</see> 
            is loaded.</param>
        </member>
        <member name="P:CADImport.CADProxy.Entities">
            <summary>
            Gets a collection of CAD entities belonging to the <see cref="T:CADImport.CADProxy">CADProxy</see>.
            </summary>
            <value>A <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> containing 
            CAD entities belonging to the <see cref="T:CADImport.CADProxy">CADProxy</see>.</value>
        </member>
        <member name="P:CADImport.CADProxy.SubEntitiesProps">
            <summary>
            Gets a list of objects representing properties of a CAD entity 
            belonging to this <see cref="T:CADImport.CADProxy">CADProxy</see>.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList">ArrayList</see> containing the objects 
            representing properties of CAD entities belonging to this <see cref="T:CADImport.CADProxy">CADProxy</see>.</value>
        </member>
        <member name="P:CADImport.CADProxy.Box">
            <summary>
            Gets or sets a three-dimensional box that encloses this <see cref="T:CADImport.CADProxy">CADProxy</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADProxy.Count">
            <summary>
            Gets a number of entities contained in the <see cref="T:CADImport.CADProxy">CADProxy</see>.
            </summary>
        </member>
        <member name="P:CADImport.CADProxy.EntType">
            <summary>
            Gets a type of the <see cref="T:CADImport.CADProxy">CADProxy</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.CADOLE2Frame">
            <summary>
            Represents an OLE object in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADOLE2Frame.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADOLE2Frame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADOLE2Frame">CADOLE2Frame</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADOLE2Frame.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADOLE2Frame">CADOLE2Frame</see> entity to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADOLE2Frame">CADOLE2Frame</see> 
            entity is loaded.</param>
        </member>
        <member name="P:CADImport.CADOLE2Frame.Point1">
            <summary>
            Gets or sets a second point that specifies the size and position 
            of the <see cref="T:CADImport.CADOLE2Frame">CADOLE2Frame</see> object on a CAD image.
            </summary>
            <value>A <see cref="T:CADImport.DPoint">DPoint</see> object representing the second point 
            that specifies the size and position of the <see cref="T:CADImport.CADOLE2Frame">CADOLE2Frame</see> object on a CAD image.</value>
        </member>
        <member name="P:CADImport.CADOLE2Frame.Aspect">
            <summary>
            Gets or sets a value indicating a way the <see cref="T:CADImport.CADOLE2Frame">CADOLE2Frame</see> object 
            is shown on a CAD image.
            </summary>
            <remarks>There are two possible ways of displaying the <see cref="T:CADImport.CADOLE2Frame">CADOLE2Frame</see> object: 
            as a document of the OLE application, or as an icon of this application.</remarks>
        </member>
        <member name="P:CADImport.CADOLE2Frame.Box">
            <summary>
            Gets or sets a three-dimensional box that encloses this <see cref="T:CADImport.CADOLE2Frame">CADOLE2Frame</see>.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for this <see cref="T:CADImport.CADOLE2Frame">CADOLE2Frame</see>.</value>
        </member>
        <member name="P:CADImport.CADOLE2Frame.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADOLE2Frame">CADOLE2Frame</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.CADAcadTable">
            <summary>
            Corresponds AcadTable object
            </summary>
        </member>
        <member name="M:CADImport.CADAcadTable.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADAcadTable">CADAcadTable</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADAcadTable">CADAcadTable</see> is loaded.</param>
        </member>
        <member name="P:CADImport.CADAcadTable.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADAcadTable">CADAcadTable</see> entity
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.CADTolerance">
            <summary>
            Represents a Tolerance object in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADTolerance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADTolerance">CADTolerance</see> object.
            </summary>		
        </member>
        <member name="M:CADImport.CADTolerance.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADTolerance.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADTolerance">CADTolerance</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADTolerance">CADTolerance</see> is loaded.</param>
        </member>
        <member name="P:CADImport.CADTolerance.DimlineColor">
            <summary>
            Gets or sets the dimension extension line color.
            </summary>
        </member>
        <member name="P:CADImport.CADTolerance.DimScaleOverall">
            <summary>
            Gets or sets the overall dimensioning scale factor.
            </summary>
        </member>
        <member name="P:CADImport.CADTolerance.DimStyle">
            <summary>
            Gets or sets the name of a dimension style.
            </summary>
        </member>
        <member name="P:CADImport.CADTolerance.GAP">
            <summary>
            Gets or sets the dimension line gap.
            </summary>
        </member>
        <member name="P:CADImport.CADTolerance.EntType">
            <summary>
            Gets a type of this <see cref="T:CADImport.CADTolerance">CADTolerance</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.CADMLineEntry">
            <summary>
            Represents an Tolerance object in a CAD image.
            </summary>
        </member>
        <member name="P:CADImport.CADMLineEntry.Offset">
            <summary>
            Gets or sets an offset for this <see cref="T:CADImport.CADMLineEntry">CADMLineEntry</see> entity.
            </summary>
        </member>
        <member name="P:CADImport.CADMLineEntry.Color">
            <summary>
            Gets or sets a color for this <see cref="T:CADImport.CADMLineEntry">CADMLineEntry</see> entity.
            </summary>
        </member>
        <member name="P:CADImport.CADMLineEntry.LineType">
            <summary>
            Gets or sets a type of the lines for this <see cref="T:CADImport.CADMLineEntry">CADMLineEntry</see> entity.
            </summary>
        </member>
        <member name="T:CADImport.CADMLineStyle">
            <summary>
            Represents an Tolerance object in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADMLineStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADMLineStyle">CADMLineStyle</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADMLineStyle.NewEntry(System.Double,System.Drawing.Color,CADImport.CADEntity,System.Byte)">
            <summary>
            Creates a new entry to this <see cref="T:CADImport.CADMLineStyle">CADMLineStyle</see> and adds it to collection of entries.
            </summary>
            <param name="offset">An <see cref="P:CADImport.CADMLineEntry.Offset">offset</see> for a new entry</param>
            <param name="color">A <see cref="P:CADImport.CADMLineEntry.Color">color</see> for a new entry</param>
            <param name="linetype">A <see cref="P:CADImport.CADMLineEntry.LineType">linetype</see> for a new entry</param>
            <param name="vers">A version for a new entry</param>
        </member>
        <member name="M:CADImport.CADMLineStyle.AddEntity(CADImport.CADEntity)">
            <summary>
            Adds the specified entity to this <see cref="T:CADImport.CADMLineStyle">CADMLineStyle</see>.
            </summary>
            <param name="E">A <see cref="T:CADImport.CADEntity">CADEntity</see> to add.</param>
            <returns><b>true</b> if a <see cref="T:CADImport.CADEntity">CADEntity</see> was added; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADMLineStyle.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="M:CADImport.CADMLineStyle.Invert">
            <summary>
            Inverts a collection of entries of this <see cref="T:CADImport.CADMLineStyle">CADMLineStyle</see> entity.
            </summary>
        </member>
        <member name="M:CADImport.CADMLineStyle.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADMLineStyle">CADMLineStyle</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADMLineStyle">CADMLineStyle</see> is loaded.</param>
        </member>
        <member name="P:CADImport.CADMLineStyle.Count">
            <summary>
            Gets a number of entries to this <see cref="T:CADImport.CADMLineStyle">CADMLineStyle</see> entity.
            </summary>
        </member>
        <member name="P:CADImport.CADMLineStyle.Entries">
            <summary>
            Gets or sets a collection of an entries to this <see cref="T:CADImport.CADMLineStyle">CADMLineStyle</see> entity.
            </summary>
        </member>
        <member name="T:CADImport.MVertex">
            <summary>
            Represents a vertex of a <see cref="T:CADImport.CADMLine">CADMLine</see>.
            </summary>
        </member>
        <member name="M:CADImport.MVertex.CountP(System.Int32)">
            <summary>
            Returns a number of parameters for an element in <see cref="!:CADCollection'CADCollection'double">collection</see> 
            </summary>
            <param name="index">The index of an element.</param>
        </member>
        <member name="M:CADImport.MVertex.Complete">
            <summary>
            Initializes a new collection of parameters for elements if it doesn't exist.
            </summary>
        </member>
        <member name="P:CADImport.MVertex.Params">
            <summary>
            Gets or sets collection of parameters for elements.
            </summary>
        </member>
        <member name="P:CADImport.MVertex.Count">
            <summary>
            Gets a number of elements within elements collection.
            </summary>
        </member>
        <member name="P:CADImport.MVertex.Point">
            <summary>
            Gets or sets vector coordinates.
            </summary>
        </member>
        <member name="P:CADImport.MVertex.Direction">
            <summary>
            Gets or sets a direction vector of segment starting at this vertex.
            </summary>
        </member>
        <member name="P:CADImport.MVertex.Miter">
            <summary>
            Gets or sets a direction vector of miter at this vertex
            </summary>
        </member>
        <member name="T:CADImport.CADMLine">
            <summary>
            Represents an MLine object in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADMLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADMLine">CADMLine</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADMLine.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADMLine">CADMLine</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADMLine">CADMLine</see> is loaded.</param>
        </member>
        <member name="M:CADImport.CADMLine.AddEntity(CADImport.CADEntity)">
            <summary>
            Adds the specified entity to this <see cref="T:CADImport.CADMLine">CADMLine</see> object.
            </summary>
            <param name="E">A <see cref="T:CADImport.CADEntity">CADEntity</see> to add.</param>
            <returns><b>true</b> if a <see cref="T:CADImport.CADEntity">CADEntity</see> was added; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADMLine.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CADMLine.Flags">
            <summary>
            Gets or sets a flags for this <see cref="T:CADImport.CADMLine">CADMLine</see> object
            </summary>
            <remarks>
            1 = Has at least one vertex.
            2 = Closed.
            4 = Suppress start caps.
            8 = Suppress end caps.</remarks>
        </member>
        <member name="P:CADImport.CADMLine.Justify">
            <summary>
            Gets or sets a justification for this <see cref="T:CADImport.CADMLine">CADMLine</see> object
            </summary>
            <value>0 = top, 1 = zero, 2 = bottom</value>
        </member>
        <member name="P:CADImport.CADMLine.Style">
            <summary>
            Gets or sets a style for this <see cref="T:CADImport.CADMLine">CADMLine</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADMLine.ScaleFactor">
            <summary>
            Gets or sets a scale factor for this <see cref="T:CADImport.CADMLine">CADMLine</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADMLine.Items">
            <summary>
            Gets or sets a collection of entities for this <see cref="T:CADImport.CADMLine">CADMLine</see> object.
            </summary>
        </member>
        <member name="T:CADImport.CADShape">
            <summary>
            Represents a shape in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADShape.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADShape">CADShape</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADShape">CADShape</see> is loaded.</param>
        </member>
        <member name="M:CADImport.CADShape.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CADShape.ShapeName">
            <summary>
            Gets or sets name of a shape. 
            </summary>
        </member>
        <member name="P:CADImport.CADShape.ShapeNumber">
            <summary>
            Gets or sets number of a shape.
            </summary>
        </member>
        <member name="P:CADImport.CADShape.Scale">
            <summary>
            Relative X scale factor.
            </summary>
        </member>
        <member name="P:CADImport.CADShape.EntType">
            <summary>
            Gets a type of this <see cref="T:CADImport.CADShape">CADShape</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.CADHelix">
            <summary>
            Represents a helix in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADHelix.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADHelix">CADHelix</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADHelix">CADHelix</see> is loaded.</param>
        </member>
        <member name="M:CADImport.CADHelix.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CADHelix.Start">
            <summary>
            Gets or sets start point of the <see cref="T:CADImport.CADHelix">CADHelix</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADHelix.Radius">
            <summary>
            Gets or sets a start radius of the <see cref="T:CADImport.CADHelix">CADHelix</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADHelix.Turns">
            <summary>
            Gets or sets number of turns in this <see cref="T:CADImport.CADHelix">CADHelix</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADHelix.TurnHeight">
            <summary>
            Gets or sets heigh of one turn of the <see cref="T:CADImport.CADHelix">CADHelix</see> object
            </summary>
        </member>
        <member name="P:CADImport.CADHelix.Clockweise">
            <summary>
            Gets or sets whether or not the <see cref="T:CADImport.CADHelix">CADHelix</see> object is clockwise
            </summary>
        </member>
        <member name="P:CADImport.CADHelix.EntType">
            <summary>
            Gets the type of this <see cref="T:CADImport.CADHelix">CADHelix</see> entity.
            </summary>
            <value>An entity type defined by the <see cref="T:CADImport.EntityType">EntityType</see> enumeration value.</value>
        </member>
        <member name="T:CADImport.CADMInsert">
            <summary>
            Represents MInsert in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADMInsert.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADInsert">CADInsert</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADMInsert.AssignEntity(CADImport.CADEntity)">
            <summary>
            Copies an entity
            </summary>
            <param name="source">An entity to copy</param>
        </member>
        <member name="P:CADImport.CADMInsert.Box">
            <summary>
            Gets a three-dimensional box that encloses the <see cref="T:CADImport.CADMInsert">CADMInsert</see> entity.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing the enclosing box 
            for the <see cref="T:CADImport.CADMInsert">CADMInsert</see>.</value>
        </member>
        <member name="P:CADImport.CADMInsert.NumCols">
            <summary>
            Gets or sets a number of a columns
            </summary>
        </member>
        <member name="P:CADImport.CADMInsert.NumRows">
            <summary>
            Gets or sets a number of a rows
            </summary>
        </member>
        <member name="P:CADImport.CADMInsert.ColSpacing">
            <summary>
            Gets or sets an interval between columns
            </summary>
        </member>
        <member name="P:CADImport.CADMInsert.RowSpacing">
            <summary>
            Gets or sets an interval between rows
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">
            <summary>
            An input buffer customised for use by <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            </summary>
            <remarks>
            The buffer supports decryption of incoming data.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/> with a default buffer size
            </summary>
            <param name="stream">The stream to buffer.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/>
            </summary>
            <param name="stream">The stream to buffer.</param>
            <param name="bufferSize">The size to use for the buffer</param>
            <remarks>A minimum buffer size of 1KB is permitted.  Lower sizes are treated as 1KB.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.SetInflaterInput(ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Call <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)"/> passing the current clear text buffer contents.
            </summary>
            <param name="inflater">The inflater to set input for.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Fill">
            <summary>
            Fill the buffer from the underlying input stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[])">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="buffer">The buffer to fill</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="outBuffer">The buffer to read into</param>
            <param name="offset">The offset to start reading data into.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadClearTextBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read clear text data from the input stream.
            </summary>
            <param name="outBuffer">The buffer to add data to.</param>
            <param name="offset">The offset to start adding data at.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeByte">
            <summary>
            Read a <see cref="T:System.Byte"/> from the input stream.
            </summary>
            <returns>Returns the byte read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeShort">
            <summary>
            Read an <see cref="T:System.Int16"/> in little endian byte order.
            </summary>
            <returns>The short value read case to an int.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeInt">
            <summary>
            Read an <see cref="T:System.Int32"/> in little endian byte order.
            </summary>
            <returns>The int value read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeLong">
            <summary>
            Read a <see cref="T:System.Int64"/> in little endian byte order.
            </summary>
            <returns>The long value read.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawLength">
            <summary>
            Get the length of bytes bytes in the <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData">
            <summary>
            Get the contents of the raw data buffer.
            </summary>
            <remarks>This may contain encrypted data.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearTextLength">
            <summary>
            Get the number of useable bytes in <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText">
            <summary>
            Get the contents of the clear text buffer.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Available">
            <summary>
            Get/set the number of bytes available
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.CryptoTransform">
            <summary>
            Get/set the <see cref="T:System.Security.Cryptography.ICryptoTransform"/> to apply to any data.
            </summary>
            <remarks>Set this value to null to have no transform applied.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
            <param name="flush">True to flush input buffers</param>
            <param name="finish">Finish deflation with the current input.</param>
            <returns>Returns true if progress has been made.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buffer">The buffer containing input data.</param>
            <param name="offset">The offset of the first byte of data.</param>
            <param name="count">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Determines if more <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">input</see> is needed.
            </summary>		
            <returns>Return true if input is needed via <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">SetInput</see></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
            <param name="buffer">The buffer containing the dictionary data</param>
            <param name="offset">The offset in the buffer for the first byte of data</param>
            <param name="length">The length of the dictionary data.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
            <param name="level">The value to set the level to.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MAX_MATCH &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way 
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.compressionFunction">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.WindowsPathUtils">
            <summary>
            WindowsPathUtils provides simple utilities for handling windows paths.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.WindowsPathUtils.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Core.WindowsPathUtils"/> class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.WindowsPathUtils.DropPathRoot(System.String)">
            <summary>
            Remove any path root present in the path
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing path information.</param>
            <returns>The path with the root removed if it was present; path otherwise.</returns>
            <remarks>Unlike the <see cref="T:System.IO.Path"/> class the path isnt otherwise checked for validity.</remarks>
        </member>
        <member name="F:CADImport.EvalForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CADImport.EvalForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CADImport.EvalForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Functions.NextPowerOfTwo(System.Int64)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenGL.Math.Functions.NextPowerOfTwo(System.Int32)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenGL.Math.Functions.NextPowerOfTwo(System.Single)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenGL.Math.Functions.NextPowerOfTwo(System.Double)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenGL.Math.Functions.Factorial(System.Int32)">
            <summary>Calculates the factorial of a given natural number.
            </summary>
            <param name="n">The number.</param>
            <returns>n!</returns>
        </member>
        <member name="M:OpenGL.Math.Functions.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Calculates the binomial coefficient <paramref name="n"/> above <paramref name="k"/>.
            </summary>
            <param name="n">The n.</param>
            <param name="k">The k.</param>
            <returns>n! / (k! * (n - k)!)</returns>
        </member>
        <member name="M:OpenGL.Math.Functions.InverseSqrtFast(System.Single)">
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:OpenGL.Math.Functions.InverseSqrtFast(System.Double)">
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:OpenGL.Math.Functions.DegreesToRadians(System.Single)">
            <summary>
            Convert degrees to radians
            </summary>
            <param name="degrees">An angle in degrees</param>
            <returns>The angle expressed in radians</returns>
        </member>
        <member name="M:OpenGL.Math.Functions.RadiansToDegrees(System.Single)">
            <summary>
            Convert radians to degrees
            </summary>
            <param name="radians">An angle in radians</param>
            <returns>The angle expressed in degrees</returns>
        </member>
        <member name="T:OpenGL.Math.Matrix4">
            <summary>
            Represents a 4x4 Matrix
            </summary>
        </member>
        <member name="F:OpenGL.Math.Matrix4.Row0">
            <summary>
            Top row of the matrix
            </summary>
        </member>
        <member name="F:OpenGL.Math.Matrix4.Row1">
            <summary>
            2nd row of the matrix
            </summary>
        </member>
        <member name="F:OpenGL.Math.Matrix4.Row2">
            <summary>
            3rd row of the matrix
            </summary>
        </member>
        <member name="F:OpenGL.Math.Matrix4.Row3">
            <summary>
            Bottom row of the matrix
            </summary>
        </member>
        <member name="F:OpenGL.Math.Matrix4.Identity">
            <summary>
            The identity matrix
            </summary>
        </member>
        <member name="M:OpenGL.Math.Matrix4.#ctor(OpenGL.Math.Vector4,OpenGL.Math.Vector4,OpenGL.Math.Vector4,OpenGL.Math.Vector4)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="row0">Top row of the matrix</param>
            <param name="row1">Second row of the matrix</param>
            <param name="row2">Third row of the matrix</param>
            <param name="row3">Bottom row of the matrix</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="m00">First item of the first row of the matrix.</param>
            <param name="m01">Second item of the first row of the matrix.</param>
            <param name="m02">Third item of the first row of the matrix.</param>
            <param name="m03">Fourth item of the first row of the matrix.</param>
            <param name="m10">First item of the second row of the matrix.</param>
            <param name="m11">Second item of the second row of the matrix.</param>
            <param name="m12">Third item of the second row of the matrix.</param>
            <param name="m13">Fourth item of the second row of the matrix.</param>
            <param name="m20">First item of the third row of the matrix.</param>
            <param name="m21">Second item of the third row of the matrix.</param>
            <param name="m22">Third item of the third row of the matrix.</param>
            <param name="m23">First item of the third row of the matrix.</param>
            <param name="m30">Fourth item of the fourth row of the matrix.</param>
            <param name="m31">Second item of the fourth row of the matrix.</param>
            <param name="m32">Third item of the fourth row of the matrix.</param>
            <param name="m33">Fourth item of the fourth row of the matrix.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Transpose">
            <summary>
            Calculates the transpose of this instance.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Matrix4.CreateFromAxisAngle(OpenGL.Math.Vector3,System.Single,OpenGL.Math.Matrix4@)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <param name="result">A matrix instance.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4.CreateFromAxisAngle(OpenGL.Math.Vector3,System.Single)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <returns>A matrix instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.CreateTranslation(System.Single,System.Single,System.Single,OpenGL.Math.Matrix4@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4.CreateTranslation(OpenGL.Math.Vector3@,OpenGL.Math.Matrix4@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4.CreateTranslation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.CreateTranslation(OpenGL.Math.Vector3)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,OpenGL.Math.Matrix4@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <rereturns>The resulting Matrix4 instance.</rereturns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,OpenGL.Math.Matrix4@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,OpenGL.Math.Matrix4@)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <param name="result">A projection matrix that transforms camera space to raster space</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>fovy is zero, less than zero or larger than Math.PI</item>
            <item>aspect is negative or zero</item>
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenGL.Math.Matrix4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>fovy is zero, less than zero or larger than Math.PI</item>
            <item>aspect is negative or zero</item>
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenGL.Math.Matrix4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,OpenGL.Math.Matrix4@)">
            <summary>
            Creates an perspective projection matrix.
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <param name="result">A projection matrix that transforms camera space to raster space</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenGL.Math.Matrix4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an perspective projection matrix.
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Translation(OpenGL.Math.Vector3)">
            <summary>
            Builds a translation matrix.
            </summary>
            <param name="trans">The translation vector.</param>
            <returns>A new Matrix4 instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Build a translation matrix with the given translation
            </summary>
            <param name="x">X translation</param>
            <param name="y">Y translation</param>
            <param name="z">Z translation</param>
            <returns>A Translation matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Scale(System.Single)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Single scale factor for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Scale(OpenGL.Math.Vector3)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Scale factors for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="x">Scale factor for x-axis</param>
            <param name="y">Scale factor for y-axis</param>
            <param name="z">Scale factor for z-axis</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.RotateX(System.Single)">
            <summary>
            Build a rotation matrix that rotates about the x-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the x-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.RotateY(System.Single)">
            <summary>
            Build a rotation matrix that rotates about the y-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the y-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.RotateZ(System.Single)">
            <summary>
            Build a rotation matrix that rotates about the z-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the z-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Rotate(OpenGL.Math.Vector3,System.Single)">
            <summary>
            Build a rotation matrix to rotate about the given axis
            </summary>
            <param name="axis">the axis to rotate about</param>
            <param name="angle">angle in radians to rotate counter-clockwise (looking in the direction of the given axis)</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.LookAt(OpenGL.Math.Vector3,OpenGL.Math.Vector3,OpenGL.Math.Vector3)">
            <summary>
            Build a world space to camera space matrix
            </summary>
            <param name="eye">Eye (camera) position in world space</param>
            <param name="target">Target position in world space</param>
            <param name="up">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <returns>A Matrix that transforms world space to camera space</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Mult(OpenGL.Math.Matrix4,OpenGL.Math.Matrix4)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <returns>A new instance that is the result of the multiplication</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Mult(OpenGL.Math.Matrix4@,OpenGL.Math.Matrix4@,OpenGL.Math.Matrix4@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <param name="result">A new instance that is the result of the multiplication</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Invert(OpenGL.Math.Matrix4)">
            <summary>
            Calculate the inverse of the given matrix
            </summary>
            <param name="mat">The matrix to invert</param>
            <returns>The inverse of the given matrix if it has one, or the input if it is singular</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the Matrix4 is singular.</exception>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Transpose(OpenGL.Math.Matrix4)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <returns>The transpose of the given matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Transpose(OpenGL.Math.Matrix4@,OpenGL.Math.Matrix4@)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <param name="result">The result of the calculation</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4.op_Multiply(OpenGL.Math.Matrix4,OpenGL.Math.Matrix4)">
            <summary>
            Matrix multiplication
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
            <returns>A new Matrix44 which holds the result of the multiplication</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.ToString">
            <summary>
            Returns a System.String that represents the current Matrix44.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare tresult.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4.Equals(OpenGL.Math.Matrix4)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="other">An matrix to compare with this matrix.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenGL.Math.Matrix4.Determinant">
            <summary>
            The determinant of this matrix
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.Column0">
            <summary>
            The first column of this matrix
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.Column1">
            <summary>
            The second column of this matrix
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.Column2">
            <summary>
            The third column of this matrix
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.Column3">
            <summary>
            The fourth column of this matrix
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M14">
            <summary>
            Gets or sets the value at row 1, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M24">
            <summary>
            Gets or sets the value at row 2, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M34">
            <summary>
            Gets or sets the value at row 3, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M41">
            <summary>
            Gets or sets the value at row 4, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M42">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M43">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4.M44">
            <summary>
            Gets or sets the value at row 4, column 4 of this instance.
            </summary>
        </member>
        <member name="T:OpenGL.Math.Vector4">
            <summary>Represents a 4D vector using four single-precision floating-point numbers.</summary>
            <remarks>
            The Vector4 structure is suitable for interoperation with unmanaged code requiring four consecutive floats.
            </remarks>
        </member>
        <member name="F:OpenGL.Math.Vector4.X">
            <summary>
            The X component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4.Y">
            <summary>
            The Y component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4.Z">
            <summary>
            The Z component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4.W">
            <summary>
            The W component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4.UnitX">
            <summary>
            Defines a unit-length Vector4 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4.UnitY">
            <summary>
            Defines a unit-length Vector4 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4.UnitZ">
            <summary>
            Defines a unit-length Vector4 that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4.UnitW">
            <summary>
            Defines a unit-length Vector4 that points towards the W-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4.Zero">
            <summary>
            Defines a zero-length Vector4.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4.SizeInBytes">
            <summary>
            Defines the size of the Vector4 struct in bytes.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Vector4.
            </summary>
            <param name="x">The x component of the Vector4.</param>
            <param name="y">The y component of the Vector4.</param>
            <param name="z">The z component of the Vector4.</param>
            <param name="w">The z component of the Vector4.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.#ctor(OpenGL.Math.Vector2)">
            <summary>
            Constructs a new Vector4 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.#ctor(OpenGL.Math.Vector3)">
            <summary>
            Constructs a new Vector4 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.#ctor(OpenGL.Math.Vector3,System.Single)">
            <summary>
            Constructs a new Vector4 from the specified Vector3 and W component.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
            <param name="w">The W component of the new Vector4.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.#ctor(OpenGL.Math.Vector4)">
            <summary>
            Constructs a new Vector4 from the given Vector4.
            </summary>
            <param name="v">The Vector4 to copy components from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Add(OpenGL.Math.Vector4)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Add(OpenGL.Math.Vector4@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Sub(OpenGL.Math.Vector4)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Sub(OpenGL.Math.Vector4@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Normalize">
            <summary>
            Scales the Vector4 to unit length.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector4.NormalizeFast">
            <summary>
            Scales the Vector4 to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector4.Scale(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Scales the current Vector4 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
            <param name="sw">The scale of the Z component.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Scale(OpenGL.Math.Vector4)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Scale(OpenGL.Math.Vector4@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Add(OpenGL.Math.Vector4,OpenGL.Math.Vector4)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of addition</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.Add(OpenGL.Math.Vector4@,OpenGL.Math.Vector4@,OpenGL.Math.Vector4@)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of addition</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Sub(OpenGL.Math.Vector4,OpenGL.Math.Vector4)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.Sub(OpenGL.Math.Vector4@,OpenGL.Math.Vector4@,OpenGL.Math.Vector4@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Mult(OpenGL.Math.Vector4,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.Mult(OpenGL.Math.Vector4@,System.Single,OpenGL.Math.Vector4@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Div(OpenGL.Math.Vector4,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.Div(OpenGL.Math.Vector4@,System.Single,OpenGL.Math.Vector4@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Min(OpenGL.Math.Vector4,OpenGL.Math.Vector4)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.Min(OpenGL.Math.Vector4@,OpenGL.Math.Vector4@,OpenGL.Math.Vector4@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Max(OpenGL.Math.Vector4,OpenGL.Math.Vector4)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.Max(OpenGL.Math.Vector4@,OpenGL.Math.Vector4@,OpenGL.Math.Vector4@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Clamp(OpenGL.Math.Vector4,OpenGL.Math.Vector4,OpenGL.Math.Vector4)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.Clamp(OpenGL.Math.Vector4@,OpenGL.Math.Vector4@,OpenGL.Math.Vector4@,OpenGL.Math.Vector4@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Normalize(OpenGL.Math.Vector4)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.Normalize(OpenGL.Math.Vector4@,OpenGL.Math.Vector4@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.NormalizeFast(OpenGL.Math.Vector4)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.NormalizeFast(OpenGL.Math.Vector4@,OpenGL.Math.Vector4@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Dot(OpenGL.Math.Vector4,OpenGL.Math.Vector4)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.Dot(OpenGL.Math.Vector4@,OpenGL.Math.Vector4@,System.Single@)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Lerp(OpenGL.Math.Vector4,OpenGL.Math.Vector4,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.Lerp(OpenGL.Math.Vector4@,OpenGL.Math.Vector4@,System.Single,OpenGL.Math.Vector4@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.BaryCentric(OpenGL.Math.Vector4,OpenGL.Math.Vector4,OpenGL.Math.Vector4,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.BaryCentric(OpenGL.Math.Vector4@,OpenGL.Math.Vector4@,OpenGL.Math.Vector4@,System.Single,System.Single,OpenGL.Math.Vector4@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.Transform(OpenGL.Math.Vector4,OpenGL.Math.Matrix4)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.Transform(OpenGL.Math.Vector4@,OpenGL.Math.Matrix4@,OpenGL.Math.Vector4@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector4.ToString">
            <summary>
            Returns a System.String that represents the current Vector4.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4.Equals(OpenGL.Math.Vector4)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenGL.Math.Vector4.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenGL.Math.Vector4.LengthFast"/>
            <seealso cref="P:OpenGL.Math.Vector4.LengthSquared"/>
        </member>
        <member name="P:OpenGL.Math.Vector4.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenGL.Math.Vector4.Length"/>
            <seealso cref="P:OpenGL.Math.Vector4.LengthSquared"/>
        </member>
        <member name="P:OpenGL.Math.Vector4.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenGL.Math.Vector4.Length"/>
            <seealso cref="P:OpenGL.Math.Vector4.LengthFast"/>
        </member>
        <member name="P:OpenGL.Math.Vector4.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2 with the X and Y components of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Vector4.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="T:OpenGL.Math.Vector2">
            <summary>Represents a 2D vector using two single-precision floating-point numbers.</summary>
            <remarks>
            The Vector2 structure is suitable for interoperation with unmanaged code requiring two consecutive floats.
            </remarks>
        </member>
        <member name="F:OpenGL.Math.Vector2.X">
            <summary>
            The X component of the Vector2.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector2.Y">
            <summary>
            The Y component of the Vector2.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new Vector2.
            </summary>
            <param name="x">The x coordinate of the net Vector2.</param>
            <param name="y">The y coordinate of the net Vector2.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.#ctor(OpenGL.Math.Vector2)">
            <summary>
            Constructs a new Vector2 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.#ctor(OpenGL.Math.Vector3)">
            <summary>
            Constructs a new Vector2 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from. Z is discarded.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.#ctor(OpenGL.Math.Vector4)">
            <summary>
            Constructs a new Vector2 from the given Vector4.
            </summary>
            <param name="v">The Vector4 to copy components from. Z and W are discarded.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Add(OpenGL.Math.Vector2)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Add(OpenGL.Math.Vector2@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Sub(OpenGL.Math.Vector2)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Sub(OpenGL.Math.Vector2@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Normalize">
            <summary>
            Scales the Vector2 to unit length.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector2.NormalizeFast">
            <summary>
            Scales the Vector2 to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector2.Scale(System.Single,System.Single)">
            <summary>
            Scales the current Vector2 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Scale(OpenGL.Math.Vector2)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Scale(OpenGL.Math.Vector2@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="F:OpenGL.Math.Vector2.UnitX">
            <summary>
            Defines a unit-length Vector2 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector2.UnitY">
            <summary>
            Defines a unit-length Vector2 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector2.Zero">
            <summary>
            Defines a zero-length Vector2.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector2.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector2.SizeInBytes">
            <summary>
            Defines the size of the Vector2 struct in bytes.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector2.Add(OpenGL.Math.Vector2,OpenGL.Math.Vector2)">
            <summary>
            Add the specified instances
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of addition</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.Add(OpenGL.Math.Vector2@,OpenGL.Math.Vector2@,OpenGL.Math.Vector2@)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of addition</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Sub(OpenGL.Math.Vector2,OpenGL.Math.Vector2)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.Sub(OpenGL.Math.Vector2@,OpenGL.Math.Vector2@,OpenGL.Math.Vector2@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Mult(OpenGL.Math.Vector2,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.Mult(OpenGL.Math.Vector2@,System.Single,OpenGL.Math.Vector2@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Div(OpenGL.Math.Vector2,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.Div(OpenGL.Math.Vector2@,System.Single,OpenGL.Math.Vector2@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.ComponentMin(OpenGL.Math.Vector2,OpenGL.Math.Vector2)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.ComponentMin(OpenGL.Math.Vector2@,OpenGL.Math.Vector2@,OpenGL.Math.Vector2@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.ComponentMax(OpenGL.Math.Vector2,OpenGL.Math.Vector2)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.ComponentMax(OpenGL.Math.Vector2@,OpenGL.Math.Vector2@,OpenGL.Math.Vector2@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Min(OpenGL.Math.Vector2,OpenGL.Math.Vector2)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.Max(OpenGL.Math.Vector2,OpenGL.Math.Vector2)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.Clamp(OpenGL.Math.Vector2,OpenGL.Math.Vector2,OpenGL.Math.Vector2)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.Clamp(OpenGL.Math.Vector2@,OpenGL.Math.Vector2@,OpenGL.Math.Vector2@,OpenGL.Math.Vector2@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Normalize(OpenGL.Math.Vector2)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.Normalize(OpenGL.Math.Vector2@,OpenGL.Math.Vector2@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.NormalizeFast(OpenGL.Math.Vector2)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.NormalizeFast(OpenGL.Math.Vector2@,OpenGL.Math.Vector2@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Dot(OpenGL.Math.Vector2,OpenGL.Math.Vector2)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.Dot(OpenGL.Math.Vector2@,OpenGL.Math.Vector2@,System.Single@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.Lerp(OpenGL.Math.Vector2,OpenGL.Math.Vector2,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.Lerp(OpenGL.Math.Vector2@,OpenGL.Math.Vector2@,System.Single,OpenGL.Math.Vector2@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.BaryCentric(OpenGL.Math.Vector2,OpenGL.Math.Vector2,OpenGL.Math.Vector2,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.BaryCentric(OpenGL.Math.Vector2@,OpenGL.Math.Vector2@,OpenGL.Math.Vector2@,System.Single,System.Single,OpenGL.Math.Vector2@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenGL.Math.Vector2.op_Addition(OpenGL.Math.Vector2,OpenGL.Math.Vector2)">
            <summary>
            Adds the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of addition.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.op_Subtraction(OpenGL.Math.Vector2,OpenGL.Math.Vector2)">
            <summary>
            Subtracts the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of subtraction.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.op_UnaryNegation(OpenGL.Math.Vector2)">
            <summary>
            Negates the specified instance.
            </summary>
            <param name="vec">Operand.</param>
            <returns>Result of negation.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.op_Multiply(OpenGL.Math.Vector2,System.Single)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.op_Multiply(System.Single,OpenGL.Math.Vector2)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="scale">Left operand.</param>
            <param name="vec">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.op_Division(OpenGL.Math.Vector2,System.Single)">
            <summary>
            Divides the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand</param>
            <param name="scale">Right operand</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.op_Equality(OpenGL.Math.Vector2,OpenGL.Math.Vector2)">
            <summary>
            Compares the specified instances for equality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.op_Inequality(OpenGL.Math.Vector2,OpenGL.Math.Vector2)">
            <summary>
            Compares the specified instances for inequality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are not equal; false otherwise.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.ToString">
            <summary>
            Returns a System.String that represents the current Vector2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2.Equals(OpenGL.Math.Vector2)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenGL.Math.Vector2.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenGL.Math.Vector2.LengthFast"/>
            <seealso cref="P:OpenGL.Math.Vector2.LengthSquared"/>
        </member>
        <member name="P:OpenGL.Math.Vector2.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenGL.Math.Vector2.Length"/>
            <seealso cref="P:OpenGL.Math.Vector2.LengthSquared"/>
        </member>
        <member name="P:OpenGL.Math.Vector2.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenGL.Math.Vector2.Length"/>
            <seealso cref="P:OpenGL.Math.Vector2.LengthFast"/>
        </member>
        <member name="P:OpenGL.Math.Vector2.PerpendicularRight">
            <summary>
            Gets the perpendicular vector on the right side of this vector.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Vector2.PerpendicularLeft">
            <summary>
            Gets the perpendicular vector on the left side of this vector.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3.X">
            <summary>
            The X component of the Vector3.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3.Y">
            <summary>
            The Y component of the Vector3.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3.Z">
            <summary>
            The Z component of the Vector3.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Vector3.
            </summary>
            <param name="x">The x component of the Vector3.</param>
            <param name="y">The y component of the Vector3.</param>
            <param name="z">The z component of the Vector3.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.#ctor(OpenGL.Math.Vector2)">
            <summary>
            Constructs a new Vector3 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.#ctor(OpenGL.Math.Vector3)">
            <summary>
            Constructs a new Vector3 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.#ctor(OpenGL.Math.Vector4)">
            <summary>
            Constructs a new Vector3 from the given Vector4.
            </summary>
            <param name="v">The Vector4 to copy components from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Add(OpenGL.Math.Vector3)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Add(OpenGL.Math.Vector3@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Sub(OpenGL.Math.Vector3)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Sub(OpenGL.Math.Vector3@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Normalize">
            <summary>
            Scales the Vector3 to unit length.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector3.NormalizeFast">
            <summary>
            Scales the Vector3 to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector3.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Scales the current Vector3 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Scale(OpenGL.Math.Vector3)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Scale(OpenGL.Math.Vector3@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="F:OpenGL.Math.Vector3.UnitX">
            <summary>
            Defines a unit-length Vector3 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3.UnitY">
            <summary>
            Defines a unit-length Vector3 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3.UnitZ">
            <summary>
            /// Defines a unit-length Vector3 that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3.Zero">
            <summary>
            Defines a zero-length Vector3.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3.SizeInBytes">
            <summary>
            Defines the size of the Vector3 struct in bytes.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector3.Add(OpenGL.Math.Vector3,OpenGL.Math.Vector3)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of addition</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.Add(OpenGL.Math.Vector3@,OpenGL.Math.Vector3@,OpenGL.Math.Vector3@)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of addition</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Sub(OpenGL.Math.Vector3,OpenGL.Math.Vector3)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.Sub(OpenGL.Math.Vector3@,OpenGL.Math.Vector3@,OpenGL.Math.Vector3@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Mult(OpenGL.Math.Vector3,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.Mult(OpenGL.Math.Vector3@,System.Single,OpenGL.Math.Vector3@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Div(OpenGL.Math.Vector3,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.Div(OpenGL.Math.Vector3@,System.Single,OpenGL.Math.Vector3@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.ComponentMin(OpenGL.Math.Vector3,OpenGL.Math.Vector3)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.ComponentMin(OpenGL.Math.Vector3@,OpenGL.Math.Vector3@,OpenGL.Math.Vector3@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.ComponentMax(OpenGL.Math.Vector3,OpenGL.Math.Vector3)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.ComponentMax(OpenGL.Math.Vector3@,OpenGL.Math.Vector3@,OpenGL.Math.Vector3@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Min(OpenGL.Math.Vector3,OpenGL.Math.Vector3)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.Max(OpenGL.Math.Vector3,OpenGL.Math.Vector3)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.Clamp(OpenGL.Math.Vector3,OpenGL.Math.Vector3,OpenGL.Math.Vector3)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.Clamp(OpenGL.Math.Vector3@,OpenGL.Math.Vector3@,OpenGL.Math.Vector3@,OpenGL.Math.Vector3@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Normalize(OpenGL.Math.Vector3)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.Normalize(OpenGL.Math.Vector3@,OpenGL.Math.Vector3@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.NormalizeFast(OpenGL.Math.Vector3)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.NormalizeFast(OpenGL.Math.Vector3@,OpenGL.Math.Vector3@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Dot(OpenGL.Math.Vector3,OpenGL.Math.Vector3)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.Dot(OpenGL.Math.Vector3@,OpenGL.Math.Vector3@,System.Single@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Cross(OpenGL.Math.Vector3,OpenGL.Math.Vector3)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.Cross(OpenGL.Math.Vector3@,OpenGL.Math.Vector3@,OpenGL.Math.Vector3@)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
            <param name="result">The cross product of the two inputs</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Lerp(OpenGL.Math.Vector3,OpenGL.Math.Vector3,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.Lerp(OpenGL.Math.Vector3@,OpenGL.Math.Vector3@,System.Single,OpenGL.Math.Vector3@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.BaryCentric(OpenGL.Math.Vector3,OpenGL.Math.Vector3,OpenGL.Math.Vector3,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.BaryCentric(OpenGL.Math.Vector3@,OpenGL.Math.Vector3@,OpenGL.Math.Vector3@,System.Single,System.Single,OpenGL.Math.Vector3@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.TransformVector(OpenGL.Math.Vector3,OpenGL.Math.Matrix4)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.TransformVector(OpenGL.Math.Vector3@,OpenGL.Math.Matrix4@,OpenGL.Math.Vector3@)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.TransformNormal(OpenGL.Math.Vector3,OpenGL.Math.Matrix4)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.TransformNormal(OpenGL.Math.Vector3@,OpenGL.Math.Matrix4@,OpenGL.Math.Vector3@)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.TransformNormalInverse(OpenGL.Math.Vector3,OpenGL.Math.Matrix4)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.TransformNormalInverse(OpenGL.Math.Vector3@,OpenGL.Math.Matrix4@,OpenGL.Math.Vector3@)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.TransformPosition(OpenGL.Math.Vector3,OpenGL.Math.Matrix4)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed position</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.TransformPosition(OpenGL.Math.Vector3@,OpenGL.Math.Matrix4@,OpenGL.Math.Vector3@)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed position</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.Transform(OpenGL.Math.Vector3,OpenGL.Math.Matrix4)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.Transform(OpenGL.Math.Vector3@,OpenGL.Math.Matrix4@,OpenGL.Math.Vector4@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.TransformPerspective(OpenGL.Math.Vector3,OpenGL.Math.Matrix4)">
            <summary>Transform a Vector3 by the given Matrix, and project the resulting Vector4 back to a Vector3</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.TransformPerspective(OpenGL.Math.Vector3@,OpenGL.Math.Matrix4@,OpenGL.Math.Vector3@)">
            <summary>Transform a Vector3 by the given Matrix, and project the resulting Vector4 back to a Vector3</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector3.CalculateAngle(OpenGL.Math.Vector3,OpenGL.Math.Vector3)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>Angle (in radians) between the vectors.</returns>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:OpenGL.Math.Vector3.CalculateAngle(OpenGL.Math.Vector3@,OpenGL.Math.Vector3@,System.Single@)">
            <summary>Calculates the angle (in radians) between two vectors.</summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <param name="result">Angle (in radians) between the vectors.</param>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:OpenGL.Math.Vector3.ToString">
            <summary>
            Returns a System.String that represents the current Vector3.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3.Equals(OpenGL.Math.Vector3)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenGL.Math.Vector3.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenGL.Math.Vector3.LengthFast"/>
            <seealso cref="P:OpenGL.Math.Vector3.LengthSquared"/>
        </member>
        <member name="P:OpenGL.Math.Vector3.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenGL.Math.Vector3.Length"/>
            <seealso cref="P:OpenGL.Math.Vector3.LengthSquared"/>
        </member>
        <member name="P:OpenGL.Math.Vector3.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenGL.Math.Vector3.Length"/>
            <seealso cref="P:OpenGL.Math.Vector3.LengthFast"/>
        </member>
        <member name="P:OpenGL.Math.Vector3.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2 with the X and Y components of this instance.
            </summary>
        </member>
        <member name="T:OpenGL.Math.Vector2d">
            <summary>Represents a 2D vector using two double-precision floating-point numbers.</summary>
        </member>
        <member name="F:OpenGL.Math.Vector2d.X">
            <summary>The X coordinate of this instance.</summary>
        </member>
        <member name="F:OpenGL.Math.Vector2d.Y">
            <summary>The Y coordinate of this instance.</summary>
        </member>
        <member name="F:OpenGL.Math.Vector2d.UnitX">
            <summary>
            Defines a unit-length Vector2d that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector2d.UnitY">
            <summary>
            Defines a unit-length Vector2d that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector2d.Zero">
            <summary>
            Defines a zero-length Vector2d.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector2d.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector2d.SizeInBytes">
            <summary>
            Defines the size of the Vector2d struct in bytes.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector2d.#ctor(System.Double,System.Double)">
            <summary>Constructs left vector with the given coordinates.</summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Add(OpenGL.Math.Vector2d)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Add(OpenGL.Math.Vector2d@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Sub(OpenGL.Math.Vector2d)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Sub(OpenGL.Math.Vector2d@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Mult(System.Double)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Div(System.Double)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Normalize">
            <summary>
            Scales the Vector2 to unit length.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Scale(System.Double,System.Double)">
            <summary>
            Scales the current Vector2 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Scale(OpenGL.Math.Vector2d)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Scale(OpenGL.Math.Vector2d@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Add(OpenGL.Math.Vector2d,OpenGL.Math.Vector2d)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of addition</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Add(OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of addition</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Sub(OpenGL.Math.Vector2d,OpenGL.Math.Vector2d)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Sub(OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Mult(OpenGL.Math.Vector2d,System.Double)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="d">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Mult(OpenGL.Math.Vector2d@,System.Double,OpenGL.Math.Vector2d@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="d">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Div(OpenGL.Math.Vector2d,System.Double)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="d">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Div(OpenGL.Math.Vector2d@,System.Double,OpenGL.Math.Vector2d@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="d">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Min(OpenGL.Math.Vector2d,OpenGL.Math.Vector2d)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Min(OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Max(OpenGL.Math.Vector2d,OpenGL.Math.Vector2d)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Max(OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Clamp(OpenGL.Math.Vector2d,OpenGL.Math.Vector2d,OpenGL.Math.Vector2d)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Clamp(OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Normalize(OpenGL.Math.Vector2d)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Normalize(OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.NormalizeFast(OpenGL.Math.Vector2d)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.NormalizeFast(OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Dot(OpenGL.Math.Vector2d,OpenGL.Math.Vector2d)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Dot(OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@,System.Double@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Lerp(OpenGL.Math.Vector2d,OpenGL.Math.Vector2d,System.Double)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Lerp(OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@,System.Double,OpenGL.Math.Vector2d@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.BaryCentric(OpenGL.Math.Vector2d,OpenGL.Math.Vector2d,OpenGL.Math.Vector2d,System.Double,System.Double)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.BaryCentric(OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@,OpenGL.Math.Vector2d@,System.Single,System.Single,OpenGL.Math.Vector2d@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenGL.Math.Vector2d.op_Addition(OpenGL.Math.Vector2d,OpenGL.Math.Vector2d)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.op_Subtraction(OpenGL.Math.Vector2d,OpenGL.Math.Vector2d)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.op_UnaryNegation(OpenGL.Math.Vector2d)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.op_Multiply(OpenGL.Math.Vector2d,System.Double)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="f">The scalar.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.op_Multiply(System.Double,OpenGL.Math.Vector2d)">
            <summary>
            Multiply an instance by a scalar.
            </summary>
            <param name="f">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.op_Division(OpenGL.Math.Vector2d,System.Double)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="f">The scalar.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.op_Equality(OpenGL.Math.Vector2d,OpenGL.Math.Vector2d)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>True, if both instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.op_Inequality(OpenGL.Math.Vector2d,OpenGL.Math.Vector2d)">
            <summary>
            Compares two instances for ienquality.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>True, if the instances are not equal; false otherwise.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.ToString">
            <summary>
            Returns a System.String that represents the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector2d.Equals(OpenGL.Math.Vector2d)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenGL.Math.Vector2d.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <seealso cref="P:OpenGL.Math.Vector2d.LengthSquared"/>
        </member>
        <member name="P:OpenGL.Math.Vector2d.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenGL.Math.Vector2d.Length"/>
        </member>
        <member name="P:OpenGL.Math.Vector2d.PerpendicularRight">
            <summary>
            Gets the perpendicular vector on the right side of this vector.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Vector2d.PerpendicularLeft">
            <summary>
            Gets the perpendicular vector on the left side of this vector.
            </summary>
        </member>
        <member name="T:OpenGL.Math.Vector3d">
            <summary>
            Represents a 3D vector using three double-precision floating-point numbers.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3d.X">
            <summary>
            The X component of the Vector3.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3d.Y">
            <summary>
            The Y component of the Vector3.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3d.Z">
            <summary>
            The Z component of the Vector3.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new Vector3.
            </summary>
            <param name="x">The x component of the Vector3.</param>
            <param name="y">The y component of the Vector3.</param>
            <param name="z">The z component of the Vector3.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.#ctor(OpenGL.Math.Vector2d)">
            <summary>
            Constructs a new instance from the given Vector2d.
            </summary>
            <param name="v">The Vector2d to copy components from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.#ctor(OpenGL.Math.Vector3d)">
            <summary>
            Constructs a new instance from the given Vector3d.
            </summary>
            <param name="v">The Vector3d to copy components from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.#ctor(OpenGL.Math.Vector4d)">
            <summary>
            Constructs a new instance from the given Vector4d.
            </summary>
            <param name="v">The Vector4d to copy components from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Add(OpenGL.Math.Vector3d)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Add(OpenGL.Math.Vector3d@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Sub(OpenGL.Math.Vector3d)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Sub(OpenGL.Math.Vector3d@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Mult(System.Double)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Div(System.Double)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Normalize">
            <summary>
            Scales the Vector3d to unit length.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector3d.NormalizeFast">
            <summary>
            Scales the Vector3d to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Scales the current Vector3d by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Scale(OpenGL.Math.Vector3d)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Scale(OpenGL.Math.Vector3d@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="F:OpenGL.Math.Vector3d.UnitX">
            <summary>
            Defines a unit-length Vector3d that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3d.UnitY">
            <summary>
            Defines a unit-length Vector3d that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3d.UnitZ">
            <summary>
            /// Defines a unit-length Vector3d that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3d.Zero">
            <summary>
            Defines a zero-length Vector3.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3d.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector3d.SizeInBytes">
            <summary>
            Defines the size of the Vector3d struct in bytes.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Add(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of addition</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Add(OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of addition</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Sub(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Sub(OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Mult(OpenGL.Math.Vector3d,System.Double)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Mult(OpenGL.Math.Vector3d@,System.Double,OpenGL.Math.Vector3d@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Div(OpenGL.Math.Vector3d,System.Double)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Div(OpenGL.Math.Vector3d@,System.Double,OpenGL.Math.Vector3d@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.ComponentMin(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.ComponentMin(OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.ComponentMax(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.ComponentMax(OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Min(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d)">
            <summary>
            Returns the Vector3d with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Max(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d)">
            <summary>
            Returns the Vector3d with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Clamp(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d,OpenGL.Math.Vector3d)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Clamp(OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Normalize(OpenGL.Math.Vector3d)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Normalize(OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.NormalizeFast(OpenGL.Math.Vector3d)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.NormalizeFast(OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Dot(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Dot(OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@,System.Double@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Cross(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Cross(OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
            <param name="result">The cross product of the two inputs</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Lerp(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d,System.Double)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Lerp(OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@,System.Double,OpenGL.Math.Vector3d@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.BaryCentric(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d,OpenGL.Math.Vector3d,System.Double,System.Double)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.BaryCentric(OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@,System.Single,System.Single,OpenGL.Math.Vector3d@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.TransformVector(OpenGL.Math.Vector3d,OpenGL.Math.Matrix4d)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.TransformVector(OpenGL.Math.Vector3d@,OpenGL.Math.Matrix4d@,OpenGL.Math.Vector3d@)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.TransformNormal(OpenGL.Math.Vector3d,OpenGL.Math.Matrix4d)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.TransformNormal(OpenGL.Math.Vector3d@,OpenGL.Math.Matrix4d@,OpenGL.Math.Vector3d@)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.TransformNormalInverse(OpenGL.Math.Vector3d,OpenGL.Math.Matrix4d)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.TransformNormalInverse(OpenGL.Math.Vector3d@,OpenGL.Math.Matrix4d@,OpenGL.Math.Vector3d@)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.TransformPosition(OpenGL.Math.Vector3d,OpenGL.Math.Matrix4d)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed position</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.TransformPosition(OpenGL.Math.Vector3d@,OpenGL.Math.Matrix4d@,OpenGL.Math.Vector3d@)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed position</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Transform(OpenGL.Math.Vector3d,OpenGL.Math.Matrix4d)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Transform(OpenGL.Math.Vector3d@,OpenGL.Math.Matrix4d@,OpenGL.Math.Vector4d@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.TransformPerspective(OpenGL.Math.Vector3d,OpenGL.Math.Matrix4d)">
            <summary>
            Transform a Vector3d by the given Matrix, and project the resulting Vector4 back to a Vector3
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.TransformPerspective(OpenGL.Math.Vector3d@,OpenGL.Math.Matrix4d@,OpenGL.Math.Vector3d@)">
            <summary>Transform a Vector3d by the given Matrix, and project the resulting Vector4d back to a Vector3d</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector3d.CalculateAngle(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>Angle (in radians) between the vectors.</returns>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:OpenGL.Math.Vector3d.CalculateAngle(OpenGL.Math.Vector3d@,OpenGL.Math.Vector3d@,System.Double@)">
            <summary>Calculates the angle (in radians) between two vectors.</summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <param name="result">Angle (in radians) between the vectors.</param>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:OpenGL.Math.Vector3d.ToString">
            <summary>
            Returns a System.String that represents the current Vector3.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector3d.Equals(OpenGL.Math.Vector3d)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenGL.Math.Vector3d.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenGL.Math.Vector3d.LengthFast"/>
            <seealso cref="P:OpenGL.Math.Vector3d.LengthSquared"/>
        </member>
        <member name="P:OpenGL.Math.Vector3d.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenGL.Math.Vector3d.Length"/>
            <seealso cref="P:OpenGL.Math.Vector3d.LengthSquared"/>
        </member>
        <member name="P:OpenGL.Math.Vector3d.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenGL.Math.Vector3d.Length"/>
            <seealso cref="P:OpenGL.Math.Vector3d.LengthFast"/>
        </member>
        <member name="P:OpenGL.Math.Vector3d.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2d with the X and Y components of this instance.
            </summary>
        </member>
        <member name="T:OpenGL.Math.Vector4d">
            <summary>Represents a 4D vector using four double-precision floating-point numbers.</summary>
        </member>
        <member name="F:OpenGL.Math.Vector4d.X">
            <summary>
            The X component of the Vector4d.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4d.Y">
            <summary>
            The Y component of the Vector4d.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4d.Z">
            <summary>
            The Z component of the Vector4d.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4d.W">
            <summary>
            The W component of the Vector4d.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4d.UnitX">
            <summary>
            Defines a unit-length Vector4d that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4d.UnitY">
            <summary>
            Defines a unit-length Vector4d that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4d.UnitZ">
            <summary>
            Defines a unit-length Vector4d that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4d.UnitW">
            <summary>
            Defines a unit-length Vector4d that points towards the W-axis.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4d.Zero">
            <summary>
            Defines a zero-length Vector4d.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4d.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Vector4d.SizeInBytes">
            <summary>
            Defines the size of the Vector4d struct in bytes.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new Vector4d.
            </summary>
            <param name="x">The x component of the Vector4d.</param>
            <param name="y">The y component of the Vector4d.</param>
            <param name="z">The z component of the Vector4d.</param>
            <param name="w">The z component of the Vector4d.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.#ctor(OpenGL.Math.Vector2d)">
            <summary>
            Constructs a new Vector4d from the given Vector2d.
            </summary>
            <param name="v">The Vector2d to copy components from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.#ctor(OpenGL.Math.Vector3d)">
            <summary>
            Constructs a new Vector4d from the given Vector3d.
            </summary>
            <param name="v">The Vector3d to copy components from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.#ctor(OpenGL.Math.Vector4d)">
            <summary>
            Constructs a new Vector4d from the given Vector4d.
            </summary>
            <param name="v">The Vector4d to copy components from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Add(OpenGL.Math.Vector4d)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Add(OpenGL.Math.Vector4d@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Sub(OpenGL.Math.Vector4d)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Sub(OpenGL.Math.Vector4d@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Mult(System.Double)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Div(System.Double)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Normalize">
            <summary>
            Scales the Vector4d to unit length.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector4d.NormalizeFast">
            <summary>
            Scales the Vector4d to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Scale(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales the current Vector4d by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
            <param name="sw">The scale of the Z component.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Scale(OpenGL.Math.Vector4d)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Scale(OpenGL.Math.Vector4d@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Add(OpenGL.Math.Vector4d,OpenGL.Math.Vector4d)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of addition</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Add(OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@)">
            <summary>
            Add two Vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of addition</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Sub(OpenGL.Math.Vector4d,OpenGL.Math.Vector4d)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Sub(OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Mult(OpenGL.Math.Vector4d,System.Double)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Mult(OpenGL.Math.Vector4d@,System.Double,OpenGL.Math.Vector4d@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Div(OpenGL.Math.Vector4d,System.Double)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Div(OpenGL.Math.Vector4d@,System.Double,OpenGL.Math.Vector4d@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Min(OpenGL.Math.Vector4d,OpenGL.Math.Vector4d)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Min(OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Max(OpenGL.Math.Vector4d,OpenGL.Math.Vector4d)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Max(OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Clamp(OpenGL.Math.Vector4d,OpenGL.Math.Vector4d,OpenGL.Math.Vector4d)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Clamp(OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Normalize(OpenGL.Math.Vector4d)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Normalize(OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.NormalizeFast(OpenGL.Math.Vector4d)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.NormalizeFast(OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Dot(OpenGL.Math.Vector4d,OpenGL.Math.Vector4d)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Dot(OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@,System.Double@)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Lerp(OpenGL.Math.Vector4d,OpenGL.Math.Vector4d,System.Double)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Lerp(OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@,System.Double,OpenGL.Math.Vector4d@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.BaryCentric(OpenGL.Math.Vector4d,OpenGL.Math.Vector4d,OpenGL.Math.Vector4d,System.Double,System.Double)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.BaryCentric(OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@,OpenGL.Math.Vector4d@,System.Single,System.Single,OpenGL.Math.Vector4d@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Transform(OpenGL.Math.Vector4d,OpenGL.Math.Matrix4d)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Transform(OpenGL.Math.Vector4d@,OpenGL.Math.Matrix4d@,OpenGL.Math.Vector4d@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenGL.Math.Vector4d.ToString">
            <summary>
            Returns a System.String that represents the current Vector4d.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenGL.Math.Vector4d.Equals(OpenGL.Math.Vector4d)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenGL.Math.Vector4d.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenGL.Math.Vector4d.LengthFast"/>
            <seealso cref="P:OpenGL.Math.Vector4d.LengthSquared"/>
        </member>
        <member name="P:OpenGL.Math.Vector4d.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenGL.Math.Vector4d.Length"/>
            <seealso cref="P:OpenGL.Math.Vector4d.LengthSquared"/>
        </member>
        <member name="P:OpenGL.Math.Vector4d.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenGL.Math.Vector4d.Length"/>
        </member>
        <member name="P:OpenGL.Math.Vector4d.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2d with the X and Y components of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Vector4d.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3d with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Matrix4d.Row0">
            <summary>
            Top row of the matrix
            </summary>
        </member>
        <member name="F:OpenGL.Math.Matrix4d.Row1">
            <summary>
            2nd row of the matrix
            </summary>
        </member>
        <member name="F:OpenGL.Math.Matrix4d.Row2">
            <summary>
            3rd row of the matrix
            </summary>
        </member>
        <member name="F:OpenGL.Math.Matrix4d.Row3">
            <summary>
            Bottom row of the matrix
            </summary>
        </member>
        <member name="F:OpenGL.Math.Matrix4d.Identity">
            <summary>
            The identity matrix
            </summary>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.#ctor(OpenGL.Math.Vector4d,OpenGL.Math.Vector4d,OpenGL.Math.Vector4d,OpenGL.Math.Vector4d)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="row0">Top row of the matrix</param>
            <param name="row1">Second row of the matrix</param>
            <param name="row2">Third row of the matrix</param>
            <param name="row3">Bottom row of the matrix</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="m00">First item of the first row.</param>
            <param name="m01">Second item of the first row.</param>
            <param name="m02">Third item of the first row.</param>
            <param name="m03">Fourth item of the first row.</param>
            <param name="m10">First item of the second row.</param>
            <param name="m11">Second item of the second row.</param>
            <param name="m12">Third item of the second row.</param>
            <param name="m13">Fourth item of the second row.</param>
            <param name="m20">First item of the third row.</param>
            <param name="m21">Second item of the third row.</param>
            <param name="m22">Third item of the third row.</param>
            <param name="m23">First item of the third row.</param>
            <param name="m30">Fourth item of the fourth row.</param>
            <param name="m31">Second item of the fourth row.</param>
            <param name="m32">Third item of the fourth row.</param>
            <param name="m33">Fourth item of the fourth row.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.CreateTranslation(System.Double,System.Double,System.Double,OpenGL.Math.Matrix4d@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.CreateTranslation(OpenGL.Math.Vector3d@,OpenGL.Math.Matrix4d@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.CreateTranslation(System.Double,System.Double,System.Double)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <returns>The resulting Matrix4d instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.CreateTranslation(OpenGL.Math.Vector3d)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <returns>The resulting Matrix4d instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.CreateOrthographic(System.Double,System.Double,System.Double,System.Double,OpenGL.Math.Matrix4d@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.CreateOrthographic(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <rereturns>The resulting Matrix4d instance.</rereturns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,OpenGL.Math.Matrix4d@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4d instance.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <returns>The resulting Matrix4d instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Translation(OpenGL.Math.Vector3d)">
            <summary>
            Build a translation matrix with the given translation
            </summary>
            <param name="trans">The vector to translate along</param>
            <returns>A Translation matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Translation(System.Double,System.Double,System.Double)">
            <summary>
            Build a translation matrix with the given translation
            </summary>
            <param name="x">X translation</param>
            <param name="y">Y translation</param>
            <param name="z">Z translation</param>
            <returns>A Translation matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Scale(System.Double)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Single scale factor for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Scale(OpenGL.Math.Vector3d)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Scale factors for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="x">Scale factor for x-axis</param>
            <param name="y">Scale factor for y-axis</param>
            <param name="z">Scale factor for z-axis</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.RotateX(System.Double)">
            <summary>
            Build a rotation matrix that rotates about the x-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the x-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.RotateY(System.Double)">
            <summary>
            Build a rotation matrix that rotates about the y-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the y-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.RotateZ(System.Double)">
            <summary>
            Build a rotation matrix that rotates about the z-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the z-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Rotate(OpenGL.Math.Vector3d,System.Double)">
            <summary>
            Build a rotation matrix to rotate about the given axis
            </summary>
            <param name="axis">the axis to rotate about</param>
            <param name="angle">angle in radians to rotate counter-clockwise (looking in the direction of the given axis)</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Rotate(OpenGL.Math.Quaterniond)">
            <summary>
            Build a rotation matrix from a quaternion
            </summary>
            <param name="q">the quaternion</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.LookAt(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d,OpenGL.Math.Vector3d)">
            <summary>
            Build a world space to camera space matrix
            </summary>
            <param name="eye">Eye (camera) position in world space</param>
            <param name="target">Target position in world space</param>
            <param name="up">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <returns>A Matrix that transforms world space to camera space</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Frustum(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Perspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Mult(OpenGL.Math.Matrix4d,OpenGL.Math.Matrix4d)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <returns>A new instance that is the result of the multiplication</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Mult(OpenGL.Math.Matrix4d@,OpenGL.Math.Matrix4d@,OpenGL.Math.Matrix4d@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <param name="result">A new instance that is the result of the multiplication</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Invert(OpenGL.Math.Matrix4d)">
            <summary>
            Calculate the inverse of the given matrix
            </summary>
            <param name="mat">The matrix to invert</param>
            <returns>The inverse of the given matrix if it has one, or the input if it is singular</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the Matrix4d is singular.</exception>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Transpose(OpenGL.Math.Matrix4d)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <returns>The transpose of the given matrix</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Transpose(OpenGL.Math.Matrix4d@,OpenGL.Math.Matrix4d@)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <param name="result">The result of the calculation</param>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.op_Multiply(OpenGL.Math.Matrix4d,OpenGL.Math.Matrix4d)">
            <summary>
            Matrix multiplication
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
            <returns>A new Matrix44 which holds the result of the multiplication</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.ToString">
            <summary>
            Returns a System.String that represents the current Matrix44.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix4d.Equals(OpenGL.Math.Matrix4d)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="other">An matrix to compare with this matrix.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.Determinant">
            <summary>
            The determinant of this matrix
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.Column0">
            <summary>
            The first column of this matrix
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.Column1">
            <summary>
            The second column of this matrix
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.Column2">
            <summary>
            The third column of this matrix
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.Column3">
            <summary>
            The fourth column of this matrix
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M14">
            <summary>
            Gets or sets the value at row 1, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M24">
            <summary>
            Gets or sets the value at row 2, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M34">
            <summary>
            Gets or sets the value at row 3, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M41">
            <summary>
            Gets or sets the value at row 4, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M42">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M43">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Matrix4d.M44">
            <summary>
            Gets or sets the value at row 4, column 4 of this instance.
            </summary>
        </member>
        <member name="F:OpenGL.Math.Matrix3d.R0C0">
            <summary>Row 0, Column 0</summary>
        </member>
        <member name="F:OpenGL.Math.Matrix3d.R0C1">
            <summary>Row 0, Column 1</summary>
        </member>
        <member name="F:OpenGL.Math.Matrix3d.R0C2">
            <summary>Row 0, Column 2</summary>
        </member>
        <member name="F:OpenGL.Math.Matrix3d.R1C0">
            <summary>Row 1, Column 0</summary>
        </member>
        <member name="F:OpenGL.Math.Matrix3d.R1C1">
            <summary>Row 1, Column 1</summary>
        </member>
        <member name="F:OpenGL.Math.Matrix3d.R1C2">
            <summary>Row 1, Column 2</summary>
        </member>
        <member name="F:OpenGL.Math.Matrix3d.R2C0">
            <summary>Row 2, Column 0</summary>
        </member>
        <member name="F:OpenGL.Math.Matrix3d.R2C1">
            <summary>Row 2, Column 1</summary>
        </member>
        <member name="F:OpenGL.Math.Matrix3d.R2C2">
            <summary>Row 2, Column 2</summary>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.op_Explicit(OpenGL.Math.Matrix3d)~System.IntPtr">
            <summary>Converts the matrix into an IntPtr.</summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>An IntPtr for the matrix.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.op_Explicit(OpenGL.Math.Matrix3d)~System.Double*">
            <summary>Converts the matrix into left double*.</summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>A double* for the matrix.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.op_Explicit(OpenGL.Math.Matrix3d)~System.Double[]">
            <summary>Converts the matrix into an array of doubles.</summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>An array of doubles for the matrix.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.#ctor(OpenGL.Math.Matrix3d@)">
            <summary>Constructs left matrix with the same components as the given matrix.</summary>
            <param name="matrix">The matrix whose components to copy.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Constructs left matrix with the given values.</summary>
            <param name="r0c0">The value for row 0 column 0.</param>
            <param name="r0c1">The value for row 0 column 1.</param>
            <param name="r0c2">The value for row 0 column 2.</param>
            <param name="r1c0">The value for row 1 column 0.</param>
            <param name="r1c1">The value for row 1 column 1.</param>
            <param name="r1c2">The value for row 1 column 2.</param>
            <param name="r2c0">The value for row 2 column 0.</param>
            <param name="r2c1">The value for row 2 column 1.</param>
            <param name="r2c2">The value for row 2 column 2.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.#ctor(System.Double[])">
            <summary>Constructs left matrix from the given array of double-precision floating point numbers.</summary>
            <param name="doubleArray">The array of doubles for the components of the matrix.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.#ctor(OpenGL.Math.Quaterniond)">
            <summary>Constructs left matrix from the given quaternion.</summary>
            <param name="quaternion">The quaternion to use to construct the martix.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.Equals(OpenGL.Math.Matrix3d)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="matrix">The OpenTK.Matrix3d structure to compare with.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.Equals(OpenGL.Math.Matrix3d@)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="matrix">The OpenTK.Matrix3d structure to compare to.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.Equals(OpenGL.Math.Matrix3d@,OpenGL.Math.Matrix3d@)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="left">The left-hand operand.</param>
            <param name="right">The right-hand operand.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.EqualsApprox(OpenGL.Math.Matrix3d@,System.Double)">
            <summary>Indicates whether the current matrix is approximately equal to another matrix.</summary>
            <param name="matrix">The OpenTK.Matrix3d structure to compare with.</param>
            <param name="tolerance">The limit below which the matrices are considered equal.</param>
            <returns>true if the current matrix is approximately equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.EqualsApprox(OpenGL.Math.Matrix3d@,OpenGL.Math.Matrix3d@,System.Double)">
            <summary>Indicates whether the current matrix is approximately equal to another matrix.</summary>
            <param name="left">The left-hand operand.</param>
            <param name="right">The right-hand operand.</param>
            <param name="tolerance">The limit below which the matrices are considered equal.</param>
            <returns>true if the current matrix is approximately equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.Add(OpenGL.Math.Matrix3d@)">
            <summary>Add left matrix to this matrix.</summary>
            <param name="matrix">The matrix to add.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.Add(OpenGL.Math.Matrix3d@,OpenGL.Math.Matrix3d@)">
            <summary>Add left matrix to this matrix.</summary>
            <param name="matrix">The matrix to add.</param>
            <param name="result">The resulting matrix of the addition.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.Add(OpenGL.Math.Matrix3d@,OpenGL.Math.Matrix3d@,OpenGL.Math.Matrix3d@)">
            <summary>Add left matrix to left matrix</summary>
            <param name="left">The matrix on the left side of the equation</param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the addition</param>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.Subtract(OpenGL.Math.Matrix3d@)">
            <summary>Subtract left matrix from this matrix.</summary>
            <param name="matrix">The matrix to subtract.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.Subtract(OpenGL.Math.Matrix3d@,OpenGL.Math.Matrix3d@)">
            <summary>Subtract left matrix from this matrix.</summary>
            <param name="matrix">The matrix to subtract.</param>
            <param name="result">The resulting matrix of the subtraction.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.Subtract(OpenGL.Math.Matrix3d@,OpenGL.Math.Matrix3d@,OpenGL.Math.Matrix3d@)">
            <summary>Subtract left matrix from left matrix.</summary>
            <param name="left">The matrix on the left side of the equation.</param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the subtraction.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.Multiply(OpenGL.Math.Matrix3d@)">
            <summary>Multiply left martix times this matrix.</summary>
            <param name="matrix">The matrix to multiply.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.Multiply(OpenGL.Math.Matrix3d@,OpenGL.Math.Matrix3d@)">
            <summary>Multiply matrix times this matrix.</summary>
            <param name="matrix">The matrix to multiply.</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.Multiply(OpenGL.Math.Matrix3d@,OpenGL.Math.Matrix3d@,OpenGL.Math.Matrix3d@)">
            <summary>Multiply left matrix times left matrix.</summary>
            <param name="left">The matrix on the left side of the equation.</param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.Multiply(System.Double)">
            <summary>Multiply matrix times this matrix.</summary>
            <param name="scalar">The matrix to multiply.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.Multiply(System.Double,OpenGL.Math.Matrix3d@)">
            <summary>Multiply matrix times this matrix.</summary>
            <param name="scalar">The matrix to multiply.</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.Multiply(OpenGL.Math.Matrix3d@,System.Double,OpenGL.Math.Matrix3d@)">
            <summary>Multiply left matrix times left matrix.</summary>
            <param name="matrix">The matrix on the matrix side of the equation.</param>
            <param name="scalar">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="F:OpenGL.Math.Matrix3d.Identity">
            <summary>The identity matrix.</summary>
        </member>
        <member name="F:OpenGL.Math.Matrix3d.Zero">
            <summary>A matrix of all zeros.</summary>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:OpenGL.Math.Matrix3d.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>A System.String containing left fully qualified type name.</returns>
        </member>
        <member name="P:OpenGL.Math.Matrix3d.Item(System.Int32,System.Int32)">
            <summary>Gets the component at the given row and column in the matrix.</summary>
            <param name="row">The row of the matrix.</param>
            <param name="column">The column of the matrix.</param>
            <returns>The component at the given row and column in the matrix.</returns>
        </member>
        <member name="P:OpenGL.Math.Matrix3d.Item(System.Int32)">
            <summary>Gets the component at the index into the matrix.</summary>
            <param name="index">The index into the components of the matrix.</param>
            <returns>The component at the given index into the matrix.</returns>
        </member>
        <member name="T:OpenGL.Math.Quaterniond">
            <summary>
            Represents a double-precision Quaternion.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.#ctor(OpenGL.Math.Vector3d,System.Double)">
            <summary>
            Construct a new Quaterniond from vector and w components
            </summary>
            <param name="v">The vector part</param>
            <param name="w">The w part</param>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a new Quaterniond
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <param name="z">The z component</param>
            <param name="w">The w component</param>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.ToAxisAngle(OpenGL.Math.Vector3d@,System.Double@)">
            <summary>
            Convert the current quaternion to axis angle representation
            </summary>
            <param name="axis">The resultant axis</param>
            <param name="angle">The resultant angle</param>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.ToAxisAngle">
            <summary>
            Convert this instance to an axis-angle representation.
            </summary>
            <returns>A Vector4 that is the axis-angle representation of this quaternion.</returns>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.Normalize">
            <summary>
            Scales the Quaterniond to unit length.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.Conjugate">
            <summary>
            Convert this Quaterniond to its conjugate
            </summary>
        </member>
        <member name="F:OpenGL.Math.Quaterniond.Identity">
            <summary>
            Defines the identity quaternion.
            </summary>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.Add(OpenGL.Math.Quaterniond,OpenGL.Math.Quaterniond)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <returns>The result of the addition</returns>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.Add(OpenGL.Math.Quaterniond@,OpenGL.Math.Quaterniond@,OpenGL.Math.Quaterniond@)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <param name="result">The result of the addition</param>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.Sub(OpenGL.Math.Quaterniond,OpenGL.Math.Quaterniond)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.Sub(OpenGL.Math.Quaterniond@,OpenGL.Math.Quaterniond@,OpenGL.Math.Quaterniond@)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.Conjugate(OpenGL.Math.Quaterniond)">
            <summary>
            Get the conjugate of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond</param>
            <returns>The conjugate of the given Quaterniond</returns>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.Conjugate(OpenGL.Math.Quaterniond@,OpenGL.Math.Quaterniond@)">
            <summary>
            Get the conjugate of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond</param>
            <param name="result">The conjugate of the given Quaterniond</param>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.Invert(OpenGL.Math.Quaterniond)">
            <summary>
            Get the inverse of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond to invert</param>
            <returns>The inverse of the given Quaterniond</returns>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.Invert(OpenGL.Math.Quaterniond@,OpenGL.Math.Quaterniond@)">
            <summary>
            Get the inverse of the given Quaterniond
            </summary>
            <param name="q">The Quaterniond to invert</param>
            <param name="result">The inverse of the given Quaterniond</param>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.Normalize(OpenGL.Math.Quaterniond)">
            <summary>
            Scale the given Quaterniond to unit length
            </summary>
            <param name="q">The Quaterniond to normalize</param>
            <returns>The normalized Quaterniond</returns>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.Normalize(OpenGL.Math.Quaterniond@,OpenGL.Math.Quaterniond@)">
            <summary>
            Scale the given Quaterniond to unit length
            </summary>
            <param name="q">The Quaterniond to normalize</param>
            <param name="result">The normalized Quaterniond</param>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.FromAxisAngle(OpenGL.Math.Vector3d,System.Double)">
            <summary>
            Build a Quaterniond from the given axis and angle
            </summary>
            <param name="axis">The axis to rotate about</param>
            <param name="angle">The rotation angle in radians</param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.Slerp(OpenGL.Math.Quaterniond,OpenGL.Math.Quaterniond,System.Double)">
            <summary>
            Do Spherical linear interpolation between two quaternions 
            </summary>
            <param name="q1">The first Quaterniond</param>
            <param name="q2">The second Quaterniond</param>
            <param name="blend">The blend factor</param>
            <returns>A smooth blend between the given quaternions</returns>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.ToString">
            <summary>
            Returns a System.String that represents the current Quaterniond.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.Equals(System.Object)">
            <summary>
            Compares this object instance to another object for equality. 
            </summary>
            <param name="other">The other object to be used in the comparison.</param>
            <returns>True if both objects are Quaternions of equal value. Otherwise it returns false.</returns>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.GetHashCode">
            <summary>
            Provides the hash code for this object. 
            </summary>
            <returns>A hash code formed from the bitwise XOR of this objects members.</returns>
        </member>
        <member name="M:OpenGL.Math.Quaterniond.Equals(OpenGL.Math.Quaterniond)">
            <summary>
            Compares this Quaterniond instance to another Quaterniond for equality. 
            </summary>
            <param name="other">The other Quaterniond to be used in the comparison.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="P:OpenGL.Math.Quaterniond.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3d with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Quaterniond.X">
            <summary>
            Gets or sets the X component of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Quaterniond.Y">
            <summary>
            Gets or sets the Y component of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Quaterniond.Z">
            <summary>
            Gets or sets the Z component of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Quaterniond.W">
            <summary>
            Gets or sets the W component of this instance.
            </summary>
        </member>
        <member name="P:OpenGL.Math.Quaterniond.Length">
            <summary>
            Gets the length (magnitude) of the Quaterniond.
            </summary>
            <seealso cref="P:OpenGL.Math.Quaterniond.LengthSquared"/>
        </member>
        <member name="P:OpenGL.Math.Quaterniond.LengthSquared">
            <summary>
            Gets the square of the Quaterniond length (magnitude).
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.SaveSettings">
            <summary>
            Provides methods for saving the application's settings.
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.SaveSettings.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.FaceModule.SaveSettings">SaveSettings</see> class. 
            </summary>
            <param name="aName">A <b>string</b> containing a complete path to the file in which the application's settings will be saved. </param>
        </member>
        <member name="M:CADImport.FaceModule.SaveSettings.SaveOptions(System.Collections.SortedList)">
            <summary>
            Saves the application's settings to the file.
            </summary>
            <param name="sr1">A <see cref="T:System.Collections.SortedList">SortedList</see> that contains the application's settings.</param>
        </member>
        <member name="M:CADImport.FaceModule.SaveSettings.LoadOptions">
            <summary>
            Loads the application's settings from the file. 
            </summary>
            <returns>A <see cref="T:System.Collections.SortedList">SortedList</see> that contains the application's settings.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.IEntryFactory">
            <summary>
            Defines factory methods for creating new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"></see> values.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IEntryFactory.MakeFileEntry(System.String)">
            <summary>
            Create a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> for a file given its name
            </summary>
            <param name="fileName">The name of the file to create an entry for.</param>
            <returns>Returns a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">file entry</see> based on the <paramref name="fileName"/> passed.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IEntryFactory.MakeFileEntry(System.String,System.Boolean)">
            <summary>
            Create a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> for a file given its name
            </summary>
            <param name="fileName">The name of the file to create an entry for.</param>
            <param name="useFileSystem">If true get details from the file system if the file exists.</param>
            <returns>Returns a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">file entry</see> based on the <paramref name="fileName"/> passed.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IEntryFactory.MakeDirectoryEntry(System.String)">
            <summary>
            Create a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> for a directory given its name
            </summary>
            <param name="directoryName">The name of the directory to create an entry for.</param>
            <returns>Returns a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">directory entry</see> based on the <paramref name="directoryName"/> passed.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IEntryFactory.MakeDirectoryEntry(System.String,System.Boolean)">
            <summary>
            Create a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> for a directory given its name
            </summary>
            <param name="directoryName">The name of the directory to create an entry for.</param>
            <param name="useFileSystem">If true get details from the file system for this directory if it exists.</param>
            <returns>Returns a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">directory entry</see> based on the <paramref name="directoryName"/> passed.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.IEntryFactory.NameTransform">
            <summary>
            Get/set the <see cref="T:ICSharpCode.SharpZipLib.Core.INameTransform"></see> applicable.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.PathFilter">
            <summary>
            PathFilter filters directories and files using a form of <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see>
            by full path name.
            See <see cref="T:ICSharpCode.SharpZipLib.Core.NameFilter">NameFilter</see> for more detail on filtering.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.IScanFilter">
            <summary>
            Scanning filters support filtering of names.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.IScanFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it 'matches' the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name matches the filter, false if it does not match.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.PathFilter.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter"></see>.
            </summary>
            <param name="filter">The <see cref="T:ICSharpCode.SharpZipLib.Core.NameFilter">filter</see> expression to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.PathFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it matches the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>True if the name matches, false otherwise.</returns>
            <remarks><see cref="M:System.IO.Path.GetFullPath(System.String)"/> is used to get the full path before matching.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter">
            <summary>
            ExtendedPathFilter filters based on name, file size, and the last write time of the file.
            </summary>
            <remarks>Provides an example of how to customise filtering.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minDate">The minimum <see cref="T:System.DateTime"/> to include.</param>
            <param name="maxDate">The maximum <see cref="T:System.DateTime"/> to include.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.#ctor(System.String,System.Int64,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
            <param name="minDate">The minimum <see cref="T:System.DateTime"/> to include.</param>
            <param name="maxDate">The maximum <see cref="T:System.DateTime"/> to include.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.IsMatch(System.String)">
            <summary>
            Test a filename to see if it matches the filter.
            </summary>
            <param name="name">The filename to test.</param>
            <returns>True if the filter matches, false otherwise.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The <see paramref="fileName"/> doesnt exist</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MinSize">
            <summary>
            Get/set the minimum size/length for a file that will match this filter.
            </summary>
            <remarks>The default value is zero.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">value is less than zero; greater than <see cref="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MaxSize"/></exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MaxSize">
            <summary>
            Get/set the maximum size/length for a file that will match this filter.
            </summary>
            <remarks>The default value is <see cref="F:System.Int64.MaxValue"/></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">value is less than zero or less than <see cref="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MinSize"/></exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MinDate">
            <summary>
            Get/set the minimum <see cref="T:System.DateTime"/> value that will match for this filter.
            </summary>
            <remarks>Files with a LastWrite time less than this value are excluded by the filter.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MaxDate">
            <summary>
            Get/set the maximum <see cref="T:System.DateTime"/> value that will match for this filter.
            </summary>
            <remarks>Files with a LastWrite time greater than this value are excluded by the filter.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter">
            <summary>
            NameAndSizeFilter filters based on name and file size.
            </summary>
            <remarks>A sample showing how filters might be extended.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of NameAndSizeFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.IsMatch(System.String)">
            <summary>
            Test a filename to see if it matches the filter.
            </summary>
            <param name="name">The filename to test.</param>
            <returns>True if the filter matches, false otherwise.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.MinSize">
            <summary>
            Get/set the minimum size for a file that will match this filter.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.MaxSize">
            <summary>
            Get/set the maximum size for a file that will match this filter.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.INameTransform">
            <summary>
            INameTransform defines how file system names are transformed for use with archives, or vice versa.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.INameTransform.TransformFile(System.String)">
            <summary>
            Given a file name determine the transformed value.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed file name.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.INameTransform.TransformDirectory(System.String)">
            <summary>
            Given a directory name determine the transformed value.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed directory name</returns>
        </member>
        <member name="T:CADImport.Professional.EntitiesCreator">
            <summary>
            Contains a set of tools for visual creating of entities
            </summary>
        </member>
        <member name="M:CADImport.Professional.EntitiesCreator.OnGetRealPoint(System.Int32,System.Int32)">
            <summary>
            Invokes <see cref="E:CADImport.Professional.EntitiesCreator.GetRealPointEvent"/> event
            </summary>
            <param name="x">X axis position in display coordinates</param>
            <param name="y">Y axis position in display coordinates</param>
            <returns>Real coordinates of the point (drawing coordinates)</returns>
        </member>
        <member name="M:CADImport.Professional.EntitiesCreator.OnCreateNewCADImage">
            <summary>
            Invokes <see cref="E:CADImport.Professional.EntitiesCreator.CreateNewCADImageEvent"/> event
            </summary>
        </member>
        <member name="M:CADImport.Professional.EntitiesCreator.OnEndEntityDraw(System.Boolean)">
            <summary>
            Invokes <see cref="E:CADImport.Professional.EntitiesCreator.EndEntityDraw"/> event
            </summary>
            <param name="val">A value of the entity creation finishing</param>
        </member>
        <member name="M:CADImport.Professional.EntitiesCreator.#ctor(System.Windows.Forms.Control,System.Drawing.Color)">
            <summary>
            Creates an instance of <see cref="T:CADImport.Professional.EntitiesCreator">EntitiesCreator</see> class
            </summary>
            <param name="aParent">Parent control for which EntitiesCreator is created</param>
            <param name="aColor"></param>
        </member>
        <member name="M:CADImport.Professional.EntitiesCreator.EnableCreator(CADImport.Professional.CreatorType)">
            <summary>
            Enables <see cref="T:CADImport.Professional.EntitiesCreator"/> tool
            </summary>
            <param name="entityType"><see cref="T:CADImport.Professional.CreatorType">Entity type</see></param>
        </member>
        <member name="M:CADImport.Professional.EntitiesCreator.DrawNewEntityCreator">
            <summary>
            Draws <see cref="T:CADImport.Professional.EntitiesCreator"/> tool
            </summary>
        </member>
        <member name="M:CADImport.Professional.EntitiesCreator.Disable">
            <summary>
            Disables <see cref="T:CADImport.Professional.EntitiesCreator"/> tool
            </summary>
        </member>
        <member name="M:CADImport.Professional.EntitiesCreator.Dispose">
            <summary>
            A default <b>Dispose</b> method. 
            </summary>				
        </member>
        <member name="M:CADImport.Professional.EntitiesCreator.BeginEntity(System.Windows.Forms.MouseButtons,System.Int32,System.Int32)">
            <summary>
            Starts entity drawing
            </summary>
            <param name="bt">Pressed mouse button</param>
            <param name="x">X axis position</param>
            <param name="y">Y axis position</param>
        </member>
        <member name="M:CADImport.Professional.EntitiesCreator.EndEntity">
            <summary>
            Finishes entity drawing
            </summary>
        </member>
        <member name="M:CADImport.Professional.EntitiesCreator.EndDrawPolyline">
            <summary>
            Finishes <see cref="T:CADImport.CADPolyLine">Polyline</see> entity drawing
            </summary>
        </member>
        <member name="E:CADImport.Professional.EntitiesCreator.CreateNewCADImageEvent">
            <summary>
            Invokes on new <see cref="T:CADImport.CADImage"/> creating
            </summary>
        </member>
        <member name="E:CADImport.Professional.EntitiesCreator.EndEntityDraw">
            <summary>
            Invokes on finishing of the entity drawing
            </summary>
        </member>
        <member name="E:CADImport.Professional.EntitiesCreator.GetRealPointEvent">
            <summary>
            Invokes on getting of the real coordinates of the point
            </summary>
        </member>
        <member name="P:CADImport.Professional.EntitiesCreator.SolidHatch">
            <summary>
            Gets or sets a type (solid or not solid) of the <see cref="T:CADImport.CADHatch"/> object
            </summary>
        </member>
        <member name="P:CADImport.Professional.EntitiesCreator.HatchName">
            <summary>
            Gets or sets a name of <see cref="T:CADImport.CADHatch"/> object
            </summary>
        </member>
        <member name="P:CADImport.Professional.EntitiesCreator.ColorEntity">
            <summary>
            Gets or sets a color of the creating entity
            </summary>
        </member>
        <member name="P:CADImport.Professional.EntitiesCreator.TextHeight">
            <summary>
            Gets or sets height of <see cref="T:CADImport.CADText"/> object
            </summary>
        </member>
        <member name="P:CADImport.Professional.EntitiesCreator.TextRotation">
            <summary>
            Gets or sets rotation angle of <see cref="T:CADImport.CADText"/> object
            </summary>
        </member>
        <member name="P:CADImport.Professional.EntitiesCreator.ShowOptionsForm">
            <summary>
            Gets or sets a flag of editor settings form visibility
            </summary>
        </member>
        <member name="P:CADImport.Professional.EntitiesCreator.OptionsForm">
            <summary>
            Gets or sets instance of editor settings class
            </summary>
        </member>
        <member name="P:CADImport.Professional.EntitiesCreator.Image">
            <summary>
            Gets or sets <see cref="T:CADImport.CADImage">CADImage</see> object where new entities are added
            </summary>
        </member>
        <member name="P:CADImport.Professional.EntitiesCreator.EndPoly">
            <summary>
            Gets or sets end flag of the <see cref="T:CADImport.CADPolyLine">CADPolyLine</see> creating
            </summary>
        </member>
        <member name="P:CADImport.Professional.EntitiesCreator.Points">
            <summary>
            Gets or sets <see cref="T:System.Drawing.Point">points</see> of the creating object in display coordinates
            </summary>
        </member>
        <member name="P:CADImport.Professional.EntitiesCreator.RealPoints">
            <summary>
            Gets or sets <see cref="T:System.Drawing.Point">points</see> of the creating object in real (drawing) coordinates
            </summary>
        </member>
        <member name="P:CADImport.Professional.EntitiesCreator.Type">
            <summary>
            Gets or sets a <see cref="T:CADImport.Professional.CreatorType">type</see> of the creating object
            </summary>
        </member>
        <member name="P:CADImport.Professional.EntitiesCreator.Enabled">
            <summary>
            Gets a status of the EntitiesCreator object
            </summary>
        </member>
        <member name="T:CADImport.Professional.CreatorType">
            <summary>
            Types list of the creating entities
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.Undetected">
            <summary>
            Undetected
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.Solid">
            <summary>
            Solid
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.Line">
            <summary>
            Line
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.Rectangle">
            <summary>
            Rectangle
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.Circle">
            <summary>
            Circle
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.Ellipse">
            <summary>
            Ellipse
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.Arc">
            <summary>
            Arc
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.Polyline">
            <summary>
            PolyLine
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.Pen">
            <summary>
            Pen
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.Hatch">
            <summary>
            Hatch
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.Cloud">
            <summary>
            Cloud
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.MText">
            <summary>
            MText
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:CADImport.Professional.CreatorType.Insert">
            <summary>
            Insert
            </summary>
        </member>
        <member name="T:CADImport.Professional.CreateNewObjectEventHandler">
            <summary>
            Represents a set of methods which are invoked on new entity creating;
            The set is used for <see cref="T:CADImport.Professional.EntitiesCreator">CreateNewCADImageEvent</see> event
            </summary>
        </member>
        <member name="T:CADImport.Professional.GetRealPointEvent">
            <summary>
            Represents a set of methods for getting real (drawing) coordinates by display coordinates
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.Rect">
            <summary>
            Auxiliary structure of a rectangle
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.Rect.X1">
            <summary>
            X1 coordinate of a rectangle
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.Rect.X2">
            <summary>
            X2 coordinate of a rectangle
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.Rect.Y1">
            <summary>
            Y1 coordinate of a rectangle
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.Rect.Y2">
            <summary>
            Y2 coordinate of a rectangle
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.Rect"/> class with the specified location and size.</para>
            </summary>
            <param name="x1">
            The left coordinate of the rectangle.
            </param>
            <param name="y1">
            The top coordinate of the rectangle.
            </param>
            <param name="x2">
            The right coordinate the rectangle.
            </param>
            <param name="y2">
            The bottom coordinate of the rectangle.
            </param>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.Line">
            <summary>
            Auxiliary structure of a line
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.Line.x1">
            <summary>
            x1 coordinate
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.Line.y1">
            <summary>
            y1 coordinate
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.Line.x2">
            <summary>
            x2 coordinate
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.Line.y2">
            <summary>
            y2 coordinate
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.Line.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.Line"/> class with the specified location and size.</para>
            </summary>
            <param name="ax1">
            The left coordinate of the line.
            </param>
            <param name="ay1">
            The top coordinate of the line.
            </param>
            <param name="ax2">
            The right coordinate the line.
            </param>
            <param name="ay2">
            The bottom coordinate of the line.
            </param>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFPoint">
            <summary>
            Represents a 3D point in a DXF image.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFPoint.X">
            <summary>
            Coordinates of a 3D point in DXF image.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFPoint.Y">
            <summary>
            Coordinates of a 3D point in DXF image.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFPoint.Z">
            <summary>
            Coordinates of a 3D point in DXF image.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFPixel"/> class.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPoint.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFPixel"/> class with the specified values.
            </summary>
            <param name="x">The X coordinate</param>
            <param name="y">The Y coordinate</param>
            <param name="z">The Z coordinate</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPoint.#ctor(CADImport.Export.SimpleCADtoDXF.DXFPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFPixel"/> class that have field data copied from specified object.
            </summary>
            <param name="dxfP">DXFPoint object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPoint.Clone">
            <summary>
            Copies this object and returns a new object.
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.AutoCADVersion">
            <summary>
            Version types of AutoCAD.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.AutoCADVersion.R14">
            <summary>
            AutoCAD version 14.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.AutoCADVersion.R2000">
            <summary>
            AutoCAD version 2000.
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.HatchStyle">
            <summary>
            Type styles of a hatch
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.HatchStyle.Solid">
            <summary>
            ""
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.HatchStyle.PatternData">
            <summary>
            pattern style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.HatchStyle.Horizontal">
            <summary>
            "----------"
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.HatchStyle.Vertical">
            <summary>
            "||||||||||"
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.HatchStyle.FDiagonal">
            <summary>
            "//////////"
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.HatchStyle.BDiagonal">
            <summary>
            "\\\\\\\\\\"
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.HatchStyle.Cross">
            <summary>
            "+++++"
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.HatchStyle.DiagCross">
            <summary>
            "xxxxx"
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.HatchBoundaryType">
            <summary>
            Types for DXFHatch.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.HatchBoundaryType.PolyPolyline">
            <summary>
            Hatch as a polyline
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.HatchBoundaryType.Circle">
            <summary>
            Hatch as a circle
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.HatchBoundaryType.Ellipse">
            <summary>
            Hatch as an ellipse
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.ArcType">
            <summary>
            Types for DXFArc
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.ArcType.Circle">
            <summary>
            Cicle - arc has the form of a circle.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.ArcType.Ellipse">
            <summary>
            Ellipse - arc has the form of an ellipse.
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFIntConst">
            <summary>
            Types of DXF color.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_BYBLOCK">
            <summary>
            ByBlock
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_RED">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_YELLOW">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_LIME">
            <summary>
            Lime
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_AQUA">
            <summary>
            Aqua
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_BLUE">
            <summary>
            Blue
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_FUCHSIA">
            <summary>
            Fuchsia
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_BLACK">
            <summary>
            Black
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_GRAY">
            <summary>
            Gray
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_SILVER">
            <summary>
            Silver
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_OLIVE">
            <summary>
            Olive
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_GREEN">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_TEAL">
            <summary>
            Teal
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_NAVY">
            <summary>
            Navy
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_PURPLE">
            <summary>
            Purple
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_MAROON">
            <summary>
            Maroon
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_WHITE">
            <summary>
            White
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_BYLAYER">
            <summary>
            ByLayer
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_ALTERNATIVEBLACK">
            <summary>
            AlternativeBlack
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_DKGRAY">
            <summary>
            Dark gray
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFIntConst.DXF_LTGRAY">
            <summary>
            Light gray
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFHatchPatternData">
            <summary>
            Represents the hatch pattern data 
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFHatchPatternData.angle">
            <summary>
            Represents an angle
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFHatchPatternData.basePointX">
            <summary>
            Represents the X and Y coordinates of the base point of a hatch.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFHatchPatternData.basePointY">
            <summary>
            Represents the X and Y coordinates of the base point of a hatch.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFHatchPatternData.offsetX">
            <summary>
            Represents the offsets on X and Y axes.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFHatchPatternData.offsetY">
            <summary>
            Represents the offsets on X and Y axes.
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFData">
            <summary>
            The DXFData class can contain information about any DXF entity. 
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.tag">
             <summary>
            Specifies the type of a DXF entity.
            </summary>
            <remarks>
            <p>DXF_UNKNOWN		=  0;</p>
            <p>DXF_TABLE			= 	1;</p>
            <p>DXF_BLOCK			= 	2;</p>
            <p>DXF_LTYPE			= 	3;</p>
            <p>DXF_LAYER			= 	4;</p>
            <p>DXF_VERTEX		= 	5;</p>
            <p>DXF_LINE			= 	6;</p>
            <p>DXF_SOLID			= 	7;</p>
            <p>DXF_CIRCLE		= 	8;</p>
            <p>DXF_ARC			= 	9;</p>
            <p>DXF_POLYLINE		= 	10;</p>
            <p>DXF_LWPOLYLINE	= 	11;</p>
            <p>DXF_SPLINE		= 	12;</p>
            <p>DXF_INSERT		= 	13;</p>
            <p>DXF_DIMENSION		= 	14;</p>
            <p>DXF_TEXT			= 	15;</p>
            <p>DXF_MTEXT			= 	16;</p>
            <p>DXF_ATTDEF		= 	17;</p>
            <p>DXF_ELLIPSE		= 	18;</p>
            <p>DXF_POINT			= 	19;</p>
            <p>DXF_3DFACE		= 	20;</p>
            </remarks>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.count">
            <summary>
            Represents the number of child entities (for BLOCK, POLYLINE etc). For simple entities such as LINE it is always 0.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.flags">
            <summary>
            Represents the flags byte for different entities, such as LAYER, BLOCK, POLYLINE etc. 
            Has individual meaning for each entity type. For details see AutoCAD DXF Reference.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.style">
            <summary>
            Specifies the pen style for drawing of this entity.
            </summary>
            <remarks>		
            <p><b>Value					Meaning</b></p>
            <p>PS_SOLID			-		Pen is solid.</p>
            <p>PS_DASH			-		Pen is dashed.</p>
            <p>PS_DOT			-		Pen is dotted.</p>
            <p>PS_DASHDOT		-		Pen has alternating dashes and dots.</p>
            <p>PS_DASHDOTDOT	-		Pen has dashes and double dots.</p>
            </remarks>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.selfType">
            <summary>
            Defines a type of this entity.
            </summary>		
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.color">
            <summary>
            Represents the color value for this entity.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.thickness">
            <summary>
            Specifies the line width for this entity.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.rotation">
            <summary>
            Specifies the rotation angle in degrees for TEXT or INSERT.
            </summary>	
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.text">
            <summary>
            Specifies a text value for text entities (TEXT, MTEXT or ATTDEF).
            </summary>			
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.point">
            <summary>
            Specifies the reference point for this entity. 
            For details see AutoCAD DXF Reference, group codes 10,20,30.
            </summary>		
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.point1">
            <summary>
            Specifies the second reference point for such entities as LINE, TEXT or ELLIPSE. 
            For details see AutoCAD DXF Reference, group codes 11,21,31.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.point2">
            <summary>
            Specifies the third points for SOLID and 3DFACE.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.point3">
            <summary>
            Specifies the fourth points for SOLID and 3DFACE.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.radius">
            <summary>
            Specifies the radius value for CIRCLE and ARC or ratio of minor axis to major axis for ELLIPSE.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.startAngle">
            <summary>
            Specifies the start angle values in degrees for ARC and ELLIPSE.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.endAngle">
            <summary>
             Represents the end angle values in degrees for ARC and ELLIPSE.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.scale">
            <summary>
            Specifies the X-, Y- and Z-scale values for INSERT.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.hAlign">
            <summary>
            Specifies the horizontal alignment for text entities.
            </summary>
            <remarks>
            0 = Left; 1 = Center; 2 = Right.
            </remarks>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.vAlign">
            <summary>
             Specifies the vertical alignment for text entities.
            </summary>
            <remarks>
            0 = Baseline; 1 = Bottom; 2 = Middle; 3 = Top.
            </remarks>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.rWidth">
            <summary>
            Specifies the reference retangle width for MTEXT.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.rHeight">
            <summary>
            Specifies the reference retangle height for MTEXT.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.height">
            <summary>
            Specifies the character height for text entities (TEXT, MTEXT or ATTDEF).
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.fScale">
            <summary>
            Represents the relative X scale factor (ratio of character width to character height) for text entities.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.points">
            <summary>
            Points to array of DXFPOINT for POLYLINE, LWPOLYLINE and HATCH. 
            The number of points is specified by count.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.bold">
            <summary>
            Represents a style for a text.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.italic">
            <summary>
            Represents a style for a text.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.name">
            <summary>
            Represents a name of an object.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.globalWidth">
            <summary>
            Represents a global width.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFData.styleObject">
            <summary>
            Represents an object style.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFData.Clone">
            <summary>
            <para>Creates a shallow copy of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFData"/>.</para>
            </summary>
            <returns>
            <para>A shallow copy of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFData"/>.</para>
            </returns>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFData.Clear">
            <summary>
            Resets all initial values for this object.
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFFigure">
            <summary>
            This is a base class of figures.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFFigure.data">
            <summary>
            Represents all data (DXFData) of a figure. 
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFFigure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFFigure"/> object.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFFigure.#ctor(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Initializes a new instance of the DXFFigure object that have field data copied from specified object.
            </summary>
            <param name="dt">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFFigure.ParseToLines(System.Collections.ArrayList)">
            <summary>
            Performs figure approximation by linear segments.
            </summary>
            <param name="NewElemes">An array of points that will receive approximation results.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFFigure.ExportBlockAsDXF(CADImport.Export.SimpleCADtoDXF.DXFExport)">
            <summary>
            Virtual function. For redifinition in descendant classes.
            </summary>
            <param name="ADXFExport">DXFExport object.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFFigure.ExportAsDXF(CADImport.Export.SimpleCADtoDXF.DXFExport)">
            <summary>
            Virtual function. For redifinition in descendant classes.
            </summary>
            <param name="ADXFExport">DXFExport object.</param>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFFigure.Layer">
            <summary>
            Gets or sets the current layer for this figure.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFFigure.Color">
            <summary>
            Gets or sets a color for this figure.
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFExport">
            <summary>
            This is a basic class of export. All methods for formation of a dxf file are determined here.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFExport.DXFLineWeights">
            <summary>
            The array of the line weight constants.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFExport.autoCADVer">
            <summary>
            Represents the current AutoCAD version.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFExport.current">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFExport.use01MM">
            <summary>
            Use of factor of scaling.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFExport.isParseWhite">
            <summary>
            Specifies if white rectangle object will be used as erasing region.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFExport.fOffset">
            <summary>
            Represents an offset for hatch object.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFExport.alternativeBlack">
            <summary>
            Specifies if the alternative black color will be used.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFExport.offsetX">
            <summary>
            Represents offsets on axis x and on axis y.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFExport.offsetY">
            <summary>
            Represents offsets on axis x and on axis y.
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DXFExport.accuracy">
            <summary>
            The maximal accuracy. Default = 0.000001.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddName(System.String,System.String)">
            <summary>
            Adds a name of an object
            </summary>
            <param name="aName">A name</param>
            <param name="aSub">A sub name</param>
            <returns>result</returns>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddInt(System.Int32,System.Int32)">
            <summary>
            Adds an integer value.
            </summary>
            <param name="code">A code</param>
            <param name="Value">The integer value to add.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddHandle">
            <summary>
            Adds a handle.
            </summary>
            <returns>The handle to add.</returns>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddFloat(System.Int32,System.Single)">
            <summary>
            Adds a float value.
            </summary>
            <param name="code">A code</param>
            <param name="Value">The float value to add.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddString(System.Int32,System.String)">
            <summary>
            Adds a string.
            </summary>
            <param name="code">A code</param>
            <param name="str">The string to add.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.Add3DPoint(System.Int32,CADImport.Export.SimpleCADtoDXF.DXFPoint)">
            <summary>
            Adds a 3D point.
            </summary>
            <param name="code">A code </param>
            <param name="p">The 3D point to add.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddPoint(System.Int32,CADImport.Export.SimpleCADtoDXF.DXFPoint)">
            <summary>
            Adds a point.
            </summary>
            <param name="code">A code</param>
            <param name="P">The point to add.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddVertex(CADImport.Export.SimpleCADtoDXF.DXFPoint)">
            <summary>
            Adds a vertex.
            </summary>
            <param name="P">The point of a vertex.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddColor(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Adds a color.
            </summary>
            <param name="Data">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddLTypeScale">
            <summary>
            Adds a linetype scale.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddThickness(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Adds thickness
            </summary>
            <param name="Data">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.BeginPoly(CADImport.Export.SimpleCADtoDXF.DXFData,System.Int32)">
            <summary>
            Begins a polyline
            </summary>
            <param name="Data">DXFData object</param>
            <param name="aCount">A count.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.GetStrAutoCADVer">
            <summary>
            Gets the AutoCAD version
            </summary>
            <returns>The AutoCAD version</returns>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFExport"/> class with defaults parameters.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.GetBlockByName(System.String)">
            <summary>
            Gets DXF block by its name
            </summary>
            <param name="AName">A name of a block.</param>
            <returns>The DXF block.</returns>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddPixel(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Adds a pixel.
            </summary>
            <param name="Data">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddLine(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Adds a line.
            </summary>
            <param name="Data">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddRectangle(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Adds a rectangle.
            </summary>
            <param name="Data">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddPolyLine(CADImport.Export.SimpleCADtoDXF.DXFData,System.Int32)">
            <summary>
            Adds a polyline.
            </summary>
            <param name="Data">DXFData object</param>
            <param name="aIndex">An index</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddPolyBezier(CADImport.Export.SimpleCADtoDXF.DXFData,System.Int32)">
            <summary>
            Adds the polyBezier line
            </summary>
            <param name="Data">DXFData object</param>
            <param name="aIndex">An index</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddCircle(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Adds a circle.
            </summary>
            <param name="Data">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddArc(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Adds an arc.
            </summary>
            <param name="Data">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddEllipse(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Adds an ellipse.
            </summary>
            <param name="Data">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddHatch(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Adds a hatch.
            </summary>
            <param name="Data">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddText(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Adds a text.
            </summary>
            <param name="Data">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddMText(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Adds a Mtext.
            </summary>
            <param name="Data">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddSolid(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Adds a solid.
            </summary>
            <param name="Data">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.Insert(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Inserts an object
            </summary>
            <param name="aData">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.BeginBlock(System.String)">
            <summary>
            Begins a DXF block
            </summary>
            <param name="aName">A block name.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.EndBlock">
            <summary>
            Ends a DXF block
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.EndDraw">
            <summary>
            Ends a draw
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddLType(System.String,System.Single[])">
            <summary>
            Adds a linetype.
            </summary>
            <param name="aName">A linetype name</param>
            <param name="aParts">Linetype parts</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.Clear">
            <summary>
            Clears the DXFExport object
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.SaveToFile(System.String)">
            <summary>
            Saves DXF to file
            </summary>
            <param name="fileName">A file name</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.Save">
            <summary>
            Saves the DXF image 
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.SaveToStream(System.IO.StringWriter)">
            <summary>
            Saves DXF to stream.
            </summary>
            <param name="St">StringWriter object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.SetLayerByString(System.String)">
            <summary>
            Sets layer by its name.
            </summary>
            <param name="aName">A layer name.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.ColorToDXF(System.Drawing.Color)">
            <summary>
            Converts System.Drawing.Color object to the dxf color
            </summary>
            <param name="Value">System.Drawing.Color object</param>
            <returns>The DXF color</returns>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddDimensionStyle(System.String,CADImport.Export.SimpleCADtoDXF.DimensionStyle)">
            <summary>
            Adds a dimension style.
            </summary>
            <param name="appName">A name of the dimension style</param>
            <param name="aDimStyle">The dimension style object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddDimension(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Adds a dimension
            </summary>
            <param name="aData">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFExport.AddEntity(CADImport.Export.SimpleCADtoDXF.DXFFigure)">
            <summary>
            Adds an entity.
            </summary>
            <param name="aEntity">An entity to add</param>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFExport.PenWidthRatio">
            <summary>
            Gets or sets the current pen width ratio.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFExport.CurrentLayer">
            <summary>
            Gets or sets the current DXF layer.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFExport.Block">
            <summary>
            Gets or sets the current block.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFExport.UnitSize">
            <summary>
            Gets or sets unit size for export.
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFLine">
            <summary>
            Represents a line in a DXF image.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFLine.Clone">
            <summary>
            Copies this object and returns the new object.
            </summary>
            <returns>The new line object</returns>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFLine"/> class.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFLine.#ctor(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFLine"/> class that have field data copied from specified object.
            </summary>
            <param name="aData">DXFLine object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFLine.ExportAsDXF(CADImport.Export.SimpleCADtoDXF.DXFExport)">
            <summary>
            Adds a line to the DXFExport figures collection.
            </summary>
            <param name="ADXFExport">DXFExport object.</param>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFLine.StartPoint">
            <summary>
            Gets or sets the start point of a line object
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFLine.EndPoint">
            <summary>
            Gets or sets the end point of a line object
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFPixel">
            <summary>
            Represents a pixel in a DXF image. 
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPixel.ExportAsDXF(CADImport.Export.SimpleCADtoDXF.DXFExport)">
            <summary>
            Adds a pixel to the DXFExport figures collection.
            </summary>
            <param name="ADXFExport">DXFExport object.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPixel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFPixel"/> class.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPixel.#ctor(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFPixel"/> class that have field data copied from specified object.
            </summary>
            <param name="aData">DXFData object</param>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFPixel.Point">
            <summary>
            Gets or sets coordinates of the dxf pixel.
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFText">
            <summary>
            Represents a text in a DXF image. 
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFText.ExportAsDXF(CADImport.Export.SimpleCADtoDXF.DXFExport)">
            <summary>
            Adds a text to the DXFExport figures collection.
            </summary>
            <param name="ADXFExport">DXFExport object.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFText"/> class.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFText.#ctor(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFText"/> class that have field data copied from the specified object.
            </summary>
            <param name="aData">DXFData object</param>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFSolid">
            <summary>
            Represents a solid in a DXF image. 
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFSolid.ExportAsDXF(CADImport.Export.SimpleCADtoDXF.DXFExport)">
            <summary>
            Adds a solid to the DXFExport figures collection.
            </summary>
            <param name="ADXFExport"> DXFExport object.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFSolid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFSolid"/> class.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFSolid.#ctor(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFSolid"/> class that have field data copied from the specified object.
            </summary>
            <param name="aData">DXFData object</param>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFMText">
            <summary>
            DXF metric text class. 
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFMText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFMText"/> class.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFMText.#ctor(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFMText"/> class that have field data copied from specified object.
            </summary>
            <param name="aData">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFMText.ExportAsDXF(CADImport.Export.SimpleCADtoDXF.DXFExport)">
            <summary>
            Adds a mtext to DXFExport figures collection.
            </summary>
            <param name="ADXFExport">DXFExport object.</param>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFMText.Text">
            <summary>
            Gets or sets text contents of DXFMText object.
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFLayer">
            <summary>
            Represents a layer in a DXF image. 
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFLayer.Clone">
            <summary>
            Copies this object and returns the new object.
            </summary>
            <returns>The new layer object</returns>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFLayer"/> class.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFLayer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFLayer"/> class with specified name and defaults parameters.
            </summary>
            <param name="aName">Name of layer</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFLayer.ExportAsDXF(CADImport.Export.SimpleCADtoDXF.DXFExport)">
            <summary>
            Adds a layer to the DXFExport figures collection.
            </summary>
            <param name="ADXFExport">DXFExport object.</param>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFLayer.Handle">
            <summary>
            Gets or sets a handle of a layer.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFLayer.PlottingFlag">
            <summary>
            Gets or sets flag for plotting.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFLayer.Name">
            <summary>
            Gets or sets a name of a layer.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFLayer.LineWeight">
            <summary>
            Gets or sets a line thickness for this layer.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFLayer.LinetypeName">
            <summary>
            Gets or sets a name of a line type for this layer.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFLayer.HardPointer">
            <summary>
            Gets or sets HardPointer ID/handle
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFLayer.Flags">
            <summary>
            Gets or sets a byte that contains flags for the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFLayer">DXFLayer</see> object.
            </summary>
            <remarks>bit-coded values:</remarks>
            <remarks>1 = Layer is frozen; otherwise layer is thawed
            2 = Layer is frozen by default in new viewports
            4 = Layer is locked
            16 = If set, table entry is externally dependent on an xref
            32 = If both this bit and bit 16 are set, the externally dependent xref has been successfully resolved
            64 = If set, the table entry was referenced by at least one entity in the drawing the last time the
            drawing was edited. (This flag can be ignored by most programs that read DXF files and need not be set by programs that write DXF files)
            </remarks>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFLayer.DXFColor">
            <summary>
            Gets or sets a color of a layer.
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFArc">
            <summary>
            Represents an arc in a DXF image.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFArc.ExportAsDXF(CADImport.Export.SimpleCADtoDXF.DXFExport)">
            <summary>
            Adds an arc to the DXFExport figures collection.
            </summary>
            <param name="ADXFExport">DXFExport object.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFArc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFArc"/> class.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFArc.#ctor(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFArc"/> class that have field data copied from specified object.
            </summary>
            <param name="aData">DXFData object</param>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFArc.Point">
            <summary>
            Gets or sets coordinates of the center point of an arc.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFArc.Radius">
            <summary>
            Gets or sets the radius of an arc.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFArc.StartAngle">
            <summary>
            Represents the start angle of an arc.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFArc.EndAngle">
            <summary>
            Represents the end angle of an arc.
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFPolyline">
            <summary>
            Represents a polyline in a DXF image. 
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPolyline.Clear">
            <summary>
            Clears the polyline points collection.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPolyline.BeginPolygonFromRect">
            <summary>
            The beginning of filling of a collection of points.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPolyline.EndPolygonFromRect">
            <summary>
            The ending of filling of a collection of points.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPolyline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFPolyBezier"/> class.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPolyline.#ctor(CADImport.Export.SimpleCADtoDXF.DXFData,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFPolyBezier"/> class that have field data copied from specified object.
            </summary>
            <param name="aData">DXFData object</param>
            <param name="aIndex">Data index</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPolyline.ExportAsDXF(CADImport.Export.SimpleCADtoDXF.DXFExport)">
            <summary>
            Adds a polyline to the DXFExport figures collection.
            </summary>
            <param name="ADXFExport">DXFExport object.</param>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFPolyline.Points">
            <summary>
            Gets or sets a collection of the polyline points.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFPolyline.PointCount">
            <summary>
            Gets a number of polyline points.
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFRectangle">
            <summary>
            Represents a Rectangle in a DXF image. 
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFRectangle.ExportAsDXF(CADImport.Export.SimpleCADtoDXF.DXFExport)">
            <summary>
            Adds a figure to the DXFExport figures collection.
            </summary>
            <param name="ADXFExport">DXFExport object.</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFRectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFRectangle"/> class.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFRectangle.#ctor(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFRectangle"/> class that have field data copied from the specified object.
            </summary>
            <param name="aData">DXFData object</param>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFRectangle.LeftTop">
            <summary>
            Gets or sets coordinates of the left top point of a rectangle.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFRectangle.RightBottom">
            <summary>
            Gets or sets coordinates of the right bottom point of a rectangle.
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFEllipse">
            <summary>
            Represents an ellipse in a DXF image. 
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFEllipse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFEllipse"/> class.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFEllipse.#ctor(CADImport.Export.SimpleCADtoDXF.DXFData,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFEllipse"/> class that have field data copied from the specified object.
            </summary>
            <param name="aData">The <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFData"/> object</param>
            <param name="aEllipse">Specifies if entity is an ellipse</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFEllipse.ExportAsDXF(CADImport.Export.SimpleCADtoDXF.DXFExport)">
            <summary>
            Adds an ellipse to DXFExport figures collection.
            </summary>
            <param name="ADXFExport">DXFExport object</param>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFEllipse.LeftTop">
            <summary>
            Gets coordinates of the left top point of an ellipse.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFEllipse.RightBottom">
            <summary>
            Gets coordinates of the right bottom point of an ellipse.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFEllipse.PCenter">
            <summary>
            Gets or sets coordinates of the center point of an ellipse.
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFPolyBezier">
            <summary>
            Represents the polybezier line in a DXF image. 
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPolyBezier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFPolyBezier"/> class.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPolyBezier.#ctor(CADImport.Export.SimpleCADtoDXF.DXFData,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFPolyBezier"/> class that have field data copied from specified object.
            </summary>
            <param name="aData">DXFData object</param>
            <param name="aIndex">index</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFPolyBezier.ExportAsDXF(CADImport.Export.SimpleCADtoDXF.DXFExport)">
            <summary>
            Adds a polybezier line to the DXFExport figures collection.
            </summary>
            <param name="ADXFExport">DXFExport object</param>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFHatch">
            <summary>
            Represents a hatch in a DXF image. 
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFHatch.SetStyle(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Set hatch style
            </summary>
            <param name="Data">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFHatch.GetPoint(System.Int32,System.Int32)">
            <summary>
            Returns the specified point from the specified collection of points of a hatch.
            </summary>
            <param name="bndIndex">An index of a points collection.</param>
            <param name="aIndex">An index of a point.</param>
            <returns>A point</returns>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFHatch.GetPointsNumber(System.Int32)">
            <summary>
            Returns a count of points of a hatch in the specified number of a collection.
            </summary>
            <param name="bndIndex">An index of a points collection.</param>
            <returns>A number of points</returns>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFHatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFHatch"/> class.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFHatch.#ctor(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFHatch"/> class that have field data copied from specified object.
            </summary>
            <param name="aData">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFHatch.ExportAsDXF(CADImport.Export.SimpleCADtoDXF.DXFExport)">
            <summary>
            Adds a hatch to the DXFExport figures collection.
            </summary>
            <param name="ADXFExport">DXFExport object.</param>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFHatch.Style">
            <summary>
            Gets a types style of a hatch.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFHatch.BndAmount">
            <summary>
            Gets the boundaries count of a hatch.
            </summary>
        </member>
        <member name="P:CADImport.Export.SimpleCADtoDXF.DXFHatch.PatternName">
            <summary>
            Gets or sets a name of a pattern object.
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DimensionType">
            <summary>
            A type of dimension
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionType.Rotated">
            <summary>
            Rotated type
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionType.Aligned">
            <summary>
            Aligned type
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionType.Angular">
            <summary>
            Angular type
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionType.Diameter">
            <summary>
            Diameter type
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionType.Radius">
            <summary>
            Radius type
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionType.Angular3Point">
            <summary>
            Angular3Point type
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionType.Ordinate">
            <summary>
            Ordinate type
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DimensionArrowType">
            <summary>
            Type of the dimension arrow
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.ClosedFilled">
            <summary>
            ClosedFilled style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.ClosedBlank">
            <summary>
            ClosedBlank style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.Closed">
            <summary>
            Closed style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.Dot">
            <summary>
            Dot style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.ArchitecturalTick">
            <summary>
            Architectural tick style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.Oblique">
            <summary>
            Oblique style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.Open">
            <summary>
            Open style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.Origin">
            <summary>
            Origin style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.Origin2">
            <summary>
            Origin2 style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.RightAngle">
            <summary>
            Right angle style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.Open30">
            <summary>
            Open30 style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.DotSmall">
            <summary>
            DotSmall style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.DotBlank">
            <summary>
            DotBlank style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.DotSmallBlank">
            <summary>
            DotSmallBlank style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.Box">
            <summary>
            Box style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.BoxFilled">
            <summary>
            BoxFilled style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.DatumTriangle">
            <summary>
            DatumTriangle style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.Integral">
            <summary>
            Integral style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.UserArrow">
            <summary>
            UserArrow style
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionArrowType.None">
            <summary>
            None style
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DimensionStyle">
            <summary>
            A style of dimension
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionStyle.arrow1">
            <summary>
            Arrow1 type
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionStyle.arrow2">
            <summary>
            Arrow2 type
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionStyle.arrowBlock1">
            <summary>
            Arrow1 block
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionStyle.arrowBlock2">
            <summary>
            Arrow2 block
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionStyle.arrowSize">
            <summary>
            Arrow size
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionStyle.extLineExt">
            <summary>
            Extension line extension
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionStyle.extLineOffset">
            <summary>
            Extension line offset
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionStyle.textHeight">
            <summary>
            Text height
            </summary>
        </member>
        <member name="F:CADImport.Export.SimpleCADtoDXF.DimensionStyle.textOffset">
            <summary>
            Text offset
            </summary>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFDimension">
            <summary>
            Represents dimensions in a DXF image.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFDimension.#ctor(CADImport.Export.SimpleCADtoDXF.DXFData)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFDimension"/> class that have field data copied from specified object.
            </summary>
            <param name="aData">DXFData object</param>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFDimension.ExportAsDXF(CADImport.Export.SimpleCADtoDXF.DXFExport)">
            <summary>
            Adds a figure to DXFExport figures collection.
            </summary>
            <param name="ADXFExport">A DXFExport object.</param>
        </member>
        <member name="T:CADImport.Export.SimpleCADtoDXF.DXFBlock">
            <summary>
            Represents the block entity in a DXF image.
            </summary>
        </member>
        <member name="M:CADImport.Export.SimpleCADtoDXF.DXFBlock.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFBlock"/> class.
            </summary>
            <param name="aName">A block name</param>
            <param name="aBlockRecordHandle">A block handle</param>
        </member>
        <member name="T:CADImport.CGM.CGMProgressEvent">
            <summary>
            Represents methods invoked while loading the file.
            </summary>
        </member>
        <member name="T:CADImport.CGM.CGMImage">
            <summary>
            Represents a CGM drawing and provides methods for drawing all loaded CAD objects.
            </summary>
        </member>
        <member name="F:CADImport.CGM.CGMImage.progress">
            <summary>
            A <see cref="T:CADImport.CGM.CGMProgressEvent">CGMProgressEvent</see> object representing the methods invoked while loading the file.
            </summary>
        </member>
        <member name="M:CADImport.CGM.CGMImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CGM.CGMImage">CGMImage</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CGM.CGMImage.Dispose">
            <summary>
            Releases the resources used by this <see cref="T:CADImport.CGM.CGMImage">CGMImage</see> object.
            </summary>
        </member>
        <member name="M:CADImport.CGM.CGMImage.LoadFromFile(System.String)">
            <summary>
            Loads a CGM image stored in the specified file. 
            </summary>
            <param name="path">A path to the file that contains a CGM image to be loaded.</param>
        </member>
        <member name="M:CADImport.CGM.CGMImage.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads a CGM image stored in the specified stream. 
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream">Stream</see> that contains a CGM image to be loaded.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.GetSymbol(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Crc32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "value">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            the number of data bytes to add.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "value">
            the byte is taken as the lower 8 bits of value
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            The number of data bytes to update the CRC with.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:CADImport.CADImportForms.SHXForm">
            <summary>
            Represents a form for SHX fonts dialog.
            </summary>
        </member>
        <member name="F:CADImport.CADImportForms.SHXForm.lstPath">
            <summary>
            A <see cref="T:System.Collections.SortedList">SortedList</see> that contains a list of paths to the SHX files.
            </summary>
            <remarks>This field is used for checking if the path that will be added is not already in the list of paths to the SHX files.</remarks>
        </member>
        <member name="M:CADImport.CADImportForms.SHXForm.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CADImport.CADImportForms.SHXForm"/> class.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.SHXForm.AddPath(System.String)">
            <summary>
            Adds a specified path to the list of the paths to SHX files.
            </summary>
            <param name="val">A <b>string</b> containing a path to the SHX file to be added.</param>
        </member>
        <member name="M:CADImport.CADImportForms.SHXForm.AddDefaultSHXPaths">
            <summary>
            Adds default paths to the SHX files on the <see cref="T:CADImport.CADImportForms.SHXForm">SHXForm</see>.
            </summary>
        </member>
        <member name="F:CADImport.CADImportForms.SHXForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.SHXForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CADImport.CADImportForms.SHXForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CADImport.CADImportForms.SHXForm.lstDir">
            <summary>
            A list of directories containing SHX fonts
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.SHXForm.SHXPaths">
            <summary>
            Gets paths to the SHX files.
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.SHXForm.MultipleLanguagesPath">
            <summary>
            Gets or sets a path to the language files directory
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.SHXForm.LngFileName">
            <summary>
            Gets or sets a name of the language file
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.SHXForm.NeedReopen">
            <summary>
            Gets or sets a value indicating whether reloading of the current file is required after adding new paths to SHX files.
            </summary>
            <value><b>true</b> if reloading of the current file is required; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:CADImport.HPGL2.HPGLImage">
            <summary>
            Represents HPGL image.
            </summary>
        </member>
        <member name="M:CADImport.HPGL2.HPGLImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.HPGL2.HPGLImage">HPGLImage</see> class.
            </summary>
        </member>
        <member name="M:CADImport.HPGL2.HPGLImage.LoadFromFile(System.String)">
            <summary>
            Loads the HPGL image stored in the specified file. 
            </summary>
            <param name="path">A path to the file that contains an HPGL image to be loaded.</param>
        </member>
        <member name="M:CADImport.HPGL2.HPGLImage.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads the HPGL image stored in the specified stream. 
            </summary>
            <param name="str">A <see cref="T:System.IO.Stream">Stream</see> that contains HPGL image to be loaded.</param>
        </member>
        <member name="M:CADImport.HPGL2.HPGLImage.CreateConverter">
            <summary>
            Creates a <see cref="T:CADImport.CADConverter">CADConverter</see> for loading the HPGL file. 
            </summary>
        </member>
        <member name="M:CADImport.HPGL2.HPGLImage.GetLineScale">
            <summary>
            Returns a line width scale used in this <see cref="T:CADImport.HPGL2.HPGLImage">HPGLImage</see>.
            </summary>
        </member>
        <member name="T:CADImport.RasterImage.CADRasterImage">
            <summary>
            Represents a raster image.
            </summary>
            <remarks>A <b>CADRasterImage</b> class provides methods for drawing raster images in the viewer.</remarks>
        </member>
        <member name="M:CADImport.RasterImage.CADRasterImage.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.RasterImage.CADRasterImage">CADRasterImage</see> class.
            </summary>
            <param name="parentControl">A <see cref="T:System.Windows.Forms.Control">Control</see> that is redrawn to receive an animated GIF image.</param>
        </member>
        <member name="M:CADImport.RasterImage.CADRasterImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.RasterImage.CADRasterImage">CADRasterImage</see> class.
            </summary>
        </member>
        <member name="M:CADImport.RasterImage.CADRasterImage.LoadFromFile(System.String)">
            <summary>
            Loads a raster image from the specified file.
            </summary>
            <param name="path">A <b>string</b> containing a path to the file where 
            the raster image is loaded from.</param>
        </member>
        <member name="M:CADImport.RasterImage.CADRasterImage.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads a CAD image stored in the specified stream. 
            </summary>
            <param name="str">A <see cref="T:System.IO.Stream">Stream</see> that contains a CAD image to be loaded.</param>
        </member>
        <member name="M:CADImport.RasterImage.CADRasterImage.LoadFromImage(System.Drawing.Image)">
            <summary>
            Loads CADRasterImage from <see cref="T:System.Drawing.Image"/>System.Drawing.Image
            </summary>
            <param name="img">Loading <see cref="T:System.Drawing.Image"/>image</param>
        </member>
        <member name="M:CADImport.RasterImage.CADRasterImage.LoadFromStream(System.IO.Stream,System.String)">
            <summary>
            Loads a CAD image stored in the specified stream. 
            </summary>
            <param name="str">A <see cref="T:System.IO.Stream">Stream</see> that contains a CAD image to be loaded.</param>
            <param name="ext">File extension</param>
        </member>
        <member name="M:CADImport.RasterImage.CADRasterImage.LoadMetafile(System.Drawing.Imaging.Metafile)">
            <summary>
            Load metafile
            </summary>
            <param name="meta">Metafile data</param>
        </member>
        <member name="P:CADImport.RasterImage.CADRasterImage.Control">
            <summary>
            Gets or sets <see cref="T:System.Windows.Forms.Control">control element</see> 
            required for gif images animation
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.s3DStates">
            <summary>
            Specifies cursors for the 3D Orbit tool. 
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.s3DStates.X">
            <summary>
            A cursor looks as a vertical ellipse around a small sphere when it hovers over one of 
            the smaller circles on the top or bottom of the 3D Orbit tool. Clicking and dragging from 
            either of these points rotates the CAD image around the horizontal or X axis that extends 
            through the center of the 3D Orbit tool. 
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.s3DStates.Y">
            <summary>
            A cursor looks as a horisontal ellipse around a small sphere when it hovers over one of 
            the smaller circles on the left or right sides of the 3D Orbit tool. Clicking and dragging from 
            either of these points rotates the CAD image around the vertical or Y axis that extends 
            through the center of the 3D Orbit tool. 
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.s3DStates.Z">
            <summary>
            A cursor looks as a circular arrow around a small sphere when it moves outside the arcball
            of the 3D Orbit tool. Clicking outside the arcball and dragging the cursor around the arcball 
            moves the CAD image around the Z axis that extends through the center of the 3D Orbit tool, 
            perpendicular to the screen.  
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.s3DStates.XY">
            <summary>
            A cursor looks as a small sphere encircled by two lines when it is positioned over the arcball 
            of the 3D Orbit tool. Clicking inside the arcball and dragging the cursor rotates the CAD image 
            around X axis, or Y axis, or X and Y axes simultaneously depending on the direction the cursor moves.
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.Axes">
            <summary>
            Specifies coordinate axes in the orthogonal coordinate system. 
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.Axes.X">
            <summary>
            Axis X.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.Axes.Y">
            <summary>
            Axis Y.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.Axes.Z">
            <summary>
            Axis Z.
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.ConvSection">
            <summary>
            Specifies a type of section in a CAD file.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.ConvSection.Tables">
            <summary>
            A CAD section in which data stored in a table.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.ConvSection.Blocks">
            <summary>
            A CAD section that contains data about CAD blocks.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.ConvSection.Entities">
            <summary>
            A CAD section that contains data about CAD entities.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.ConvSection.LTypes">
            <summary>
            A CAD section that contains data about linetypes used in a CAD drawing.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.ConvSection.Layers">
            <summary>
            A CAD section that contains data about layers in a CAD drawing.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.ConvSection.Styles">
            <summary>
            A CAD section that contains data about styles used in a CAD drawing.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.ConvSection.DimStyles">
            <summary>
            A CAD section that contains data about dimension styles used in a CAD drawing.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.ConvSection.BlockRecords">
            <summary>
            Auxiliary member; for internal use only.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.ConvSection.VPorts">
            <summary>
            A CAD section that contains data about <see cref="T:CADImport.CADVPort">CADVPort</see>s in a CAD drawing.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.ConvSection.MLine">
            <summary>
            A CAD section that contains data about <see cref="T:CADImport.CADMLine">CADMLine</see>s in a CAD drawing.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.ConvSection.ImageDefs">
            <summary>
            A CAD section that contains data about IMAGEDEF objects of a CAD drawing.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.ConvSection.Layouts">
            <summary>
            A CAD section that contains data about layouts of a CAD drawing.
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.Orbit3D">
            <summary>
            Provides a possibility of drawing's rotation. 
            </summary>
            <remarks>
            <p>A drawing for rotation is set by the <see cref="P:CADImport.FaceModule.Orbit3D.CADImage">CADImage</see> property 
            of the <b>Orbit3D</b> class. 
            When the <see cref="P:CADImport.FaceModule.Orbit3D.Visible">Visible</see> property is set to <b>true</b>, 
            a 3D Orbit tool is displayed within the active viewport. After that you may rotate the drawing.</p>
            <p><b>Note:</b> It’s necessary to set the <see cref="P:CADImport.FaceModule.Orbit3D.Parent">Parent</see> property 
            that returns a control on which the CAD image is drawn. 
            If a resizing the drawing is necessary call <see cref="T:CADImport.CADImage">Draw</see> method with new parameters.</p>
            <p>Click and drag the cursor to rotate the image. When you move your cursor 
            over different parts of the 3D Orbit tool, the cursor icon changes. When you click to start dragging 
            the appearance of your cursor indicates the rotation of 
            the image as follows:</p>
            <p>A small sphere encircled by two lines is the cursor icon displayed when 
            you move the cursor inside the 3D Orbit tool. When the cursor is a sphere you can manipulate the image 
            by clicking and dragging. It works as if your 
            cursor grabs a sphere surrounding the objects and drags the sphere 
            around the target point. You can drag horizontally, vertically, and diagonally.</p>
            <p>A circular arrow around a small sphere is the cursor icon displayed when you 
            move the cursor outside the 3D Orbit tool. Clicking outside the 3D Orbit tool and dragging 
            the cursor around it moves the image around an axis that extends through 
            the center of the 3D Orbit tool, perpendicular to the screen. This is called a "roll".</p>
            <p>A horizontal ellipse around a small sphere is the cursor icon displayed when 
            you move the cursor over one of the smaller circles on the left or right side 
            of the 3D Orbit tool. Clicking and dragging from either of these points rotates the
             image around the vertical or Y axis that extends through the center of the 
             3D Orbit tool. The Y axis is represented by a vertical line on the cursor.</p>
            <p>A vertical ellipse around a small sphere is the cursor displayed when 
            you move the cursor over one of the smaller circles on the top or bottom of 
            the 3D Orbit tool. Clicking and dragging from either of these points rotates the 
            image around the horizontal or X axis that extends through the center of the 
            3D Orbit tool. The X axis is represented by a horizontal line on the cursor .</p>
            </remarks>
        </member>
        <member name="M:CADImport.FaceModule.Orbit3D.OnRotate">
            <summary>
            Invokes <see cref="E:CADImport.FaceModule.Orbit3D.RotateEvent">RotateEvent</see>
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.Orbit3D.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:CADImport.FaceModule.Orbit3D">Orbit3D</see> object. 
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.Orbit3D.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Forms.Control.MouseDown">MouseDown</see> event.
            </summary>
            <param name="sender">An object that raises the <see cref="E:System.Windows.Forms.Control.MouseDown">MouseDown</see> event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs">MouseEventArgs</see> object that provides data
            for the <see cref="E:System.Windows.Forms.Control.MouseDown">MouseDown</see> event.</param>
        </member>
        <member name="M:CADImport.FaceModule.Orbit3D.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Forms.Control.MouseMove">MouseMove</see> event.
            </summary>
            <param name="sender">An object that raises the <see cref="E:System.Windows.Forms.Control.MouseDown">MouseMove</see> event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs">MouseEventArgs</see> object that provides data
            for the <see cref="E:System.Windows.Forms.Control.MouseMove">MouseMove</see> event.</param>
        </member>
        <member name="M:CADImport.FaceModule.Orbit3D.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Forms.Control.MouseUp">MouseUp</see> event.
            </summary>
            <param name="sender">An object that raises the <see cref="E:System.Windows.Forms.Control.MouseUp">MouseUp</see> event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs">MouseEventArgs</see> object that provides data
            for the <see cref="E:System.Windows.Forms.Control.MouseUp">MouseUp</see> event.</param>
        </member>
        <member name="M:CADImport.FaceModule.Orbit3D.OnPaint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Forms.Control.Paint">Paint</see> event.
            </summary>
            <param name="sender">An object that raises the <see cref="E:System.Windows.Forms.Control.Paint">Paint</see> event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs">PaintEventArgs</see> object that provides data
            for the <see cref="E:System.Windows.Forms.Control.Paint">Paint</see> event.</param>
        </member>
        <member name="M:CADImport.FaceModule.Orbit3D.Enable3dOrbit">
            <summary>
            Activates the 3D Orbit tool. 
            </summary>
            <returns><b>true</b> if the 3D Orbit tool is activated; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.FaceModule.Orbit3D.Disable3dOrbit">
            <summary>
            Deactivates the 3D Orbit tool. 
            </summary>
            <returns><b>true</b> if the 3D Orbit tool is deactivated; otherwise, <b>false</b>.</returns>
        </member>
        <member name="E:CADImport.FaceModule.Orbit3D.RotateEvent">
            <summary>
            Occurs when the drawing is rotated with Orbit3D tool
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.Orbit3D.CADImage">
            <summary>
            Gets or sets a <see cref="T:CADImport.CADImage">CADImage</see> object that is
            manipulated by the 3D Orbit tool. 
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.Orbit3D.IsMouseDown">
            <summary>
            Gets or sets a value indicating whether a mouse button is pressed.
            </summary>
            <value><b>true</b> if a mouse button is pressed; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.FaceModule.Orbit3D.Parent">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Forms.Control">Control</see> on 
            which a <see cref="P:CADImport.FaceModule.Orbit3D.CADImage">CADImage</see> is drawn.
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.Orbit3D.Visible">
            <summary>
            Gets or sets a value indicating whether the 3D Orbit tool is visible.
            </summary>
            <value><b>true</b> if the 3D Orbit tool is visible; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.FaceModule.Orbit3D.Width">
            <summary>
            Gets or sets a width of the 3D Orbit tool. 
            </summary>
            <value>An <b>int</b> value representing a width of the 3D Orbit tool in pixels.</value>
        </member>
        <member name="P:CADImport.FaceModule.Orbit3D.Height">
            <summary>
            Gets or sets a height of the 3D Orbit tool. 
            </summary>
            <value>An <b>int</b> value representing a height of the 3D Orbit tool in pixels.</value>
        </member>
        <member name="T:CADImport.FaceModule.CADImportEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:CADImport.FaceModule.Orbit3D.RotateEvent">RotateEvent</see> event
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs">
            <summary>
            Arguments used with KeysRequiredEvent
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.#ctor(System.String,System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
            <param name="keyValue">The current key value.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.FileName">
            <summary>
            Gets the name of the file for which keys are required.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.Key">
            <summary>
            Gets or sets the key value
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.TestStrategy">
            <summary>
            The strategy to apply to testing.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestStrategy.FindFirstError">
            <summary>
            Find the first error only.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestStrategy.FindAllErrors">
            <summary>
            Find all possible errors.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.TestOperation">
            <summary>
            The operation in progress reported by a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler"/> during testing.
            </summary>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.Initialising">
            <summary>
            Setting up testing.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.EntryHeader">
            <summary>
            Testing an individual entries header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.EntryData">
            <summary>
            Testing an individual entries data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.EntryComplete">
            <summary>
            Testing an individual entry has completed.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.MiscellaneousTests">
            <summary>
            Running miscellaneous tests
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.Complete">
            <summary>
            Testing is complete
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.TestStatus">
            <summary>
            Status returned returned by <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler"/> during testing.
            </summary>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.TestStatus.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.TestStatus"/>
            </summary>
            <param name="file">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> this status applies to.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.Operation">
            <summary>
            Get the current <see cref="T:ICSharpCode.SharpZipLib.Zip.TestOperation"/> in progress.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.File">
            <summary>
            Get the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> this status is applicable to.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.Entry">
            <summary>
            Get the current/last entry tested.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.ErrorCount">
            <summary>
            Get the number of errors detected so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.BytesTested">
            <summary>
            Get the number of bytes tested so far for the current entry.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.EntryValid">
            <summary>
            Get a value indicating wether the last entry test was valid.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler">
            <summary>
            Delegate invoked during <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean,ICSharpCode.SharpZipLib.Zip.TestStrategy,ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler)">testing</see> if supplied indicating current progress and status.
            </summary>
            <remarks>If the message is non-null an error has occured.  If the message is null
            the operation as found in <see cref="T:ICSharpCode.SharpZipLib.Zip.TestStatus">status</see> has started.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FileUpdateMode">
            <summary>
            The possible ways of <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CommitUpdate">applying updates</see> to an archive.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FileUpdateMode.Safe">
            <summary>
            Perform all updates on temporary files ensuring that the original file is saved.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FileUpdateMode.Direct">
            <summary>
            Update the archive directly, which is faster but less safe.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile">
            <summary>
            This class represents a Zip archive.  You can ask for the contained
            entries, or get an input stream for a file entry.  The entry is
            automatically decompressed.
            
            You can also update the archive adding or deleting entries.
            
            This class is thread safe for input:  You can open input streams for arbitrary
            entries in different threads.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            <example>
            <code>
            using System;
            using System.Text;
            using System.Collections;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
            	static public void Main(string[] args)
            	{
            		using (ZipFile zFile = new ZipFile(args[0])) {
            			Console.WriteLine("Listing of : " + zFile.Name);
            			Console.WriteLine("");
            			Console.WriteLine("Raw Size    Size      Date     Time     Name");
            			Console.WriteLine("--------  --------  --------  ------  ---------");
            			foreach (ZipEntry e in zFile) {
            				if ( e.IsFile ) {
            					DateTime d = e.DateTime;
            					Console.WriteLine("{0, -10}{1, -10}{2}  {3}   {4}", e.Size, e.CompressedSize,
            						d.ToString("dd-MM-yy"), d.ToString("HH:mm"),
            						e.Name);
            				}
            			}
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipFile.KeysRequired">
            <summary>
            Event handler for handling encryption keys.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.OnKeysRequired(System.String)">
            <summary>
            Handles getting of encryption keys when required.
            </summary>
            <param name="fileName">The file for which encryption keys are required.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.String)">
            <summary>
            Opens a Zip file with the given name for reading.
            </summary>
            <param name="name">The name of the file to open.</param>
            <exception cref="T:System.ArgumentNullException">The argument supplied is null.</exception>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.IO.FileStream)">
            <summary>
            Opens a Zip file reading the given <see cref="T:System.IO.FileStream"/>.
            </summary>
            <param name="file">The <see cref="T:System.IO.FileStream"/> to read archive data from.</param>
            <exception cref="T:System.ArgumentNullException">The supplied argument is null.</exception>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Opens a Zip file reading the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read archive data from.</param>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The stream doesn't contain a valid zip archive.<br/>
            </exception>
            <exception cref="T:System.ArgumentException">
            The <see cref="T:System.IO.Stream">stream</see> doesnt support seeking.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.IO.Stream">stream</see> argument is null.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor">
            <summary>
            Initialises a default <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> instance with no entries and no file storage.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Finalize">
            <summary>
            Finalize this instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Close">
            <summary>
            Closes the ZipFile.  If the stream is <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsStreamOwner">owned</see> then this also closes the underlying input stream.
            Once closed, no further instance methods should be called.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Create(System.String)">
            <summary>
            Create a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> whose data will be stored in a file.
            </summary>
            <param name="fileName">The name of the archive to create.</param>
            <returns>Returns the newly created <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"></paramref> is null</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Create(System.IO.Stream)">
            <summary>
            Create a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> whose data will be stored on a stream.
            </summary>
            <param name="outStream">The stream providing data storage.</param>
            <returns>Returns the newly created <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="outStream"> is null</paramref></exception>
            <exception cref="T:System.ArgumentException"><paramref name="outStream"> doesnt support writing.</paramref></exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetEnumerator">
            <summary>
            Gets an enumerator for the Zip entries in this Zip file.
            </summary>
            <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> for this archive.</returns>
            <exception cref="T:System.ObjectDisposedException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.FindEntry(System.String,System.Boolean)">
            <summary>
            Return the index of the entry with a matching name
            </summary>
            <param name="name">Entry name to find</param>
            <param name="ignoreCase">If true the comparison is case insensitive</param>
            <returns>The index position of the matching entry or -1 if not found</returns>
            <exception cref="T:System.ObjectDisposedException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetEntry(System.String)">
            <summary>
            Searches for a zip entry in this archive with the given name.
            String comparisons are case insensitive
            </summary>
            <param name="name">
            The name to find. May contain directory components separated by slashes ('/').
            </param>
            <returns>
            A clone of the zip entry, or null if no entry with that name exists.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetInputStream(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Gets an input stream for reading the given zip entry data in an uncompressed form.
            Normally the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> should be an entry returned by GetEntry().
            </summary>
            <param name="entry">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> to obtain a data <see cref="T:System.IO.Stream"/> for</param>
            <returns>An input <see cref="T:System.IO.Stream"/> containing data for this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/></returns>
            <exception cref="T:System.ObjectDisposedException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetInputStream(System.Int64)">
            <summary>
            Creates an input stream reading a zip entry
            </summary>
            <param name="entryIndex">The index of the entry to obtain an input stream for.</param>
            <returns>
            An input <see cref="T:System.IO.Stream"/> containing data for this <paramref name="entryIndex"/>
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <returns>true if all tests pass, false otherwise</returns>
            <remarks>Testing will terminate on the first error found.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean,ICSharpCode.SharpZipLib.Zip.TestStrategy,ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <param name="strategy">The <see cref="T:ICSharpCode.SharpZipLib.Zip.TestStrategy"></see> to apply.</param>
            <param name="resultHandler">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler"></see> handler to call during testing.</param>
            <returns>true if all tests pass, false otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">The object has already been closed.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestLocalHeader(ICSharpCode.SharpZipLib.Zip.ZipEntry,ICSharpCode.SharpZipLib.Zip.ZipFile.HeaderTest)">
            <summary>
            Test a local header against that provided from the central directory
            </summary>
            <param name="entry">
            The entry to test against
            </param>
            <param name="tests">The type of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.HeaderTest">tests</see> to carry out.</param>
            <returns>The offset of the entries data in the file</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate(ICSharpCode.SharpZipLib.Zip.IArchiveStorage,ICSharpCode.SharpZipLib.Zip.IDynamicDataSource)">
            <summary>
            Begin updating this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> archive.
            </summary>
            <param name="archiveStorage">The <see cref="T:ICSharpCode.SharpZipLib.Zip.IArchiveStorage">archive storage</see> for use during the update.</param>
            <param name="dataSource">The <see cref="T:ICSharpCode.SharpZipLib.Zip.IDynamicDataSource">data source</see> to utilise during updating.</param>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">One of the arguments provided is null</exception>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate(ICSharpCode.SharpZipLib.Zip.IArchiveStorage)">
            <summary>
            Begin updating to this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> archive.
            </summary>
            <param name="archiveStorage">The storage to use during the update.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate">
            <summary>
            Begin updating this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> archive.
            </summary>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate(ICSharpCode.SharpZipLib.Zip.IArchiveStorage)"/>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CommitUpdate"></seealso>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.AbortUpdate"></seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CommitUpdate">
            <summary>
            Commit current updates, updating this archive.
            </summary>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate"></seealso>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.AbortUpdate"></seealso>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.AbortUpdate">
            <summary>
            Abort updating leaving the archive unchanged.
            </summary>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate"></seealso>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CommitUpdate"></seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.SetComment(System.String)">
            <summary>
            Set the file comment to be recorded when the current update is <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CommitUpdate">commited</see>.
            </summary>
            <param name="comment">The comment to record.</param>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(System.String,ICSharpCode.SharpZipLib.Zip.CompressionMethod,System.Boolean)">
            <summary>
            Add a new entry to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <param name="useUnicodeText">Ensure Unicode text is used for name and comment for this entry.</param>
            <exception cref="T:System.ArgumentNullException">Argument supplied is null.</exception>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Compression method is not supported.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(System.String,ICSharpCode.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Add a new entry to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <exception cref="T:System.ArgumentNullException">ZipFile has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The compression method is not supported.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(System.String)">
            <summary>
            Add a file to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <exception cref="T:System.ArgumentNullException">Argument supplied is null.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(System.String,System.String)">
            <summary>
            Add a file to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="entryName">The name to use for the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> on the Zip file created.</param>
            <exception cref="T:System.ArgumentNullException">Argument supplied is null.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(ICSharpCode.SharpZipLib.Zip.IStaticDataSource,System.String)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(ICSharpCode.SharpZipLib.Zip.IStaticDataSource,System.String,ICSharpCode.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
            <param name="compressionMethod">The compression method to use.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(ICSharpCode.SharpZipLib.Zip.IStaticDataSource,System.String,ICSharpCode.SharpZipLib.Zip.CompressionMethod,System.Boolean)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <param name="useUnicodeText">Ensure Unicode text is used for name and comments for this entry.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Add a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> that contains no data.
            </summary>
            <param name="entry">The entry to add.</param>
            <remarks>This can be used to add directories, volume labels, or empty file entries.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.AddDirectory(System.String)">
            <summary>
            Add a directory entry to the archive.
            </summary>
            <param name="directoryName">The directory to add.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Delete(System.String)">
            <summary>
            Delete an entry by name
            </summary>
            <param name="fileName">The filename to delete</param>
            <returns>True if the entry was found and deleted; false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Delete(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Delete a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> from the archive.
            </summary>
            <param name="entry">The entry to delete.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.WriteLEUshort(System.UInt16)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.WriteLEInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.WriteLEUint(System.UInt32)">
            <summary>
            Write an unsigned int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.WriteLeLong(System.Int64)">
            <summary>
            Write a long in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetBuffer">
            <summary>
            Get a raw memory buffer.
            </summary>
            <returns>Returns a raw memory buffer.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetDescriptorSize(ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate)">
            <summary>
            Get the size of the source descriptor for a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate"/>.
            </summary>
            <param name="update">The update to get the size for.</param>
            <returns>The descriptor size, zero if there isnt one.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetOutputStream(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Get an output stream for the specified <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/>
            </summary>
            <param name="entry">The entry to get an output stream for.</param>
            <returns>The output stream obtained for the entry.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the this instance and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadLEUshort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadLEUint">
            <summary>
            Read a uint in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadEntries">
            <summary>
            Search for and read the central directory of a zip file filling the entries array.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The central directory is malformed or cannot be found
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.LocateEntry(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Locate the data for a given entry.
            </summary>
            <returns>
            The start offset of the data.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The local header signature is invalid, the entry and central header file name lengths are different
            or the local and entry compression methods dont match
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Key">
            <summary>
            Get/set the encryption key value.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Password">
            <summary>
            Password to be used for encrypting/decrypting files.
            </summary>
            <remarks>Set to null if no password is required.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.HaveKeys">
            <summary>
            Get a value indicating wether encryption keys are currently available.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsStreamOwner">
            <summary>
            Get/set a flag indicating if the underlying stream is owned by the ZipFile instance.
            If the flag is true then the stream will be closed when <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Close">Close</see> is called.
            </summary>
            <remarks>
            The default value is true in all cases.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsEmbeddedArchive">
            <summary>
            Get a value indicating wether
            this archive is embedded in another file or not.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsNewArchive">
            <summary>
            Get a value indicating that this archive is a new one.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipFileComment">
            <summary>
            Gets the comment for the zip file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Name">
            <summary>
            Gets the name of this zip file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Size">
            <summary>
            Gets the number of entries in this zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Count">
            <summary>
            Get the number of entries contained in this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.EntryByIndex(System.Int32)">
            <summary>
            Indexer property for ZipEntries
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.NameTransform">
            <summary>
            Get / set the <see cref="T:ICSharpCode.SharpZipLib.Core.INameTransform"/> to apply to names when updating.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.EntryFactory">
            <summary>
            Get/set the <see cref="T:ICSharpCode.SharpZipLib.Zip.IEntryFactory"/> used to generate <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> values
            during updates.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.BufferSize">
            <summary>
            Get /set the buffer size to be used when updating this zip file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsUpdating">
            <summary>
            Get a value indicating an update has <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate">been started</see>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UseZip64">
            <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.KeysRequiredEventHandler">
            <summary>
            Delegate for handling keys/password setting during compresion/decompression.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.UpdateCommand">
            <summary>
            The kind of update to apply.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.UpdateComparer">
            <summary>
            Class used to sort updates.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UpdateComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is 
            less than, equal to or greater than the other.
            </summary>
            <param name="x">First object to compare</param>
            <param name="y">Second object to compare.</param>
            <returns>Compare result.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate">
            <summary>
            Represents a pending update to a Zip file.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Copy an existing entry.
            </summary>
            <param name="entry">The existing entry to copy.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.Entry">
            <summary>
            Get the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> for this update.
            </summary>
            <remarks>This is the source or original entry.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.OutEntry">
            <summary>
            Get the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> that will be written to the updated/new file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.Command">
            <summary>
            Get the command for this update.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.Filename">
            <summary>
            Get the filename if any for this update.  Null if none exists.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.SizePatchOffset">
            <summary>
            Get/set the location of the size patch for this update.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.CrcPatchOffset">
            <summary>
            Get /set the location of the crc patch for this update.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.OffsetBasedSize">
            <summary>
            Get/set the size calculated by offset.
            Specifically, the difference between this and next entry's starting offset.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString">
            <summary>
            Represents a string from a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> which is stored as an array of bytes.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.#ctor(System.String)">
            <summary>
            Initialise a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString"/> with a string.
            </summary>
            <param name="comment">The textual string form.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.#ctor(System.Byte[])">
            <summary>
            Initialise a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString"/> using a string in its binary 'raw' form.
            </summary>
            <param name="rawString"></param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.Reset">
            <summary>
            Reset the comment to its initial state.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.op_Implicit(ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString)~System.String">
            <summary>
            Implicit conversion of comment to a string.
            </summary>
            <param name="zipString">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString"/> to convert to a string.</param>
            <returns>The textual equivalent for the input value.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.IsSourceString">
            <summary>
            Get a value indicating the original source of data for this instance.
            True if the source was a string; false if the source was binary data.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.RawLength">
            <summary>
            Get the length of the comment when represented as raw bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.RawComment">
            <summary>
            Get the comment in its 'raw' form as plain bytes.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipEntryEnumerator">
            <summary>
            An <see cref="T:System.Collections.IEnumerator">enumerator</see> for <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">Zip entries</see>
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream">
            <summary>
            An <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream"/> is a stream that you can write uncompressed data
            to and flush, but cannot read, seek or do anything else to.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Close">
            <summary>
            Close this stream instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Flush">
            <summary>
            Write any buffered data to underlying storage.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Length">
            <summary>
            Get the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream">
            <summary>
            A <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream"/> is an <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            whose data is only a part or subsection of a file.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream"/> class.
            </summary>
            <param name="zipFile">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> containing the underlying stream to use for IO.</param>
            <param name="start">The start of the partial data.</param>
            <param name="length">The length of the partial data.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.ReadByte">
            <summary>
            Read a byte from this stream.
            </summary>
            <returns>Returns the byte read or -1 on end of stream.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Close">
            <summary>
            Close this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream">partial input stream</see>.
            </summary>
            <remarks>
            The underlying stream is not closed.  Close the parent ZipFile class to do that.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value>false</value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value>true</value>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <value>true.</value>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.CanTimeout">
            <summary>
            Gets a value that determines whether the current stream can time out.
            </summary>
            <value></value>
            <returns>A value that determines whether the current stream can time out.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.IStaticDataSource">
            <summary>
            Provides a static way to obtain a source of data for an entry.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IStaticDataSource.GetSource">
            <summary>
            Get a source of data by creating a new stream.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> to use for compression input.</returns>
            <remarks>Ideally a new stream is created and opened to achieve this, to avoid locking problems.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.IDynamicDataSource">
            <summary>
            Represents a source of data that can dynamically provide
            multiple <see cref="T:System.IO.Stream">data sources</see> based on the parameters passed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IDynamicDataSource.GetSource(ICSharpCode.SharpZipLib.Zip.ZipEntry,System.String)">
            <summary>
            Get a data source.
            </summary>
            <param name="entry">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> to get a source for.</param>
            <param name="name">The name for data if known.</param>
            <returns>Returns a <see cref="T:System.IO.Stream"/> to use for compression input.</returns>
            <remarks>Ideally a new stream is created and opened to achieve this, to avoid locking problems.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource">
            <summary>
            Default implementation of a <see cref="T:ICSharpCode.SharpZipLib.Zip.IStaticDataSource"/> for use with files stored on disk.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource.#ctor(System.String)">
            <summary>
            Initialise a new instnace of <see cref="T:ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource"/>
            </summary>
            <param name="fileName">The name of the file to obtain data from.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource.GetSource">
            <summary>
            Get a <see cref="T:System.IO.Stream"/> providing data.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> provising data.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource">
            <summary>
            Default implementation of <see cref="T:ICSharpCode.SharpZipLib.Zip.IDynamicDataSource"/> for files stored on disk.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource.GetSource(ICSharpCode.SharpZipLib.Zip.ZipEntry,System.String)">
            <summary>
            Get a <see cref="T:System.IO.Stream"/> providing data for an entry.
            </summary>
            <param name="entry">The entry to provide data for.</param>
            <param name="name">The file name for data if known.</param>
            <returns>Returns a stream providing data; or null if not available</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.IArchiveStorage">
            <summary>
            Defines facilities for data storage when updating Zip Archives.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.GetTemporaryOutput">
            <summary>
            Get an empty <see cref="T:System.IO.Stream"/> that can be used for temporary output.
            </summary>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.ConvertTemporaryToFinal"></seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Convert a temporary output stream to a final stream.
            </summary>
            <returns>The resulting final <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.GetTemporaryOutput"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of the original stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The current stream.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>This may be the current stream passed.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.Dispose">
            <summary>
            Dispose of this instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.UpdateMode">
            <summary>
            Get the <see cref="T:ICSharpCode.SharpZipLib.Zip.FileUpdateMode"/> to apply during updates.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage">
            <summary>
            An abstract <see cref="T:ICSharpCode.SharpZipLib.Zip.IArchiveStorage"/> suitable for extension by inheritance.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage"/> class.
            </summary>
            <param name="updateMode">The update mode.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets a temporary output <see cref="T:System.IO.Stream"/>
            </summary>
            <returns>Returns the temporary output stream.</returns>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.ConvertTemporaryToFinal"></seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts the temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.GetTemporaryOutput"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to make a copy of.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to open for direct update.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.UpdateMode">
            <summary>
            Gets the update mode applicable.
            </summary>
            <value>The update mode.</value>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage">
            <summary>
            An <see cref="T:ICSharpCode.SharpZipLib.Zip.IArchiveStorage"/> implementation suitable for hard disks.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile,ICSharpCode.SharpZipLib.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage"/> class.
            </summary>
            <param name="file">The file.</param>
            <param name="updateMode">The update mode.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage"/> class.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets a temporary output <see cref="T:System.IO.Stream"/> for performing updates on.
            </summary>
            <returns>Returns the temporary output stream.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts a temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of a stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The current stream.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>If the <paramref name="current"/> stream is not null this is used as is.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage">
            <summary>
            An <see cref="T:ICSharpCode.SharpZipLib.Zip.IArchiveStorage"/> implementation suitable for in memory streams.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage"/> class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage"/> class.
            </summary>
            <param name="updateMode">The <see cref="T:ICSharpCode.SharpZipLib.Zip.FileUpdateMode"/> to use</param>
            <remarks>This constructor is for testing as memory streams dont really require safe mode.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets the temporary output <see cref="T:System.IO.Stream"/>
            </summary>
            <returns>Returns the temporary output stream.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts the temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of the original stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The original source stream</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>If the <paramref name="stream"/> passed is not null this is used;
            otherwise a new <see cref="T:System.IO.MemoryStream"/> is returned.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.FinalStream">
            <summary>
            Get the stream returned by <see cref="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.ConvertTemporaryToFinal"/> if this was in fact called.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.StreamUtils">
            <summary>
            Provides simple <see cref="T:System.IO.Stream"/>" utilities.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[])">
            <summary>
            Read from a <see cref="T:System.IO.Stream"/> ensuring all the required data is read.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="buffer">The buffer to fill.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from a <see cref="T:System.IO.Stream"/>" ensuring all the required data is read.
            </summary>
            <param name="stream">The stream to read data from.</param>
            <param name="buffer">The buffer to store data in.</param>
            <param name="offset">The offset at which to begin storing data.</param>
            <param name="count">The number of bytes of data to store.</param>
            <exception cref="T:System.ArgumentNullException">Required parameter is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> and or <paramref name="count"/> are invalid.</exception>
            <exception cref="T:System.IO.EndOfStreamException">End of stream is encountered before all the data has been read.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[],ICSharpCode.SharpZipLib.Core.ProgressHandler,System.TimeSpan,System.Object,System.String)">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
            <param name="progressHandler">The <see cref="T:ICSharpCode.SharpZipLib.Core.ProgressHandler">progress handler delegate</see> to use.</param>
            <param name="updateInterval">The minimum <see cref="T:System.TimeSpan"/> between progress updates.</param>
            <param name="sender">The source for this event.</param>
            <param name="name">The name to use with the event.</param>
            <remarks>This form is specialised for use within #Zip to support events during archive operations.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[],ICSharpCode.SharpZipLib.Core.ProgressHandler,System.TimeSpan,System.Object,System.String,System.Int64)">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
            <param name="progressHandler">The <see cref="T:ICSharpCode.SharpZipLib.Core.ProgressHandler">progress handler delegate</see> to use.</param>
            <param name="updateInterval">The minimum <see cref="T:System.TimeSpan"/> between progress updates.</param>
            <param name="sender">The source for this event.</param>
            <param name="name">The name to use with the event.</param>
            <param name="fixedTarget">A predetermined fixed target value to use with progress updates.
            If the value is negative the target is calculated by looking at the stream.</param>
            <remarks>This form is specialised for use within #Zip to support events during archive operations.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.#ctor">
            <summary>
            Initialise an instance of <see cref="T:ICSharpCode.SharpZipLib.Core.StreamUtils"></see>
            </summary>
        </member>
        <member name="T:CADImport.Printing.DrawingSize">
            <summary>
            Sets a size type of an image
            </summary>
        </member>
        <member name="F:CADImport.Printing.DrawingSize.Real">
            <summary>
            Sets 1:1 scale
            </summary>
        </member>
        <member name="F:CADImport.Printing.DrawingSize.Fit">
            <summary>
            Stretches an image by the printing page keeping proportions
            </summary>
        </member>
        <member name="F:CADImport.Printing.DrawingSize.Format">
            <summary>
            Stretches an image by the specified format
            </summary>
        </member>
        <member name="T:CADImport.Printing.PlotPaperUnits">
            <summary>
            Sets units of the drawing image
            </summary>
        </member>
        <member name="F:CADImport.Printing.PlotPaperUnits.Inches">
            <summary>
            Sets inches for the image units
            </summary>
        </member>
        <member name="F:CADImport.Printing.PlotPaperUnits.Millimeters">
            <summary>
            Sets millimeters for the image units
            </summary>
        </member>
        <member name="F:CADImport.Printing.PlotPaperUnits.Pixels">
            <summary>
            Sets pixels for the image units
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory">
            <summary>
            Basic implementation of <see cref="T:ICSharpCode.SharpZipLib.Zip.IEntryFactory"></see>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.#ctor">
            <summary>
            Initialise a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory"/> class.
            </summary>
            <remarks>A default <see cref="T:ICSharpCode.SharpZipLib.Core.INameTransform"/>, and the LastWriteTime for files is used.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory"/> using the specified <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting"/>
            </summary>
            <param name="timeSetting">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting">time setting</see> to use when creating <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">Zip entries</see>.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.#ctor(System.DateTime)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory"/> using the specified <see cref="T:System.DateTime"/>
            </summary>
            <param name="time">The time to set all <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DateTime"/> values to.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.MakeFileEntry(System.String)">
            <summary>
            Make a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> for a file.
            </summary>
            <param name="fileName">The name of the file to create a new entry for.</param>
            <returns>Returns a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> based on the <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.MakeFileEntry(System.String,System.Boolean)">
            <summary>
            Make a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> from a name.
            </summary>
            <param name="fileName">The name of the file to create a new entry for.</param>
            <param name="useFileSystem">If true entry detail is retrieved from the file system if the file exists.</param>
            <returns>Returns a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> based on the <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.MakeDirectoryEntry(System.String)">
            <summary>
            Make a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"></see> for a directory.
            </summary>
            <param name="directoryName">The raw untransformed name for the new directory</param>
            <returns>Returns a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"></see> representing a directory.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.MakeDirectoryEntry(System.String,System.Boolean)">
            <summary>
            Make a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"></see> for a directory.
            </summary>
            <param name="directoryName">The raw untransformed name for the new directory</param>
            <param name="useFileSystem">If true entry detail is retrieved from the file system if the file exists.</param>
            <returns>Returns a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"></see> representing a directory.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.NameTransform">
            <summary>
            Get / set the <see cref="T:ICSharpCode.SharpZipLib.Core.INameTransform"/> to be used when creating new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> values.
            </summary>
            <remarks>
            Setting this property to null will cause a default <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform">name transform</see> to be used.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.Setting">
            <summary>
            Get / set the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting"/> in use.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.FixedDateTime">
            <summary>
            Get / set the <see cref="T:System.DateTime"/> value to use when <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.Setting"/> is set to <see cref="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.Fixed"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.GetAttributes">
            <summary>
            A bitmask defining the attributes to be retrieved from the actual file.
            </summary>
            <remarks>The default is to get all possible attributes from the actual file.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.SetAttributes">
            <summary>
            A bitmask defining which attributes are to be set on.
            </summary>
            <remarks>By default no attributes are set on.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.IsUnicodeText">
            <summary>
            Get set a value indicating wether unidoce text should be set on.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting">
            <summary>
            Defines the possible values to be used for the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DateTime"/>.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastWriteTime">
            <summary>
            Use the recorded LastWriteTime value for the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastWriteTimeUtc">
            <summary>
            Use the recorded LastWriteTimeUtc value for the file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.CreateTime">
            <summary>
            Use the recorded CreateTime value for the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.CreateTimeUtc">
            <summary>
            Use the recorded CreateTimeUtc value for the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastAccessTime">
            <summary>
            Use the recorded LastAccessTime value for the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastAccessTimeUtc">
            <summary>
            Use the recorded LastAccessTimeUtc value for the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.Fixed">
            <summary>
            Use a fixed value.
            </summary>
            <remarks>The actual <see cref="T:System.DateTime"/> value used can be
            specified via the <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.#ctor(System.DateTime)"/> constructor or 
            using the <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting)"/> with the setting set
            to <see cref="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.Fixed"/> which will use the <see cref="T:System.DateTime"/> when this class was constructed.
            The <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.FixedDateTime"/> property can also be used to set this value.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.HostSystemID">
            <summary>
            Defines known values for the <see cref="T:ICSharpCode.SharpZipLib.Zip.HostSystemID"/> property.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Msdos">
            <summary>
            Host system = MSDOS
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Amiga">
            <summary>
            Host system = Amiga
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.OpenVms">
            <summary>
            Host system = Open VMS
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Unix">
            <summary>
            Host system = Unix
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.VMCms">
            <summary>
            Host system = VMCms
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.AtariST">
            <summary>
            Host system = Atari ST
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.OS2">
            <summary>
            Host system = OS2
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Macintosh">
            <summary>
            Host system = Macintosh
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.ZSystem">
            <summary>
            Host system = ZSystem
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Cpm">
            <summary>
            Host system = Cpm
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.WindowsNT">
            <summary>
            Host system = Windows NT
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.MVS">
            <summary>
            Host system = MVS
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Vse">
            <summary>
            Host system = VSE
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.AcornRisc">
            <summary>
            Host system = Acorn RISC
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Vfat">
            <summary>
            Host system = VFAT
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.AlternateMvs">
            <summary>
            Host system = Alternate MVS
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.BeOS">
            <summary>
            Host system = BEOS
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Tandem">
            <summary>
            Host system = Tandem
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.OS400">
            <summary>
            Host system = OS400
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.OSX">
            <summary>
            Host system = OSX
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.WinZipAES">
            <summary>
            Host system = WinZIP AES
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">
            <summary>
            This class represents an entry in a zip archive.  This can be a file
            or a directory
            ZipFile and ZipInputStream will give you instances of this class as 
            information about the members in an archive.  ZipOutputStream
            uses an instance of this class when creating an entry in a Zip file.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String)">
            <summary>
            Creates a zip entry with the given name.
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix' style paths with relative names only.
            There are with no device names and path elements are separated by '/' characters.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32)">
            <summary>
            Creates a zip entry with the given name and version required to extract
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <param name="versionRequiredToExtract">
            The minimum 'feature version' required this entry
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32,System.Int32,ICSharpCode.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Initializes an entry with the given name and made by information
            </summary>
            <param name="name">Name for this entry</param>
            <param name="madeByInfo">Version and HostSystem Information</param>
            <param name="versionRequiredToExtract">Minimum required zip feature version required to extract this entry</param>
            <param name="method">Compression method for this entry.</param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            versionRequiredToExtract should be 0 (auto-calculate) or &gt; 10
            </exception>
            <remarks>
            This constructor is used by the ZipFile class when reading from the central header
            It is not generally useful, use the constructor specifying the name only.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Creates a deep copy of the given zip entry.
            </summary>
            <param name="entry">
            The entry to copy.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.HasDosAttributes(System.Int32)">
            <summary>
            Test the external attributes for this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> to
            see if the external attributes are Dos based (including WINNT and variants)
            and match the values
            </summary>
            <param name="attributes">The attributes to test.</param>
            <returns>Returns true if the external attributes are known to be DOS/Windows 
            based and have the same attributes set as the value passed.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.ForceZip64">
            <summary>
            Force this entry to be recorded using Zip64 extensions.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsZip64Forced">
            <summary>
            Get a value indicating wether Zip64 extensions were forced.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value of true if Zip64 extensions have been forced on; false if not.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.ProcessExtraData(System.Boolean)">
            <summary>
            Process extra data fields updating the entry based on the contents.
            </summary>
            <param name="localHeader">True if the extra data fields should be handled
            for a local header, rather than for a central header.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported">
            <summary>
            Test entry to see if data can be extracted.
            </summary>
            <returns>Returns true if data can be extracted for this entry; false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.Clone">
            <summary>
            Creates a copy of this zip entry.
            </summary>
            <returns>An <see cref="T:System.Object"/> that is a copy of the current instance.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.ToString">
            <summary>
            Gets a string representation of this ZipEntry.
            </summary>
            <returns>A readable textual representation of this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported(ICSharpCode.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Test a <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressionMethod">compression method</see> to see if this library
            supports extracting data compressed with that method
            </summary>
            <param name="method">The compression method to test.</param>
            <returns>Returns true if the compression method is supported; false otherwise</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            Names are made relative by trimming leading slashes which is compatible
            with the ZIP naming convention.
            </summary>
            <param name="name">The name to clean</param>
            <returns>The 'cleaned' name.</returns>
            <remarks>
            The <seealso cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform">Zip name transform</seealso> class is more flexible.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.HasCrc">
            <summary>
            Get a value indicating wether the entry has a CRC value available.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCrypted">
            <summary>
            Get/Set flag indicating if entry is encrypted.
            A simple helper routine to aid interpretation of <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">flags</see>
            </summary>
            <remarks>This is an assistant that interprets the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">flags</see> property.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsUnicodeText">
            <summary>
            Get / set a flag indicating wether entry name and comment text are
            encoded in <a href="http://www.unicode.org">unicode UTF8</a>.
            </summary>
            <remarks>This is an assistant that interprets the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">flags</see> property.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CryptoCheckValue">
            <summary>
            Value used during password checking for PKZIP 2.0 / 'classic' encryption.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">
            <summary>
            Get/Set general purpose bit flag for entry
            </summary>
            <remarks>
            General purpose bit flag<br/>
            <br/>
            Bit 0: If set, indicates the file is encrypted<br/>
            Bit 1-2 Only used for compression type 6 Imploding, and 8, 9 deflating<br/>
            Imploding:<br/>
            Bit 1 if set indicates an 8K sliding dictionary was used.  If clear a 4k dictionary was used<br/>
            Bit 2 if set indicates 3 Shannon-Fanno trees were used to encode the sliding dictionary, 2 otherwise<br/>
            <br/>
            Deflating:<br/>
              Bit 2    Bit 1<br/>
                0        0       Normal compression was used<br/>
                0        1       Maximum compression was used<br/>
                1        0       Fast compression was used<br/>
                1        1       Super fast compression was used<br/>
            <br/>
            Bit 3: If set, the fields crc-32, compressed size
            and uncompressed size are were not able to be written during zip file creation
            The correct values are held in a data descriptor immediately following the compressed data. <br/>
            Bit 4: Reserved for use by PKZIP for enhanced deflating<br/>
            Bit 5: If set indicates the file contains compressed patch data<br/>
            Bit 6: If set indicates strong encryption was used.<br/>
            Bit 7-10: Unused or reserved<br/>
            Bit 11: If set the name and comments for this entry are in <a href="http://www.unicode.org">unicode</a>.<br/>
            Bit 12-15: Unused or reserved<br/>
            </remarks>
            <seealso cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsUnicodeText"></seealso>
            <seealso cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCrypted"></seealso>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ZipFileIndex">
            <summary>
            Get/Set index of this entry in Zip file
            </summary>
            <remarks>This is only valid when the entry is part of a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"></see></remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Offset">
            <summary>
            Get/set offset for use in central header
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">
            <summary>
            Get/Set external file attributes as an integer.
            The values of this are operating system dependant see
            <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">HostSystem</see> for details
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.VersionMadeBy">
            <summary>
            Get the version made by for this entry or zero if unknown.
            The value / 10 indicates the major version number, and 
            the value mod 10 is the minor version number
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsDOSEntry">
            <summary>
            Get a value indicating this entry is for a DOS/Windows system.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">
            <summary>
            Gets the compatability information for the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">external file attribute</see>
            If the external file attributes are compatible with MS-DOS and can be read
            by PKZIP for DOS version 2.04g then this value will be zero.  Otherwise the value
            will be non-zero and identify the host system on which the attributes are compatible.
            </summary>
            		
            <remarks>
            The values for this as defined in the Zip File format and by others are shown below.  The values are somewhat
            misleading in some cases as they are not all used as shown.  You should consult the relevant documentation
            to obtain up to date and correct information.  The modified appnote by the infozip group is
            particularly helpful as it documents a lot of peculiarities.  The document is however a little dated.
            <list type="table">
            <item>0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)</item>
            <item>1 - Amiga</item>
            <item>2 - OpenVMS</item>
            <item>3 - Unix</item>
            <item>4 - VM/CMS</item>
            <item>5 - Atari ST</item>
            <item>6 - OS/2 HPFS</item>
            <item>7 - Macintosh</item>
            <item>8 - Z-System</item>
            <item>9 - CP/M</item>
            <item>10 - Windows NTFS</item>
            <item>11 - MVS (OS/390 - Z/OS)</item>
            <item>12 - VSE</item>
            <item>13 - Acorn Risc</item>
            <item>14 - VFAT</item>
            <item>15 - Alternate MVS</item>
            <item>16 - BeOS</item>
            <item>17 - Tandem</item>
            <item>18 - OS/400</item>
            <item>19 - OS/X (Darwin)</item>
            <item>99 - WinZip AES</item>
            <item>remainder - unused</item>
            </list>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">
            <summary>
            Get minimum Zip feature version required to extract this entry
            </summary>		
            <remarks>
            Minimum features are defined as:<br/>
            1.0 - Default value<br/>
            1.1 - File is a volume label<br/>
            2.0 - File is a folder/directory<br/>
            2.0 - File is compressed using Deflate compression<br/>
            2.0 - File is encrypted using traditional encryption<br/>
            2.1 - File is compressed using Deflate64<br/>
            2.5 - File is compressed using PKWARE DCL Implode<br/>
            2.7 - File is a patch data set<br/>
            4.5 - File uses Zip64 format extensions<br/>
            4.6 - File is compressed using BZIP2 compression<br/>
            5.0 - File is encrypted using DES<br/>
            5.0 - File is encrypted using 3DES<br/>
            5.0 - File is encrypted using original RC2 encryption<br/>
            5.0 - File is encrypted using RC4 encryption<br/>
            5.1 - File is encrypted using AES encryption<br/>
            5.1 - File is encrypted using corrected RC2 encryption<br/>
            5.1 - File is encrypted using corrected RC2-64 encryption<br/>
            6.1 - File is encrypted using non-OAEP key wrapping<br/>
            6.2 - Central directory encryption (not confirmed yet)<br/>
            6.3 - File is compressed using LZMA<br/>
            6.3 - File is compressed using PPMD+<br/>
            6.3 - File is encrypted using Blowfish<br/>
            6.3 - File is encrypted using Twofish<br/>
            </remarks>
            <seealso cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CanDecompress"></seealso>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CanDecompress">
            <summary>
            Get a value indicating whether this entry can be decompressed by the library.
            </summary>
            <remarks>This is based on the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Version"></see> and 
            wether the <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported">compression method</see> is supported.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.LocalHeaderRequiresZip64">
            <summary>
            Gets a value indicating if the entry requires Zip64 extensions 
            to store the full entry values.
            </summary>
            <value>A <see cref="T:System.Boolean"/> value of true if a local header requires Zip64 extensions; false if not.</value>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CentralHeaderRequiresZip64">
            <summary>
            Get a value indicating wether the central directory entry requires Zip64 extensions to be stored.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DosTime">
            <summary>
            Get/Set DosTime value.
            </summary>
            <remarks>
            The MS-DOS date format can only represent dates between 1/1/1980 and 12/31/2107.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DateTime">
            <summary>
            Gets/Sets the time of last modification of the entry.
            </summary>
            <remarks>
            The <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DosTime"></see> property is updated to match this as far as possible.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Name">
             <summary>
             Returns the entry name.
             </summary>
             <remarks>
             The unix naming convention is followed.
             Path components in the entry should always separated by forward slashes ('/').
             Dos device names like C: should also be removed.
             See the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform"/> class, or <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)"/>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Size">
            <summary>
            Gets/Sets the size of the uncompressed data.
            </summary>
            <returns>
            The size or -1 if unknown.
            </returns>
            <remarks>Setting the size before adding an entry to an archive can help
            avoid compatability problems with some archivers which dont understand Zip64 extensions.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressedSize">
            <summary>
            Gets/Sets the size of the compressed data.
            </summary>
            <returns>
            The compressed entry size or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Crc">
            <summary>
            Gets/Sets the crc of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Crc is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The crc value or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressionMethod">
            <summary>
            Gets/Sets the compression method. Only Deflated and Stored are supported.
            </summary>
            <returns>
            The compression method for this entry
            </returns>
            <see cref="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflated"/>
            <see cref="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored"/>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressionMethodForHeader">
            <summary>
            Gets the compression method for outputting to the local or central header.
            Returns same value as CompressionMethod except when AES encrypting, which
            places 99 in the method and places the real method in the extra data.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExtraData">
            <summary>
            Gets/Sets the extra data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Extra data is longer than 64KB (0xffff) bytes.
            </exception>
            <returns>
            Extra data or null if not set.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.AESKeySize">
            <summary>
            For AES encrypted files returns or sets the number of bits of encryption (128, 192 or 256).
            When setting, only 0 (off), 128 or 256 is supported.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.AESEncryptionStrength">
            <summary>
            AES Encryption strength for storage in extra data in entry header.
            1 is 128 bit, 2 is 192 bit, 3 is 256 bit.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.AESSaltLen">
            <summary>
            Returns the length of the salt, in bytes 
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.AESOverheadSize">
            <summary>
            Number of extra bytes required to hold the AES Header fields (Salt, Pwd verify, AuthCode)
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Comment">
            <summary>
            Gets/Sets the entry comment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If comment is longer than 0xffff.
            </exception>
            <returns>
            The comment or null if not set.
            </returns>
            <remarks>
            A comment is only available for entries when read via the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> class.
            The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipInputStream"/> class doesnt have the comment data available.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsDirectory">
            <summary>
            Gets a value indicating if the entry is a directory.
            however.
            </summary>
            <remarks>
            A directory is determined by an entry name with a trailing slash '/'.
            The external file attributes can also indicate an entry is for a directory.
            Currently only dos/windows attributes are tested in this manner.
            The trailing slash convention should always be followed.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsFile">
            <summary>
            Get a value of true if the entry appears to be a file; false otherwise
            </summary>
            <remarks>
            This only takes account of DOS/Windows attributes.  Other operating systems are ignored.
            For linux and others the result may be incorrect.
            </remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.buffer_">
            <summary>
            Internal work buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufferSize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            Write a byte to buffer
            </summary>
            <param name="value">
            The value to write
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="length">number of bytes to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">The output array.</param>
            <param name="offset">The offset into output array.</param>
            <param name="length">The maximum number of bytes to store.</param>
            <returns>The number of bytes flushed.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            The internal buffer contents converted to a byte array.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="T:CADImport.CADImportForms.SetRasterSizeForm">
            <summary>
            Represents a form for setup of saved file size.
            </summary>
        </member>
        <member name="F:CADImport.CADImportForms.SetRasterSizeForm.MaxSizeMeta">
            <summary>
            Max image size
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.SetRasterSizeForm.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CADImport.CADImportForms.SetRasterSizeForm"/> class.
            </summary>
        </member>
        <member name="F:CADImport.CADImportForms.SetRasterSizeForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.SetRasterSizeForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CADImport.CADImportForms.SetRasterSizeForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.SetRasterSizeForm.MultipleLanguagesPath">
            <summary>
            Gets or sets a path to the language files directory
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.SetRasterSizeForm.LngFileName">
            <summary>
            Gets or sets a name of the language file
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.SetRasterSizeForm.SaveFileName">
            <summary>
            A saved file name
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.SetRasterSizeForm.Image">
            <summary>
            Gets or sets an image to be saved.
            </summary>
            <value>A <see cref="T:CADImport.CADImage">CADImage</see> whose size is set in this <see cref="T:CADImport.CADImportForms.SetRasterSizeForm">SetRasterSizeForm</see>.</value>
        </member>
        <member name="P:CADImport.CADImportForms.SetRasterSizeForm.CurrentSize">
            <summary>
            Gets or sets the current size of the loaded CAD image.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing a current size of the loaded CAD image.</value>
            <remarks>A current size can be more or less than the viewing area.</remarks>
        </member>
        <member name="P:CADImport.CADImportForms.SetRasterSizeForm.SizeImage">
            <summary>
            Gets a size in which the current CAD image will be saved.
            </summary>
            <value>A <see cref="T:CADImport.DRect">DRect</see> object representing a size in which the current CAD image will be saved.</value>
        </member>
        <member name="P:CADImport.CADImportForms.SetRasterSizeForm.ImagePixelFormat">
            <summary>
            <see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of an image
            </summary>
        </member>
        <member name="F:CADImport.EvalRegForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CADImport.EvalRegForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CADImport.EvalRegForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CADImport.CADImportForms.DemoForm">
            <summary>
            Represens a form that shows unregistered version info dialog.
            </summary>
        </member>
        <member name="F:CADImport.CADImportForms.DemoForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.DemoForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CADImport.CADImportForms.DemoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.DemoForm.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CADImport.CADImportForms.DemoForm"/> class.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.RichTextBoxEx.InsertLink(System.String)">
            <summary>
            Insert a given text as a link into the RichTextBox at the current insert position.
            </summary>
            <param name="text">Text to be inserted</param>
        </member>
        <member name="M:CADImport.CADImportForms.RichTextBoxEx.InsertLink(System.String,System.Int32)">
            <summary>
            Insert a given text at a given position as a link. 
            </summary>
            <param name="text">Text to be inserted</param>
            <param name="position">Insert position</param>
        </member>
        <member name="M:CADImport.CADImportForms.RichTextBoxEx.InsertLink(System.String,System.String)">
            <summary>
            Insert a given text at at the current input position as a link.
            The link text is followed by a hash (#) and the given hyperlink text, both of
            them invisible.
            When clicked on, the whole link text and hyperlink string are given in the
            LinkClickedEventArgs.
            </summary>
            <param name="text">Text to be inserted</param>
            <param name="hyperlink">Invisible hyperlink string to be inserted</param>
        </member>
        <member name="M:CADImport.CADImportForms.RichTextBoxEx.InsertLink(System.String,System.String,System.Int32)">
            <summary>
            Insert a given text at a given position as a link. The link text is followed by
            a hash (#) and the given hyperlink text, both of them invisible.
            When clicked on, the whole link text and hyperlink string are given in the
            LinkClickedEventArgs.
            </summary>
            <param name="text">Text to be inserted</param>
            <param name="hyperlink">Invisible hyperlink string to be inserted</param>
            <param name="position">Insert position</param>
        </member>
        <member name="M:CADImport.CADImportForms.RichTextBoxEx.SetSelectionLink(System.Boolean)">
            <summary>
            Set the current selection's link style
            </summary>
            <param name="link">true: set link style, false: clear link style</param>
        </member>
        <member name="M:CADImport.CADImportForms.RichTextBoxEx.GetSelectionLink">
            <summary>
            Get the link style for the current selection
            </summary>
            <returns>0: link style not set, 1: link style set, -1: mixed</returns>
        </member>
        <member name="T:CADImport.CADGraphicsOpenGL">
            <summary>
            Provides OpenGL based drawing functionality.
            </summary>
        </member>
        <member name="M:CADImport.CADGraphicsOpenGL.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADGraphicsOpenGL">CADGraphicsOpenGL</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADGraphicsOpenGL.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADGraphicsOpenGL">CADGraphicsOpenGL</see> class.
            </summary>
            <param name="render">A drawing control.</param>
        </member>
        <member name="M:CADImport.CADGraphicsOpenGL.GetCADPointFromScreenV(System.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADImport.CADGraphicsOpenGL.Draw(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Region)">
            <summary>
            Draws a <see cref="T:CADImport.CADImage">CADImage</see>.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Graphics">Graphics</see> surface on which to draw the CAD image.</param>
            <param name="Rect">A <see cref="T:System.Drawing.RectangleF">RectangleF</see> object representing an area of the CAD image.</param>
            <param name="visibleRegion">Region of visible</param>
        </member>
        <member name="M:CADImport.CADGraphicsOpenGL.DrawString(System.String,System.Drawing.Font,System.Int32,OpenGL.Math.Vector3d,CADImport.CADTextHorizontalAlign)">
            <summary>
            Draws a text string.
            </summary>
            <param name="text">A text</param>
            <param name="font">A text font</param>
            <param name="color">A text color</param>
            <param name="point">A location point of the text.</param>
            <param name="align">A text alignment.</param>
        </member>
        <member name="M:CADImport.CADGraphicsOpenGL.DrawPolyPolyLine(OpenGL.Math.Vector3d[],System.Int32[],System.Boolean)">
            <summary>
            Draws a set of lines or a set of polygons
            </summary>
            <param name="intPoints">The set of points for visualization</param>
            <param name="counts">A list of point numbers for figures.</param>
            <param name="allClosed">A value specifying if visualized figures will be closed</param>
        </member>
        <member name="M:CADImport.CADGraphicsOpenGL.DrawPolyline(OpenGL.Math.Vector3d[],System.Boolean)">
            <summary>
            Draws a polyline
            </summary>
            <param name="points">A list of polyline vertex points</param>
            <param name="closed">A value specifying if polyline is closed</param>
        </member>
        <member name="M:CADImport.CADGraphicsOpenGL.FillPolyPolyLine(OpenGL.Math.Vector3d[],System.Int32[])">
            <summary>
            Draws a filled polygons.
            </summary>
            <param name="intPoints">The set of points for visualization</param>
            <param name="counts">A list of point numbers for figures.</param>
        </member>
        <member name="M:CADImport.CADGraphicsOpenGL.Add_T(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d)">
            <summary>
            Performs addition of two 3D vector points.
            </summary>
            <param name="p1">The first vector point</param>
            <param name="p2">The second vector point</param>
            <returns>The resulting vector point</returns>
        </member>
        <member name="M:CADImport.CADGraphicsOpenGL.Sub_T(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d)">
            <summary>
            Performs substraction of two 3D vector points.
            </summary>
            <param name="p1">The first vector point</param>
            <param name="p2">The second vector point</param>
            <returns>The resulting vector point</returns>
        </member>
        <member name="M:CADImport.CADGraphicsOpenGL.IsEqual_T(OpenGL.Math.Vector3d,OpenGL.Math.Vector3d)">
            <summary>
            Checks if two 3D vector points are equal.
            </summary>
            <param name="p1">The first vector point</param>
            <param name="p2">The second vector point</param>
        </member>
        <member name="M:CADImport.CADGraphicsOpenGL.ConvertTo_T(CADImport.DPoint)">
            <summary>
            Converts a <see cref="T:CADImport.DPoint">DPoint</see> object into a 3D vector point.
            </summary>
            <param name="p">A <see cref="T:CADImport.DPoint">DPoint</see> object to be converted.</param>
            <returns>A 3D vector point.</returns>
        </member>
        <member name="T:CADImport.GBR.DCommand">
            <summary>
            GBR file D code (plot functions).
            Selects and controls tools, specify line type, etc.
            For more information please see Gerber RS-274X Format User’s Guide.
            </summary>
        </member>
        <member name="F:CADImport.GBR.DCommand.D01">
            <summary>
            Draw line, exposure on
            </summary>
        </member>
        <member name="F:CADImport.GBR.DCommand.D02">
            <summary>
            Exposure off
            </summary>
        </member>
        <member name="F:CADImport.GBR.DCommand.D03">
            <summary>
            Flash aperture
            </summary>
        </member>
        <member name="F:CADImport.GBR.DCommand.SelectByAd">
            <summary>
            Select an aperture defined by an AD parameter.
            </summary>
        </member>
        <member name="T:CADImport.GBR.GCommand">
            <summary>
            GBR file G code (general functions).
            Specifies how to interpolate and move to the
            coordinate locations following the code until changed or until a new layer
            is generated (modal).
            For more information please see Gerber RS-274X Format User’s Guide.
            </summary>
        </member>
        <member name="F:CADImport.GBR.GCommand.G00">
            <summary>
            Moves brush tool without drawing
            </summary>
        </member>
        <member name="F:CADImport.GBR.GCommand.G01">
            <summary>
            Specifies linear interpolation (1X scale)
            </summary>
        </member>
        <member name="F:CADImport.GBR.GCommand.G10">
            <summary>
            Specifies linear interpolation (10X scale)
            </summary>
        </member>
        <member name="F:CADImport.GBR.GCommand.G11">
            <summary>
            Specifies linear interpolation (0.1X scale)
            </summary>
        </member>
        <member name="F:CADImport.GBR.GCommand.G12">
            <summary>
            Specifies linear interpolation (0.01X scale)
            </summary>
        </member>
        <member name="F:CADImport.GBR.GCommand.G02">
            <summary>
            Specifies clockwise circular interpolation
            </summary>
        </member>
        <member name="F:CADImport.GBR.GCommand.G03">
            <summary>
            Specifies counterclockwise circular interpolation
            </summary>
        </member>
        <member name="F:CADImport.GBR.GCommand.G74">
            <summary>
            Turns off 360° circular interpolation
            </summary>
        </member>
        <member name="F:CADImport.GBR.GCommand.G75">
            <summary>
            Turns on 360° circular interpolation
            </summary>
        </member>
        <member name="F:CADImport.GBR.GCommand.G54">
            <summary>
            Tool prepare
            </summary>
        </member>
        <member name="F:CADImport.GBR.GCommand.G36">
            <summary>
            Turns on polygon area fill.
            </summary>
        </member>
        <member name="F:CADImport.GBR.GCommand.G37">
            <summary>
            Turns off polygon area fill.
            </summary>
        </member>
        <member name="T:CADImport.GBR.GBRDrawStatus">
            <summary>
            Current status of GBR file loading
            </summary>
        </member>
        <member name="F:CADImport.GBR.GBRDrawStatus.RunProgram">
            <summary>
            Loading is in progress
            </summary>
        </member>
        <member name="F:CADImport.GBR.GBRDrawStatus.ProgramStop">
            <summary>
            Loading is stopped
            </summary>
        </member>
        <member name="F:CADImport.GBR.GBRDrawStatus.OptionalStop">
            <summary>
            Loading is paused
            </summary>
        </member>
        <member name="F:CADImport.GBR.GBRDrawStatus.EndProgram">
            <summary>
            Loading is finished
            </summary>
        </member>
        <member name="T:CADImport.GBR.Aperture">
            <summary>
            Defines brush appearance.
            For more information please see Gerber RS-274X Format User’s Guide.
            </summary>
        </member>
        <member name="F:CADImport.GBR.Aperture.type">
            <summary>
            Defines an aperture type
            </summary>
        </member>
        <member name="F:CADImport.GBR.Aperture.values">
            <summary>
            The aperture property field.
            For more information please see Gerber RS-274X Format User’s Guide.
            </summary>
        </member>
        <member name="F:CADImport.GBR.Aperture.name">
            <summary>
            The aperture name field
            </summary>
        </member>
        <member name="T:CADImport.GBR.ApertureType">
            <summary>
            Enum of aperture types
            </summary>
        </member>
        <member name="F:CADImport.GBR.ApertureType.Circle">
            <summary>
            Circle aperture type
            </summary>
        </member>
        <member name="F:CADImport.GBR.ApertureType.Rectangle">
            <summary>
            Rectangle aperture type
            </summary>
        </member>
        <member name="F:CADImport.GBR.ApertureType.Obround">
            <summary>
            Oval aperture type
            </summary>
        </member>
        <member name="F:CADImport.GBR.ApertureType.RegularPolygon">
            <summary>
            Regular polygon aperture type
            </summary>
        </member>
        <member name="F:CADImport.GBR.ApertureType.FromFile">
            <summary>
            Aperture type specified in a file
            </summary>
        </member>
        <member name="T:CADImport.GBR.EndGBRProgramEventHandler">
            <summary>
            A delegate on the basis of which stop/finish loading of GBR file event is set
            </summary>
        </member>
        <member name="T:CADImport.Export.CGMExportSettings">
            <summary>
            Represents settings for exporting the current CAD file into CGM format.
            </summary>
        </member>
        <member name="M:CADImport.Export.CGMExportSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.CGMExportSettings">CGMExportSettings</see> class.
            </summary>
        </member>
        <member name="P:CADImport.Export.CGMExportSettings.CurvePrecision">
            <summary>
            Gets or sets a value specifying precision of curves in drawing units.
            </summary>
            <remarks>Default value is 0, CGM with integer precision created on export.
            Specifying a positive value will result in CGM export with real precision.</remarks>
        </member>
        <member name="T:CADImport.Export.CADToCGM">
            <summary>
            Provides functionality for exporting the current CAD file into CGM format.
            </summary>
        </member>
        <member name="M:CADImport.Export.CADToCGM.#ctor(CADImport.CADImage)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.CADToCGM">CADToCGM</see> class.
            </summary>
            <param name="image">A CAD image to drawing.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassic">
            <summary>
            PkzipClassic embodies the classic or original encryption facilities used in Pkzip archives.
            While it has been superceded by more recent and more powerful algorithms, its still in use and 
            is viable for preventing casual snooping
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassic.GenerateKeys(System.Byte[])">
            <summary>
            Generates new encryption keys based on given seed
            </summary>
            <param name="seed">The seed value to initialise keys with.</param>
            <returns>A new key value.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase">
            <summary>
            PkzipClassicCryptoBase provides the low level facilities for encryption
            and decryption using the PkzipClassic algorithm.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.TransformByte">
            <summary>
            Transform a single byte 
            </summary>
            <returns>
            The transformed value
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.SetKeys(System.Byte[])">
            <summary>
            Set the key schedule for encryption/decryption.
            </summary>
            <param name="keyData">The data use to set the keys from.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.Reset">
            <summary>
            Reset the internal state.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for encryption.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform"></see>
            </summary>
            <param name="keyBlock">The key block to use.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for decryption.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform"></see>.
            </summary>
            <param name="keyBlock">The key block to decrypt with.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged">
            <summary>
            Defines a wrapper object to access the Pkzip algorithm. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.GenerateIV">
            <summary>
            Generate an initial vector.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.GenerateKey">
            <summary>
            Generate a new random key.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Create an encryptor.
            </summary>
            <param name="rgbKey">The key to use for this encryptor.</param>
            <param name="rgbIV">Initialisation vector for the new encryptor.</param>
            <returns>Returns a new PkzipClassic encryptor</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Create a decryptor.
            </summary>
            <param name="rgbKey">Keys to use for this new decryptor.</param>
            <param name="rgbIV">Initialisation vector for the new decryptor.</param>
            <returns>Returns a new decryptor.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.BlockSize">
            <summary>
            Get / set the applicable block size in bits.
            </summary>
            <remarks>The only valid block size is 8.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.LegalKeySizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">key sizes.</see>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.LegalBlockSizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">block sizes</see>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.Key">
            <summary>
            Get / set the key value applicable.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.StrangeCRC">
            <summary>
            Bzip2 checksum algorithm
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Checksums.StrangeCRC"></see>
            </summary>	
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Reset">
            <summary>
            Reset the state of Crc.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Int32)">
            <summary>
            Update the Crc value.
            </summary>
            <param name="value">data update is based on</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[])">
            <summary>
            Update Crc based on a block of data
            </summary>
            <param name="buffer">The buffer containing data to update the crc with.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update Crc based on a portion of a block of data
            </summary>
            <param name="buffer">block of data</param>
            <param name="offset">index of first byte to use</param>
            <param name="count">number of bytes to use</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Value">
            <summary>
            Get the current Crc value.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform">
            <summary>
            ZipNameTransform transforms names as per the Zip file naming convention.
            </summary>
            <remarks>The use of absolute names is supported although its use is not valid 
            according to Zip naming conventions, and should not be used if maximum compatability is desired.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform"></see>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform"></see>
            </summary>
            <param name="trimPrefix">The string to trim from the front of paths if found.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.TransformDirectory(System.String)">
            <summary>
            Transform a windows directory name according to the Zip file naming conventions.
            </summary>
            <param name="name">The directory name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.TransformFile(System.String)">
            <summary>
            Transform a windows file name according to the Zip file naming conventions.
            </summary>
            <param name="name">The file name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.MakeValidName(System.String,System.Char)">
            <summary>
            Force a name to be valid by replacing invalid characters with a fixed value
            </summary>
            <param name="name">The name to force valid</param>
            <param name="replacement">The replacement character to use.</param>
            <returns>Returns a valid name</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.IsValidName(System.String,System.Boolean)">
            <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
            <param name="name">The name to test.</param>
            <param name="relaxed">If true checking is relaxed about windows file names and absolute paths.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>Zip path names are actually in Unix format, and should only contain relative paths.
            This means that any path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid for a file where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.IsValidName(System.String)">
            <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>Zip path names are actually in unix format,
            and should only contain relative paths if a path is present.
            This means that the path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.TrimPrefix">
            <summary>
            Get/set the path prefix to be trimmed from paths if present.
            </summary>
            <remarks>The prefix is trimmed before any conversion from
            a windows path is done.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform">
            <summary>
            WindowsNameTransform transforms <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> names to windows compatible ones.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.MaxPath">
            <summary>
             The maximum windows path name permitted.
            </summary>
            <remarks>This may not valid for all windows systems - CE?, etc but I cant find the equivalent in the CLR.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.#ctor(System.String)">
            <summary>
            Initialises a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform"/>
            </summary>
            <param name="baseDirectory"></param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform"/>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.TransformDirectory(System.String)">
            <summary>
            Transform a Zip directory name to a windows directory name.
            </summary>
            <param name="name">The directory name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.TransformFile(System.String)">
            <summary>
            Transform a Zip format file name to a windows style one.
            </summary>
            <param name="name">The file name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.IsValidName(System.String)">
            <summary>
            Test a name to see if it is a valid name for a windows filename as extracted from a Zip archive.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>The filename isnt a true windows path in some fundamental ways like no absolute paths, no rooted paths etc.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.#cctor">
            <summary>
            Initialise static class information.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.MakeValidName(System.String,System.Char)">
            <summary>
            Force a name to be valid by replacing invalid characters with a fixed value
            </summary>
            <param name="name">The name to make valid</param>
            <param name="replacement">The replacement character to use for any invalid characters.</param>
            <returns>Returns a valid name</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.BaseDirectory">
            <summary>
            Gets or sets a value containing the target directory to prefix values with.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.TrimIncomingPaths">
            <summary>
            Gets or sets a value indicating wether paths on incoming values should be removed.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.WindowsNameTransform.Replacement">
            <summary>
            Gets or set the character to replace invalid characters during transformations.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="value">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="length">length of pattern to copy</param>
            <param name="distance">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyStored(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="length">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dictionary">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="length">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:CADImport.CADImportForms.RegForm">
            <summary>
            Represents a form for the registration dialog.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.RegForm.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CADImport.CADImportForms.RegForm"/> class.
            </summary>
        </member>
        <member name="F:CADImport.CADImportForms.RegForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.RegForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CADImport.CADImportForms.RegForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.RegForm.MultipleLanguagesPath">
            <summary>
            Gets or sets a path to the language files directory
            </summary>
        </member>
        <member name="P:CADImport.CADImportForms.RegForm.LngFileName">
            <summary>
            Gets or sets a name of the language file
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.ClipRect">
            <summary>
            Represents the <b>Rectangle</b> tool.
            </summary>
            <remarks>The <b>Rectangle</b> tool is a visual tool for selecting an area, its zooming and possible subsequent saving.</remarks>
        </member>
        <member name="M:CADImport.FaceModule.ClipRect.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.FaceModule.ClipRect">ClipRect</see> class.
            </summary>
            <param name="aParent">A <see cref="T:System.Windows.Forms.Control">Control</see> on which a <b>Rectangle</b> tool will appear.</param>
            <remarks>By default, the Rectangle tool is 100 pixels wide and 100 pixels high.</remarks>
        </member>
        <member name="M:CADImport.FaceModule.ClipRect.#ctor(System.Windows.Forms.Control,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.FaceModule.ClipRect">ClipRect</see> class.
            </summary>
            <param name="aParent">A <see cref="T:System.Windows.Forms.Control">Control</see> on which a <b>Rectangle</b> tool will appear.</param>
            <param name="aCurrentRectanle">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object representing an image area selected by this <b>Rectangle</b> tool.</param>
            <param name="aColor">A <see cref="T:System.Drawing.Color">Color</see> of the <b>Rectangle</b> tool's bounding lines.</param>
        </member>
        <member name="M:CADImport.FaceModule.ClipRect.EnableRect(CADImport.FaceModule.RectangleType)">
            <summary>
            Enables the <b>Rectangle</b> tool.
            </summary>
            <param name="aType">A <see cref="T:CADImport.FaceModule.RectangleType">RectangleType</see> value specifying a working mode for this <b>Rectangle</b> tool.</param>
        </member>
        <member name="M:CADImport.FaceModule.ClipRect.EnableRect(CADImport.FaceModule.RectangleType,System.Drawing.Rectangle)">
            <summary>
            Enables the <b>Rectangle</b> tool.
            </summary>
            <param name="aType">A <see cref="T:CADImport.FaceModule.RectangleType">RectangleType</see> value specifying a working mode for this <b>Rectangle</b> tool.</param>
            <param name="aRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object representing an image area selected by this <b>Rectangle</b> tool.</param>
        </member>
        <member name="M:CADImport.FaceModule.ClipRect.DisableRect">
            <summary>
            Disables the <b>Rectangle</b> tool.
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.ClipRect.DoLostFocus(System.Object,System.EventArgs)">
            <summary>
            Handles the <b>LostFocus</b> event.
            </summary>
            <param name="sender">A control on which the <b>Rectangle</b> tool is located and which lost focus.</param>
            <param name="e">An <see cref="T:System.EventArgs">EventArgs</see> object that provides data</param>
        </member>
        <member name="P:CADImport.FaceModule.ClipRect.MultySelect">
            <summary>
            Gets or sets the multiple selection mode
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.ClipRect.Type">
            <summary>
            Gets or sets a working mode for the <b>Rectangle</b> tool.
            </summary>
            <value>A <see cref="T:CADImport.FaceModule.RectangleType">RectangleType</see> value.</value>
        </member>
        <member name="P:CADImport.FaceModule.ClipRect.MarkerSize">
            <summary>
            Gets or sets the markers' size of the <b>Rectangle</b> tool.
            </summary>
            <value>A <see cref="T:System.Drawing.Size">Size</see> of the <b>Rectangle</b> tool's markers.</value>
            <remarks>The markers' size is set in pixels.</remarks>
        </member>
        <member name="P:CADImport.FaceModule.ClipRect.ClientRectangle">
            <summary>
            Gets or sets an image area selected by the <b>Rectangle</b> tool.
            </summary>
            <value>A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object representing an image area selected by the <b>Rectangle</b> tool.</value>
        </member>
        <member name="P:CADImport.FaceModule.ClipRect.Color">
            <summary>
            Gets or sets a color of the <b>Rectangle</b> tool's bounding lines.
            </summary>
            <value>A <see cref="T:System.Drawing.Color">Color</see> of the <b>Rectangle</b> tool's bounding lines.</value>
        </member>
        <member name="P:CADImport.FaceModule.ClipRect.Enabled">
            <summary>
            Gets a value indicating whether the <b>Rectangle</b> tool is enabled.
            </summary>
            <value>A boolean value indicating whether the <b>Rectangle</b> tool is enabled.</value>
        </member>
        <member name="T:CADImport.FaceModule.RectangleType">
            <summary>
            Specifies the working modes for the Rectangle tool.  
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.RectangleType.Zooming">
            <summary>
            Zooms the area selected by the Rectangle tool to fit the viewer window.
            </summary>
        </member>
        <member name="F:CADImport.FaceModule.RectangleType.Selecting">
            <summary>
            Selects an image area for sending to the clipboard or subsequent saving to a file.
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.PenXorDrawing">
            <summary>
            Auxiliary class for drawing in xor mode
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.PenXorDrawing.DrawXORRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Draws a rectangle in a xor mode on the specified window unit
            </summary>
            <param name="x1">The extreme left position</param>
            <param name="y1">The extreme top position</param>
            <param name="x2">The extreme right position</param>
            <param name="y2">The extreme bottom position</param>
            <param name="fill">Draw filled</param>
            <param name="rect">Draw frame</param>
            <param name="control">Control, where the drawing is implemented</param>
            <param name="dashed">Draw dashed</param>
        </member>
        <member name="M:CADImport.FaceModule.PenXorDrawing.DrawXORRectangles(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean,System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Draws two rectangles in a xor mode on the specified window unit
            </summary>
            <param name="rect1">The first rectangle</param>
            <param name="rect2">The second rectangle</param>
            <param name="fill">Draw filled</param>
            <param name="control">Control, where the drawing is implemented</param>
            <param name="dashed">Draw dashed lines</param>
        </member>
        <member name="M:CADImport.FaceModule.PenXorDrawing.DrawXORLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Draws a line in a xor mode on the specified window unit
            </summary>
            <param name="x1">The extreme left position</param>
            <param name="y1">The extreme top position</param>
            <param name="x2">The extreme right position</param>
            <param name="y2">The extreme bottom position</param>
            <param name="control">Control, where the drawing is implemented</param>
            <param name="applyOrtho">True if ortho correction wasn't applied to the coordinates.</param>
        </member>
        <member name="M:CADImport.FaceModule.PenXorDrawing.DrawXORLines(System.Drawing.Point[],System.Windows.Forms.Control)">
            <summary>
            Draws lines in a xor mode on the specified window unit
            </summary>
            <param name="points">A set of points lines are drawn by.</param>
            <param name="control">Control, where the drawing is implemented</param>
        </member>
        <member name="T:CADImport.CADImportControls.CADEditorControl">
            <summary>
            Represents CAD files editor component
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.OnChangeLanguage(System.String,System.Int32)">
            <summary>
            Invokes <see cref="E:CADImport.CADImportForms.OptionsForm.ChangeLanguage">ChangeLanguage</see> event
            </summary>
            <param name="val">Language to set</param>
            <param name="index">An index of the language in the language list</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.OnChangeEntityPanelVisible(System.Boolean)">
            <summary>
            Invokes <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeEntityPanelVisible">ChangeEntityPanelVisible</see> event
            </summary>
            <param name="val">A value of the visibility of entities tree and properties inspector</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.OnChangeEntityPropertyGridVisible(System.Boolean)">
            <summary>
            Invokes <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeEntityPropertyGridVisible">ChangeEntityPropertyGridVisible</see> event
            </summary>
            <param name="val">Setting value of the visibility of the entity properties inspector </param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.OnChangeToolsPanelVisible(System.Boolean)">
            <summary>
            Invokes <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeToolsPanelVisible">ChangeToolsPanelVisible</see> event
            </summary>
            <param name="val">Setting value of the tools panel visibility</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.OnChangeStatusBarVisible(System.Boolean)">
            <summary>
            Invokes <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeStatusBarVisible">ChangeStatusBarVisible</see> event
            </summary>
            <param name="val">A setting value of the status panel visibility</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.OnChangeBackgroundColor(System.Boolean)">
            <summary>
            Invokes <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeBackgroundColor">ChangeBackgroundColor</see> event
            </summary>
            <param name="val">If <b>true</b> then background color of the <see cref="T:CADImport.CADImage">CADImage</see> is black,
            else the background color is white</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.OnChangeDrawingColors(System.Boolean)">
            <summary>
            Invokes <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeDrawingColors">ChangeDrawingColors</see> event
            </summary>
            <param name="val">If <b>false</b> then the drawing is drawn in black-and-white, else in color</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.OnChangeSnapEnable(System.Boolean)">
            <summary>
            Invokes <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeSnapEnable">ChangeSnapEnables</see> event
            </summary>
            <param name="val">Snap is disabled if <b>false</b>, else snap is enabled</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.OnChangeTextShow(System.Boolean)">
            <summary>
            Invokes <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeTextShow">ChangeTextShow</see> event
            </summary>
            <param name="val">If <b>false</b> - texts are disabled, else - enabled</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.OnChangeDimensionShow(System.Boolean)">
            <summary>
            Invokes <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeDimensionShow">ChangeDimensionShow</see> event
            </summary>
            <param name="val">If <b>false</b> - dimensions are disabled, else - enabled</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.OnChangeLineWeightShow(System.Boolean)">
            <summary>
            Invokes <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeLineWeightShow">ChangeLineWeightShow</see> event
            </summary>
            <param name="val">If <b>false</b> - line weight is disabled, else - enabled</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.OnEndLoadFile(System.Boolean)">
            <summary>
            Invokes <see cref="E:CADImport.CADImportControls.CADEditorControl.EndLoadFile">EndLoadFile</see> event
            </summary>
            <param name="val">If <b>false</b> - the loading is unsuccessful, else - successful</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADImportControls.CADEditorControl">CADEditorControl</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.Dispose(System.Boolean)">
             <summary>
             Cleans up any resources being used.
             </summary>
             <param name="disposing">A value indicating if both managed and unmanaged resources have to be released (<b>true</b>) or only unmanaged (<b>false</b>). 
            </param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.Zoom(System.Single)">
            <summary>
            Adjusts the image size according to the specified scale.
            </summary>
            <remarks>
            If the scale value is more than one the image size increases; otherwise,
            decreases.
            </remarks>
            <param name="i">A scale value.</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.Shift">
            <summary>
            Moves an image at start position for new sizes, when scale changes.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages and allows the user to zoom in(out) the CAD image by mouse wheel.
            </summary>
            <param name="m">The Windows <see cref="T:System.Windows.Forms.Message">Message</see> to process.</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.MoveEntity(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves a selected entitiy to the specified position
            </summary>
            <param name="x1">Start X position</param>
            <param name="y1">Start Y position</param>
            <param name="x2">End X position</param>
            <param name="y2">End Y position</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.ClearSelection">
            <summary>
            Clears selection and redraws entities
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SetAllFormsLanguageSettings(System.String,System.String)">
            <summary>
            Sets the current language file for all child forms
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.ChangeControlState">
            <summary>
            Sets the current mode of controls
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SetNewEntityPosition">
            <summary>
            Sets a new position for <see cref="T:CADImport.CADEntity"/> on offsetting
            using <see cref="P:CADImport.CADImportControls.CADEditorControl.StartPoint">start</see> and 
            <see cref="P:CADImport.CADImportControls.CADEditorControl.EndPoint">end</see> positions
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SetNewMarkerPosition">
            <summary>
            Sets a new position for <see cref="T:CADImport.CADEntity"/> 
            on editing by <see cref="T:CADImport.Professional.Marker">markers</see>
            using <see cref="P:CADImport.CADImportControls.CADEditorControl.StartPoint">start</see> and 
            <see cref="P:CADImport.CADImportControls.CADEditorControl.EndPoint">end</see> positions
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.ClearCADImage">
            <summary>
            Clears current <see cref="P:CADImport.CADImportControls.CADEditorControl.Image">CADImage</see> object
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SetCADImageOptions">
            <summary>
            Sets current properties for <see cref="P:CADImport.CADImportControls.CADEditorControl.Image">CADImage</see> for loading file
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SetWhiteBackGround">
            <summary>
            Sets white color for CADPictureBox background
            and appropriate lines color on default
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SetBlackBackGround">
            <summary>
            Sets black color for CADPictureBox background
            and appropriate lines color on default
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.LoadFile(System.String)">
            <summary>
            Loads a CAD file into the main application's form.
            </summary>		
            <param name="fileName">File name</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.ShowRect(CADImport.DRect)">
            <summary>
            
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.LoadFile(System.Boolean)">
            <summary>
            Loads a CAD file into the main application's form.
            </summary>
            <param name="dlg">A value indicating if an <see cref="T:System.Windows.Forms.OpenFileDialog">OpenFileDialog</see> 
            box is invoked for selecting and loading a CAD file. <b>true</b>, if an <see cref="T:System.Windows.Forms.OpenFileDialog">OpenFileDialog</see> 
            box is invoked; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.ViewLayouts">
            <summary>
            Creates a list of layouts of the CAD image and sets the current layout. 
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.EnableButton(System.Boolean)">
            <summary>
            Enables or disables buttons of the toolbar and menu items of the main menu.
            </summary>
            <param name="aVal"><b>true</b> if the buttons and menu items are enabled; <b>false</b> if they are disabled.</param>
            <remarks>The buttons and menu items are enabled after loading a CAD file and become disabled after closing the file.</remarks>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.DoZoomIn">
            <summary>
            Increases a scale of the CAD image to twice.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.DoZoomOut">
            <summary>
            Decreases a scale of the CAD image to twice.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SetScale(System.Single)">
            <summary>
            Sets the new scale factor
            </summary>
            <param name="valsc">A new value of the scale factor</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.DrawCADImage(System.Drawing.Graphics,System.Windows.Forms.Control)">
            <summary>
            Draws a CAD image from the loaded CAD file.
            </summary>
            <param name="gr">A <see cref="T:System.Drawing.Graphics">Graphics</see> object used to draw the CAD entities.</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SetSizePictureBox(System.Drawing.Size)">
            <summary>
            Sets a scroll region for <see cref="T:CADImport.FaceModule.CADPictureBox">CADPictureBox</see>
            </summary>
            <param name="sz">Size to set</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.ChancelMove(System.Int32,System.Int32)">
            <summary>
            Verifies suitability of the entity moving
            </summary>
            <param name="x">X axis position</param>
            <param name="y">Y axis position</param>
            <returns>Returns <b>true</b> if the offset is minimal</returns>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.UseClipRect">
            <summary>
            Enables <see cref="N:CADImport.FaceModule">ClipRect</see> tool
            for <see cref="T:CADImport.CADEntityCollection">set of entities</see> selection
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SelectEntity(System.Int32,System.Int32)">
            <summary>
            Selects an entity by the specified coordinates.
            Sets a number of settings on entity selection.
            </summary>
            <param name="x">X axis position</param>
            <param name="y">Y axis position</param>
            <returns>Returns <b>true</b> if there is an entity in specified position and it is selected</returns>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.EndAddEntity(System.Boolean)">
            <summary>
            Finishes adding of the <see cref="T:CADImport.CADEntity"/>
            </summary>
            <param name="val">A finishing flag of the <see cref="T:CADImport.CADEntity"/>entity adding</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.ChangeEntityOnMouseMove(System.Drawing.Point)">
            <summary>
            Changes <see cref="T:CADImport.CADEntity"/> position by
            changing <see cref="T:CADImport.CADEntity">marker position</see> or
            <see cref="T:CADImport.CADEntity">entity dragging</see> 
            </summary>
            <param name="pt">New coordinates</param>
            <returns>Returns <b>true</b> if the changing is successful</returns>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.GetRealPoint(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets a three-dimensional point of the current CAD image from the specified screen point.
            </summary>
            <param name="x">An X coordinate of the screen point.</param>
            <param name="y">An Y coordinate of the screen point.</param>
            <param name="useGrid">Defines if the point will be reduced to a grid node.</param>
            <returns>A three-dimensional point.</returns>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.White_Click">
            <summary>
            Paints the CAD image background in the white color.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.Black_Click">
            <summary>
            Paints the CAD image background in the black color.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SetSnapMode(System.Boolean)">
            <summary>
            Sets the snap mode
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.UndoChangeEntity">
            <summary>
            Undoes last changing of the entity
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.RedoChangeEntity">
            <summary>
            Performs the last undid changing of the entity
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.DeleteSelectedEntities">
            <summary>
            Deletes selected entities
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.CalculateNewSizeImage">
            <summary>
            Recalculates the current image sizes.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.CreateNewImage">
            <summary>
            Create a new <see cref="T:CADImport.CADImage">CADImage</see> object
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.ReOpen">
            <summary>
            Reopens a file after selecting or deselecting SHX fonts.
            </summary>
            <remarks>This method is also called when the paths to the 
            files containing SHX fonts have been edited in the <b>SHX Paths</b> window 
            invoked by the <b>SHX Fonts</b> menu item.</remarks>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.ResetScaling">
            <summary>
            Sets scale and the position of the CAD image to its original values.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SetVisibleLayer(System.Boolean,System.Int32)">
            <summary>
            Sets <see cref="P:CADImport.CADLayer.Visible">CADLayer.Visible</see> parameter for the layer
            by the specified <see cref="T:CADImport.CADLayer">layer</see> index
            </summary>
            <param name="visible">Setting value</param>
            <param name="index">An index of the layer in the <see cref="P:CADImport.CADConverter.Layers">layers</see> collection</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SetFreezeLayer(System.Boolean,System.Int32)">
            <summary>
            Sets <see cref="P:CADImport.CADLayer.Frozen">CADLayer.Frozen</see> parameter for the layer
            by the specified <see cref="T:CADImport.CADLayer">layer</see> index
            </summary>
            <param name="visible">Setting value</param>
            <param name="index">An index of the layer in the <see cref="P:CADImport.CADConverter.Layers">layers</see> collection</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SetColorLayer(System.Drawing.Color,System.Int32)">
            <summary>
            Sets a layer color by the specified <see cref="T:CADImport.CADLayer">layer</see> index
            </summary>
            <param name="color">Setting <see cref="T:System.Drawing.Color">color</see></param>
            <param name="index">An index of the layer in the <see cref="P:CADImport.CADConverter.Layers">layers</see> collection</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.DoResize(CADImport.CADImage,System.Drawing.PointF@,System.Windows.Forms.UserControl,System.Drawing.SizeF@,System.Boolean)">
            <summary>
            Resizes the CAD image to fit drawing's bounds.
            </summary>
            <remarks>This method is invoked when changing layout or working with 3D Orbit tool.</remarks>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.CloseFile">
            <summary>
            Closes a currently open CAD file.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.chLay_ItemCheck(System.Object,System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
            Makes the layers of the loaded CAD image visible or invisible.
            </summary>
            <param name="sender">A <see cref="T:System.Windows.Forms.CheckedListBox">CheckedListBox</see> that initializes changing a visibility of the layers.</param>
            <param name="e">An <see cref="T:System.Windows.Forms.ItemCheckEventArgs">ItemCheckEventArgs</see> object that provides data for the event of changing a layer visibility.</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.OnResize(System.EventArgs)">
            <summary>
            Recalculates image drawing area
            </summary>
            <param name="e">OnResize event parameter</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SaveSettings">
            <summary>
            Saves application settings
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.LoadSettings">
            <summary>
            Loads saved application settings
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SaveAsDXF(System.Boolean)">
            <summary>
            Saves image as DXF
            </summary>
            <param name="showdlg">Show dialog</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SaveAsImage(System.String)">
            <summary>
            Saves current image
            </summary>
            <param name="fileName">File name</param>
            <remarks><p>This method can be invoked from the toolbar and from the main menu.</p>
            <p>Images can be saved in the following formats: JPG, BMP, TIFF, GIF, EMF.</p></remarks>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SaveAsImage(System.Boolean)">
            <summary>
            Invokes a <see cref="T:System.Windows.Forms.SaveFileDialog">SaveFileDialog</see> box where 
            user can select a directory and format for saving the current CAD image.
            </summary>
            <param name="showdlg">Show SaveFileDialog</param>
            <remarks><p>This method can be invoked from the toolbar and from the main menu.</p>
            <p>Images can be saved in the following formats: JPG, BMP, TIFF, GIF, EMF.</p></remarks>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.PutToClipboard">
            <summary>
            Saves image to Clipboard
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.ChangeTreeVisiblity(System.Boolean)">
            <summary>
            Shows or hides a panel that contains the entities tree.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.DoBlackColor">
            <summary>
            Displays a CAD image in black and white colors.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.DoNormalColor">
            <summary>
            Displays a CAD image in all used colors.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.ChangeDimensionsVisiblity(System.Boolean)">
            <summary>
            Shows or hides dimensions in the current CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.ChangeTextsVisiblity(System.Boolean)">
            <summary>
            Shows or hides texts in the current CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.ChangeShowLineWeight(System.Boolean)">
            <summary>
            Alternately changes a boolean value that indicates if a thickness of lines is determined by the file data.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.ShowCustomPrintPreviewDialog">
            <summary>
            Shows CustomPrintPreview dialog
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.ShowPrintPreviewDialog">
            <summary>
            Shows PrintPreview dialog
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.NewProtectionSettings(System.Collections.SortedList)">
            <summary>
            Fills the specified list with the current protection settings.
            </summary>
            <param name="settingsLst">A <see cref="T:System.Collections.SortedList">SortedList</see> to fill with the current protection settings.</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.Register">
            <summary>
            Registers the <b>CADImportNet</b> library.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.Unregister">
            <summary>
            Closes all registration resources.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.SaveProtectionSettings(System.Collections.SortedList)">
            <summary>
            Makes the specified settings the current ones.
            </summary>
            <param name="settingsLst">A <see cref="T:System.Collections.SortedList">SortedList</see> containing the settings that will be made current.</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADEditorControl.InvalidateImage">
            <summary>
            Invalidates a specific region of the control and causes a paint message to be sent to the control.
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.PictureBox">
            <summary>
            Gets <see cref="T:CADImport.FaceModule.CADPictureBox">CADPictureBox</see> control that is
            used for visualization of drawings.
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADEditorControl.ChangeLanguage">
            <summary>
            Appears when the language of the application was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADEditorControl.ChangeEntityPanelVisible">
            <summary>
            Occurs when visibility of the entity tree was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADEditorControl.ChangeEntityPropertyGridVisible">
            <summary>
            Occurs when visibility of the entity properties inspector was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADEditorControl.ChangeToolsPanelVisible">
            <summary>
            Occurs when visibility of the tool panel was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADEditorControl.ChangeStatusBarVisible">
            <summary>
            Occurs when visibility of the status panel was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADEditorControl.ChangeBackgroundColor">
            <summary>
            Occurs when the background of the drawing was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADEditorControl.ChangeDrawingColors">
            <summary>
            Occurs when the color type of the drawing was changed (black-and-white/color)
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADEditorControl.ChangeSnapEnable">
            <summary>
            Occurs when the snap was enabled or disabled
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADEditorControl.ChangeTextShow">
            <summary>
            Occurs when displaying of the texts was enabled or disabled
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADEditorControl.ChangeDimensionShow">
            <summary>
            Occurs when displaying of the dimensions was enabled or disabled
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADEditorControl.ChangeLineWeightShow">
            <summary>
            Occurs when displaying of the lines weight was enabled or disabled
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADEditorControl.EndLoadFile">
            <summary>
            Occurs when loading of the file was finished
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.ClipRectangle">
            <summary>
            Gets or sets an <see cref="T:CADImport.FaceModule.ClipRect">area selection tool</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.ImageScale">
            <summary>
            Gets or sets scale of the drawing image
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.ImageBaseSize">
            <summary>
            Gets or sets base dimensions of the image drawing area
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.ImageRectangleF">
            <summary>
            Gets the current size and position of the drawing image as 
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.ImageDRect">
            <summary>
            Gets the current size and position of the drawing image
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.ImagePosition">
            <summary>
            Gets or sets a position of the drawing image
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.Active">
            <summary>
            Gets a parameter that indicates if the <see cref="!:CADImportNetDemos.CADEditorDemo.MainForm">MainForm</see> window is active
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.EditorCADPictureBox">
            <summary>
            Gets <see cref="T:CADImport.FaceModule.CADPictureBox">CADPictureBox</see> control, where an image is drawn
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.StartPoint">
            <summary>
            Gets or sets the entity point which was selected before offsetting or editing by marker
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.PreviousImagePosition">
            <summary>
            Gets or sets previous position of the drawing image
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.PreviousImageScale">
            <summary>
            Gets or sets previous scale of the drawing image
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.EndPoint">
            <summary>
            Gets or sets the point that belongs to entity after offsetting or editing by marker
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.Image">
            <summary>
            Gets <see cref="T:CADImport.CADImage">CADImage</see> object
            that corresponds the main class for reading/drawing/viewing
            of cad file contents
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.RegistrationForm">
            <summary>
            Gets or sets the registration window
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.OptionsForm">
            <summary>
            Gets or sets <see cref="T:CADImport.CADImportForms.EditorOptions">settings window</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.LayerForm">
            <summary>
            Gets or sets <see cref="T:CADImport.CADImportForms.LayerForm">layers settings window</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.AboutForm">
            <summary>
            Gets <see cref="T:CADImport.CADImportForms.AboutForm">'About' window</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.SHXForm">
            <summary>
            Gets or sets <see cref="T:CADImport.CADImportForms.SHXForm">shx fonts settings window</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.PrintingForm">
            <summary>
            Gets or sets <see cref="T:CADImport.Printing.PrintingForm">preview and printing settings window</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.SetRasterSizeForm">
            <summary>
            Gets or sets the <see cref="T:CADImport.CADImportForms.SetRasterSizeForm">settings window for raster images saving</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.ColorDraw">
            <summary>
            Gets a parameter to draw an image in color or black-and-white mode
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.DimensionVisible">
            <summary>
            Gets or sets dimentions visibility
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.TextVisible">
            <summary>
            Gets or sets text visibility
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.ShowLineWeight">
            <summary>
            Gets or sets lines weight visibility
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.EnableSnap">
            <summary>
            Gets or sets enabling or disabling of the snap
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.EntitiesCreator">
            <summary>
            Gets or sets the <see cref="T:CADImport.Professional.EntitiesCreator">visual entities creating object</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.ToolsPanelVisible">
            <summary>
            Gets or sets tools panel visibility
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.ToolsPanel">
            <summary>
            Gets or sets tools panel
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.StatusBarPanelVisible">
            <summary>
            Gets or sets visibility of the status bar panel
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.StatusBarPanel">
            <summary>
            Gets or sets status bar panel
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.EntityPropertyGridVisible">
            <summary>
            Gets or sets visibility of the entity properties grid
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.EntityPropertyGrid">
            <summary>
            Gets or sets entity properties grid
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.PropertyEntityPanelVisible">
            <summary>
            Gets or sets visibility of the entity properties panel
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.OutFileName">
            <summary>
            Gets or sets a name of the file to save
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.InFileName">
            <summary>
            Gets or sets a name of the file to open
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.RegForm">
            <summary>
            Gets the <see cref="T:CADImport.CADImportForms.RegForm">registration window</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADEditorControl.CreateNewEntity">
            <summary>
            Gets <b>true</b> if entity creating mode is enabled at the moment
            </summary>
        </member>
        <member name="T:CADImport.SelectionEntityMode">
            <summary>
            Specifies a state of the Selection tool.
            </summary>
        </member>
        <member name="F:CADImport.SelectionEntityMode.Disabled">
            <summary>
            The Selection tool is disabled.
            </summary>
        </member>
        <member name="F:CADImport.SelectionEntityMode.Enabled">
            <summary>
            The Selection tool is enabled.
            </summary>
        </member>
        <member name="P:CADImport.SelectionMatrix.Size">
            <summary>
            Bitmap size 
            </summary>
        </member>
        <member name="T:CADImport.CADSelector">
            <summary>
            Provides functionality for selecting entities on a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADSelector.#ctor(CADImport.CADImage)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADSelector">CADSelector</see> class. 
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:CADImport.CADSelector.SelectExt(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Selects an entity of the CAD image at the specified point.
            </summary>
            <param name="x">An X coordinate of the point at which the entity to be selected is located.</param>
            <param name="y">An Y coordinate of the point at which the entity to be selected is located.</param>
            <param name="clearPrevSelection">Clears selection of objects if <b>true</b>; adds to selected if <b>false</b></param>
            <param name="visualSelect">Visual select entity</param>
            <returns>A <see cref="T:CADImport.CADEntity">CADEntity</see> located at the specified point, or <b>null</b> 
            if nothing is located at the specified point.</returns>
            <remarks>The X and Y coordinates are measured in pixels.
            This method requires SelectionMode to be switched to be set.
            </remarks>
        </member>
        <member name="M:CADImport.CADSelector.DoSelectEntities(System.Collections.SortedList)">
            <summary>
            Selects inserted <see cref="T:System.Collections.SortedList">list</see> of entities
            </summary>
            <param name="lst">Inserting <see cref="T:System.Collections.SortedList">list</see> of entities</param>
        </member>
        <member name="M:CADImport.CADSelector.DoSelectEntity(CADImport.CADEntity)">
            <summary>
            Selects an entity.
            </summary>
            <param name="ent"></param>
        </member>
        <member name="M:CADImport.CADSelector.DoSelectEntities(CADImport.CADEntityCollection)">
            <summary>
            Selects inserted <see cref="T:CADImport.CADEntityCollection">list</see> of entities
            </summary>
            <param name="lst">Inserting <see cref="T:CADImport.CADEntityCollection">list</see> of entities</param>
        </member>
        <member name="M:CADImport.CADSelector.MultipleSelect(CADImport.DRect,System.Boolean,System.Boolean)">
             <summary>
             Providing CAD image entities' multiple selection within a specified <see cref="T:System.Drawing.RectangleF">rectangle</see>.
             </summary>
            <param name="clearSelCollection">Clear select collection</param>
            <param name="rect">Multiple selection <see cref="T:System.Drawing.RectangleF">rectangle</see></param>
            <param name="visualSelect">Visual selecting</param>
        </member>
        <member name="M:CADImport.CADSelector.Select(System.Int32,System.Int32)">
            <summary>
            Selects an entity of the CAD image at the specified point.
            </summary>
            <param name="x">An X coordinate of the point at which the entity to be selected is located.</param>
            <param name="y">An Y coordinate of the point at which the entity to be selected is located.</param>
            <remarks>The X and Y coordinates are measured in pixels.
            This method requires SelectionMode to be switched to be set.
            </remarks>
        </member>
        <member name="M:CADImport.CADSelector.MultipleSelectExt(CADImport.DRect,System.Boolean,System.Boolean)">
            <summary>
            Selects all entities inside the inserted rectangle
            </summary>
            <param name="rect">Inserting rectangle</param>
            <param name="clearSelCollection">Clears <see cref="P:CADImport.CADImage.SelectedEntities"> SelectedEntities </see> object if true</param>
            <param name="visualSelect">Represents visual selection if true</param>
            <returns>Returns list of selected entities</returns>
        </member>
        <member name="M:CADImport.CADSelector.AddEntityToSelectCollection(CADImport.CADEntity)">
            <summary>
            Adds entity to the selected list of entities
            </summary>
            <param name="ent">Adding entity</param>
        </member>
        <member name="M:CADImport.CADSelector.ClearSelectCollection">
            <summary>
            Clears collection of selected entities
            </summary>
        </member>
        <member name="M:CADImport.CADSelector.InvalidateSelectEntity(System.Windows.Forms.Control,System.Single)">
            <summary>
            Redraws a selected entity.
            </summary>
            <param name="cl1">A <see cref="T:System.Windows.Forms.Control">Control</see> on which the selected area is redrawn.</param>
            <param name="scale">A scale in which the selected area is redrawn.</param>
        </member>
        <member name="M:CADImport.CADSelector.GetSelectEntityRegion(System.Drawing.Rectangle)">
            <summary>
            Returns the selected area of the image.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.Region">Region</see> object representing the selected area of the image.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object specifying the image area to be selected.</returns>
        </member>
        <member name="M:CADImport.CADSelector.UndoSelect">
            <summary>
            Undoes the selection of all entities
            </summary>
        </member>
        <member name="M:CADImport.CADSelector.UndoSelect(CADImport.CADEntity)">
            <summary>
            Undoes selection of specified entity
            </summary>
            <param name="ent">Specified entity</param>
        </member>
        <member name="M:CADImport.CADSelector.ClearSelection">
            <summary>
            Undoes selection
            </summary>
        </member>
        <member name="M:CADImport.CADSelector.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:CADImport.CADSelector">CADSelector</see> instance.
            </summary>
        </member>
        <member name="P:CADImport.CADSelector.Markers">
            <summary>
            Gets or sets marker collection for entities
            </summary>
        </member>
        <member name="P:CADImport.CADSelector.SelectionEntityMode">
            <summary>
            Gets or sets selection activity state.
            </summary>
        </member>
        <member name="P:CADImport.CADSelector.PBExtendedSelection">
            <summary>
            Gets or sets a value specifying extended selection mode for <see cref="T:CADImport.CADPolylineBase">CADPolylineBase</see>
            inherited classes. True allows visual select of an entity by clicking within its contour.
            </summary>
        </member>
        <member name="P:CADImport.CADSelector.SelectedEntities">
            <summary>
            Gets or sets a list of selected entities
            </summary>
        </member>
        <member name="P:CADImport.CADSelector.SelectEntitiesCount">
            <summary>
            Gets the number of selected entities
            </summary>
        </member>
        <member name="P:CADImport.CADSelector.SelectionMode">
            <summary>
            Gets or sets a state of the Selection tool.
            </summary>
            <value>A <see cref="P:CADImport.CADSelector.SelectionEntityMode">SelectionEntityMode</see> enumeration value 
            that specifies a state of the Selection tool.</value>
        </member>
        <member name="T:CADImport.DXF.DXFReference">
            <summary>
            Represents a reference to an object.
            </summary>
        </member>
        <member name="F:CADImport.DXF.DXFReference.Entity">
            <summary>
            A reference to an entity
            </summary>
        </member>
        <member name="F:CADImport.DXF.DXFReference.RefHandle">
            <summary>
            A reference to the object's handle
            </summary>
        </member>
        <member name="M:CADImport.DXF.DXFReference.#ctor(CADImport.CADEntity,System.UInt64)">
            <summary>
            Makes a reference to an object
            </summary>
            <param name="ent">An entity</param>
            <param name="handle">A handle of an object</param>
        </member>
        <member name="M:CADImport.DXF.DXFReader.Next">
            <summary>
            Reads next pair of code and associated value from the DXF file.
            </summary>
        </member>
        <member name="M:CADImport.DXF.DXFReader.Load">
            <summary>
            Loads all entities from the CAD file.
            </summary>
        </member>
        <member name="P:CADImport.DXF.DXFReader.IntValue">
            <summary>
            Gets an <b>int</b> value of the variable used for reading the values from a DXF file.
            </summary>
            <remarks>This property returns a value converted from <b>string</b> to an <b>int</b> value.</remarks>
        </member>
        <member name="P:CADImport.DXF.DXFReader.FloatValue">
            <summary>
            Gets a <b>float</b> value of the variable used for reading the values from a DXF file.
            </summary>
            <remarks>This property returns a value converted from <b>string</b> to a <b>float</b> value.</remarks>
        </member>
        <member name="P:CADImport.DXF.DXFReader.DoubleValue">
            <summary>
            Gets a <b>double</b> value of the variable used for reading the values from a DXF file.
            </summary>
            <remarks>This property returns a value converted from <b>string</b> to a <b>double</b> value.</remarks>
        </member>
        <member name="P:CADImport.DXF.DXFReader.ULongValue">
            <summary>
            Gets a <b>double</b> value of the variable used for reading the values from a DXF file.
            </summary>
            <remarks>This property returns a value converted from <b>string</b> to a <b>double</b> value.</remarks>
        </member>
        <member name="P:CADImport.DXF.DXFReader.ByteValue">
            <summary>
            Gets a <b>byte</b> value of the variable used for reading the values from a DXF file.
            </summary>
            <remarks>This property returns a value converted from <b>string</b> to a <b>byte</b> value.</remarks>
        </member>
        <member name="T:CADImport.TTFSmoothing">
            <summary>
            Smoothimg modes for TTF fonts visualization
            </summary>
        </member>
        <member name="F:CADImport.TTFSmoothing.None">
            <summary>
            No smoothing
            </summary>
        </member>
        <member name="F:CADImport.TTFSmoothing.Auto">
            <summary>
            Auto mode
            </summary>
        </member>
        <member name="F:CADImport.TTFSmoothing.Always">
            <summary>
            Use smoothing
            </summary>
        </member>
        <member name="T:CADImport.DrawGraphicsMode">
            <summary>
            Specifies a subsystem used for rendering graphics.
            </summary>
        </member>
        <member name="F:CADImport.DrawGraphicsMode.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:CADImport.DrawGraphicsMode.GDIPlus">
            <summary>
            GDI+ (Graphics Device Interface) mode
            </summary>
        </member>
        <member name="F:CADImport.DrawGraphicsMode.Export">
            <summary>
            Export mode
            </summary>
        </member>
        <member name="F:CADImport.DrawGraphicsMode.OpenGL">
            <summary>
            OpenGL mode
            </summary>
        </member>
        <member name="F:CADImport.DrawGraphicsMode.WPF">
            <summary>
            WPF (Windows Presentation Foundation) mode
            </summary>
        </member>
        <member name="T:CADImport.RECT">
            <summary>
            Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.
            </summary>
        </member>
        <member name="F:CADImport.RECT.left">
            <summary>
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:CADImport.RECT.top">
            <summary>
            Specifies the y-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:CADImport.RECT.right">
            <summary>
            Specifies the x-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="F:CADImport.RECT.bottom">
            <summary>
            Specifies the y-coordinate of the lower-right corner of the rectangle. 
            </summary>
        </member>
        <member name="M:CADImport.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes fields of the <see cref="T:CADImport.RECT"/> structure by the specified values.
            </summary>
        </member>
        <member name="M:CADImport.RECT.FromXYWH(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:CADImport.RECT"/> structure and initializes its fields by the specified values.
            </summary>
            <returns>A new RECT structure.</returns>
        </member>
        <member name="T:CADImport.FileFormat">
            <summary>
            List of supported files extensions
            </summary>
        </member>
        <member name="T:CADImport.CADConst">
            <summary>
            Auxiliary class. 
            </summary>
        </member>
        <member name="F:CADImport.CADConst.iDefaultNumberOfCircleParts">
            <summary>
            A default number that shows how many sections of a circle is divided into. 
            </summary>
        </member>
        <member name="F:CADImport.CADConst.iDefaultNumberOfSplineParts">
            <summary>
            A default number that shows how many sections of a spline is divided into. 
            </summary>
        </member>
        <member name="F:CADImport.CADConst.OnMouseScroll">
            <summary>
            MouseScroll event message number
            </summary>
        </member>
        <member name="F:CADImport.CADConst.clDXFByBlock">
            <summary>
            This colors autocad indeses colors value.
            </summary>
        </member>
        <member name="F:CADImport.CADConst.cnstBadHandle">
            <summary>
            A constant of the invalid Handle
            </summary>
        </member>
        <member name="M:CADImport.CADConst.BGRToRGB(System.Int32)">
            <summary>
            Converts a numeric value to RGB color.
            </summary>
            <param name="color">An Integer type value</param>
            <returns>A <see cref="T:System.Drawing.Color">Color</see> object</returns>
        </member>
        <member name="M:CADImport.CADConst.DisposeObject(System.IDisposable)">
            <summary>
            Invokes <see cref="M:System.IDisposable.Dispose">Dispose</see> method for freeing unmanaged resources.
            </summary>
            <param name="obj">A Disposable object.</param>
        </member>
        <member name="F:CADImport.CADConst.lngPathDefault">
            <summary>
            Default path to language files set
            </summary>
        </member>
        <member name="F:CADImport.CADConst.clByBlock">
            <summary>
            A color constant that means an entity's color is determined by block. 
            </summary>
        </member>
        <member name="F:CADImport.CADConst.clByLayer">
            <summary>
            A color constant that means an entity's color is determined by layer. 
            </summary>
        </member>
        <member name="F:CADImport.CADConst.clNone">
            <summary>
            A color constant that means an entity's color is undefined.
            </summary>
        </member>
        <member name="F:CADImport.CADConst.XOrtAxis">
            <summary>
            An end point of X axis ort
            </summary>
        </member>
        <member name="F:CADImport.CADConst.YOrtAxis">
            <summary>
            An end point of Y axis ort
            </summary>
        </member>
        <member name="F:CADImport.CADConst.ZOrtAxis">
            <summary>
            An end point of Z axis ort
            </summary>
        </member>
        <member name="F:CADImport.CADConst.DPointSingle">
            <summary>
            An end point of vector, recieved by compozition X, Y and Z axis orts.
            </summary>
        </member>
        <member name="F:CADImport.CADConst.DefaultPresenterSettings">
            <summary>
            need help
            </summary>
        </member>
        <member name="M:CADImport.CADConst.SetNumberOfPartsInCurve(CADImport.DRect)">
            <summary>
            Sets optimal number of parts for curve partition by the displaying area dimensions (for saving as a raster file).
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:CADImport.CADConst.SetNumberOfPartsInCurve(System.Drawing.RectangleF)">
            <summary>
            Sets optimal number of parts for curve partition by the displaying area dimensions (for saving as a raster file).
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:CADImport.CADConst.DoPreExtrusion(CADImport.DPoint@,CADImport.DPoint)">
             <summary>
             Searches coordinates of a point (P) in the new coordinate system. 
             This coordinate system is built respectively to Arbitary Axis Algoritm. 
             OZ axis of the new coordinate system is N.
             </summary>
             <param name="P">Point to be changed</param>
             <param name="N"> 0Z axis of the new coordinate system, 
             where 0X and 0Y are being selected respectively to Arbitary Axis Algoritm
            </param>
        </member>
        <member name="M:CADImport.CADConst.SetNewRect(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Creates <see cref="T:System.Drawing.Rectangle">rectangle</see> by two <see cref="T:System.Drawing.Point">points</see>
            </summary>
            <param name="p1">First point</param>
            <param name="p2">Second point</param>
            <returns>Created rectangle</returns>
        </member>
        <member name="M:CADImport.CADConst.GetRealPoint(System.Int32,System.Int32,CADImport.CADImage,System.Drawing.RectangleF)">
            <summary>
            Gets a three-dimensional point of the current CAD image from the specified screen point.
            </summary>
            <param name="x">The X coordinate of the screen point.</param>
            <param name="y">The Y coordinate of the screen point.</param>
            <param name="img"><see cref="T:CADImport.CADImage">CADImage</see> for GetRealPoint</param>			
            <param name="rect">Drawing rect</param>			
            <returns>A three-dimensional point.</returns>
        </member>
        <member name="M:CADImport.CADConst.EntColor(CADImport.CADEntity,CADImport.CADInsert)">
            <summary>
            Gets a color of the specified CAD entity.
            </summary>
            <param name="E">A <see cref="T:CADImport.CADEntity">CADEntity</see> whose color to be returned.</param>
            <param name="Ins">A reference to the block that includes the specified CAD entity.</param>
            <returns>A <see cref="T:System.Drawing.Color">Color</see> of the specified CAD entity.</returns>
        </member>
        <member name="M:CADImport.CADConst.EntLineWeight(CADImport.CADEntity,CADImport.CADInsert)">
            <summary>
            Returns line width of the current entity by the specified entity and insert.
            </summary>
            <param name="ent">Specified entity</param>
            <param name="ins">Insert which contains the current entity (if the entity does not enter into any insert, then parameter 'ins' equals zero)</param>
            <returns>Line width</returns>
        </member>
        <member name="M:CADImport.CADConst.SGArcCos(System.Double)">
            <summary>
            Gets an angle of the unit vector with the specified X coordinate.
            </summary>
            <param name="X">An X coordinate of the unit vector.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:CADImport.CADConst.DoScale2D(CADImport.CADIterate@)">
            <summary>
            Adjusts a scale along the axis X and a scale along the axis Y 
            in accordance with the state of the coordinate transformation matrix.
            </summary>
            <param name="P">A <see cref="T:CADImport.CADIterate">CADIterate</see> object that specifies 
            the coordinate transformation matrix and the scales to be adjusted.</param>
        </member>
        <member name="M:CADImport.CADConst.EntLayer(CADImport.CADEntity,CADImport.CADInsert)">
            <summary>
            Gets a layer of the specified CAD entity.
            </summary>
            <param name="E">A <see cref="T:CADImport.CADEntity">CADEntity</see> whose layer to be returned.</param>
            <param name="Ins">A reference to the block that includes the specified CAD entity.</param>
            <returns>A <see cref="T:CADImport.CADLayer">CADLayer</see> of the specified CAD entity.</returns>
            
        </member>
        <member name="M:CADImport.CADConst.FindAngle(System.Double,System.Double)">
            <summary>
            Returns an angle between two points. The angle calculated based 
            on coordinates increments by X and Y axes.
            </summary>
            <param name="dX">Coordinates increment by X axis</param>
            <param name="dY">Coordinates increment by Y axis</param>
            <returns>The angle in degrees</returns>
        </member>
        <member name="M:CADImport.CADConst.CorrectByOrtho(System.Drawing.Point@,System.Drawing.Point)">
            <summary>
            Reduces a point coordinates increment to X or Y axis when ortho mode is active
            </summary>
            <param name="newPoint">A point final location</param>
            <param name="oldPoint">A point start location</param>
        </member>
        <member name="M:CADImport.CADConst.CorrectByOrtho(System.Int32@,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Reduces a point coordinates increment to X or Y axis when ortho mode is active
            </summary>
            <param name="newX">A final X coordinate</param>
            <param name="newY">A final Y coordinate</param>
            <param name="oldX">A start X coordinate</param>
            <param name="oldY">A start Y coordinate</param>
        </member>
        <member name="M:CADImport.CADConst.FindAutoCADSHXPaths(System.Collections.ArrayList)">
            <summary>
            Searhes the paths to the files containing the AutoCAD SHX fonts.
            </summary>
            <param name="aPaths">A list of paths where to search the AutoCAD SHX fonts.</param>
            <returns><b>true</b> if the files containing the AutoCAD SHX fonts are found; otherwize, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADConst.FindAutoCADSHXPaths(System.Collections.Generic.List{System.String})">
            <summary>
            Searhes the paths to the files containing the AutoCAD SHX fonts.
            </summary>
            <param name="aPaths">A list of paths where to search the AutoCAD SHX fonts.</param>
            <returns><b>true</b> if the files containing the AutoCAD SHX fonts are found; otherwize, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADConst.FindTrueViewSHXPaths(System.Collections.Generic.List{System.String})">
            <summary>
            Searhes the paths to the files containing the DWG TrueView SHX fonts.
            </summary>
            <param name="aPaths">A list of paths where to search the DWG TrueView SHX fonts.</param>
            <returns><b>true</b> if the files containing the DWG TrueView SHX fonts are found; otherwize, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADConst.LoadDataFromWeb(System.String)">
            <summary>
            Loads file from webpage specified by hyperlink
            </summary>
            <param name="path">Hyperlink path to load from</param>
            <returns>Result</returns>
        </member>
        <member name="M:CADImport.CADConst.IsWebPath(System.String)">
            <summary>
            Check whether specified path is a hyperlink
            </summary>
            <param name="path">Path to verify</param>
            <returns><b>True</b> if verified path is a hyperlink. Otherwise <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADConst.SendExceptionReport(System.Exception)">
            <summary>
            Creates a report containing an exception report
            </summary>
            <param name="except">Exception parameters</param>
            <returns>Created report</returns>
        </member>
        <member name="M:CADImport.CADConst.SendMail(System.String,System.String,System.String)">
            <summary>
            Creates an e-mail and opens it in the default mail client
            </summary>
            <param name="mailto">"Mail to" field</param>
            <param name="name">"Subject" field</param>
            <param name="body">Body of the e-mail</param>
            <returns>Returns <b>zero</b> if the e-mail created successfully</returns>
        </member>
        <member name="M:CADImport.CADConst.IntToArgb(System.Int32)">
            <summary>
            Converts a numeric value to an ARGB color. 
            </summary>
            <param name="Value">An Integer type value. </param>
            <returns>A Color object.</returns>
        </member>
        <member name="M:CADImport.CADConst.ToInt(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer (efficiently for drawing).
            </summary>
            <param name="value">The double-precision floating-point number to convert.</param>
            <returns>The integer value</returns>
        </member>
        <member name="P:CADImport.CADConst.UseMultyTTFFonts">
            <summary>
            Gets or sets a value indicating whether a multimode is used for showing letters.
            </summary>
            <value><b>true</b> if multimode is used; otherwise, <b>false</b>. The default is <b>true</b>.</value>
            <remarks>Multimode means that the letters are drawn by means of GDI+ if the text has not been rotated and 
            drawn by using polylines if the text has been rotated.</remarks>
        </member>
        <member name="P:CADImport.CADConst.SearchSHXPaths">
            <summary>
            Gets or sets a value indicating whether a search of SHX fonts is permitted in the <see cref="P:CADImport.CADConst.SHXSearchPaths">SHXSearchPaths</see> directories.
            </summary>
            <value><b>true</b> if a search of SHX fonts is permitted; otherwise, <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:CADImport.CADConst.SHXSearchPaths">
            <summary>
            Gets or sets a string containing the directories paths where to search the SHX fonts. 
            </summary>
            <value> The directories where to search the SHX fonts.</value>
        </member>
        <member name="P:CADImport.CADConst.UseSHXFonts">
            <summary>
            Gets or sets a value indicating whether the SHX fonts are used.
            </summary>
            <value><b>true</b> if using the SHX fonts are used; otherwise, <b>false</b>. The default is <b>false</b>.</value>
        </member>
        <member name="P:CADImport.CADConst.UseTTFFonts">
            <summary>
            Gets or sets a value indicating whether the TTF fonts are used.
            </summary>
            <value><b>true</b> if the TTF fonts are used; otherwise, <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="T:CADImport.CADDrawMode">
            <summary>
            Specifies the color management in the CAD image. 
            </summary>
        </member>
        <member name="F:CADImport.CADDrawMode.Normal">
            <summary>
            All colors are shown. 
            </summary>
        </member>
        <member name="F:CADImport.CADDrawMode.Black">
            <summary>
            CAD image is shown in black and white.
            </summary>
        </member>
        <member name="F:CADImport.CADDrawMode.Gray">
            <summary>
            CAD image is shown in grayscale.
            </summary>
        </member>
        <member name="T:CADImport.HatchPatternData">
            <summary>
            Represents hatch settings
            </summary>
        </member>
        <member name="F:CADImport.HatchPatternData.lineAngle">
            <summary>
            Represents a hatch line tilt angle.
            </summary>
        </member>
        <member name="F:CADImport.HatchPatternData.baseP">
            <summary>
            Base point of hatch line. From this point lines are begins, using offset.
            </summary>
        </member>
        <member name="F:CADImport.HatchPatternData.offset">
            <summary>
            Displacement of pattern line from base point.
            </summary>
        </member>
        <member name="F:CADImport.HatchPatternData.dashNum">
            <summary>
            Number of dash parts of line pattern.
            </summary>
        </member>
        <member name="F:CADImport.HatchPatternData.lines">
            <summary>
            Represents a collection of lines.
            </summary>
        </member>
        <member name="F:CADImport.HatchPatternData.isDash">
            <summary>
            Specifies if hatch line is solid.
            </summary>
            <value><b>False</b> if hatch line is solid; otherwise <b>true</b>.</value>
        </member>
        <member name="M:CADImport.HatchPatternData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="P:CADImport.CADHatch.HatchPatternData">HatchPatternData</see> class
            </summary>
        </member>
        <member name="T:CADImport.ImportMode">
            <summary>
            Specifies modes. 
            </summary>
        </member>
        <member name="F:CADImport.ImportMode.View">
            <summary>
            View
            </summary>
        </member>
        <member name="F:CADImport.ImportMode.Import">
            <summary>
            Import
            </summary>
        </member>
        <member name="T:CADImport.CADSpace">
            <summary>
            Specifies a type of space used in a CAD drawing.
            </summary>
        </member>
        <member name="F:CADImport.CADSpace.S2D">
            <summary>
            A CAD drawing has a two-dimensional space.
            </summary>
        </member>
        <member name="F:CADImport.CADSpace.S3D">
            <summary>
            A CAD drawing has a three-dimensional space.
            </summary>
        </member>
        <member name="F:CADImport.CADSpace.Undefined">
            <summary>
            A space of a CAD drawing is undefined.
            </summary>
        </member>
        <member name="T:CADImport.CADViewDirection">
            <summary>
            Specifies a direction of viewing a CAD image. 
            </summary>
        </member>
        <member name="F:CADImport.CADViewDirection.Top">
            <summary>
            A CAD image is viewed from the top.
            </summary>
        </member>
        <member name="F:CADImport.CADViewDirection.Bottom">
            <summary>
            A CAD image is viewed from the bottom.
            </summary>
        </member>
        <member name="F:CADImport.CADViewDirection.Left">
            <summary>
            A CAD image is viewed from the left.
            </summary>
        </member>
        <member name="F:CADImport.CADViewDirection.Right">
            <summary>
            A CAD image is viewed from the right.
            </summary>
        </member>
        <member name="F:CADImport.CADViewDirection.Front">
            <summary>
            A CAD image is viewed from the front.
            </summary>
        </member>
        <member name="F:CADImport.CADViewDirection.Back">
            <summary>
            A CAD image is viewed from the back.
            </summary>
        </member>
        <member name="F:CADImport.CADViewDirection.SWIsometric">
            <summary>
            A CAD image is viewed from the top-front-left.
            </summary>
        </member>
        <member name="F:CADImport.CADViewDirection.SEIsometric">
            <summary>
            A CAD image is viewed from the top-front-right.
            </summary>
        </member>
        <member name="F:CADImport.CADViewDirection.NWIsometric">
            <summary>
            A CAD image is viewed from the top-back-left.
            </summary>
        </member>
        <member name="F:CADImport.CADViewDirection.NEIsometric">
            <summary>
            A CAD image is viewed from the top-back-right.
            </summary>
        </member>
        <member name="F:CADImport.CADViewDirection.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="T:CADImport.PenStyle">
            <summary>
            Specifies a type of line used to draw a CAD entity.
            </summary>
        </member>
        <member name="F:CADImport.PenStyle.Solid">
            <summary>
            A CAD entity is drawn by solid lines.
            </summary>
        </member>
        <member name="F:CADImport.PenStyle.Dash">
            <summary>
            A CAD entity is drawn by dash lines.
            </summary>
        </member>
        <member name="F:CADImport.PenStyle.Dot">
            <summary>
            A CAD entity is drawn by dot lines.
            </summary>
        </member>
        <member name="F:CADImport.PenStyle.DashDot">
            <summary>
            A CAD entity is drawn by dash-dot lines.
            </summary>
        </member>
        <member name="F:CADImport.PenStyle.DashDotDot">
            <summary>
            A CAD entity is drawn by dash-dot-dot lines.
            </summary>
        </member>
        <member name="F:CADImport.PenStyle.Clear">
            <summary>
            A line is invisible.
            </summary>
        </member>
        <member name="F:CADImport.PenStyle.InsideFrame">
            <summary>
            A CAD entity is drawn by solid lines inside the bounding rectangle.
            </summary>
        </member>
        <member name="T:CADImport.ProgressStage">
            <summary>
            Specifies a stage of reading a file.
            </summary>
        </member>
        <member name="F:CADImport.ProgressStage.Starting">
            <summary>
            A start of reading a file.
            </summary>
        </member>
        <member name="F:CADImport.ProgressStage.Running">
            <summary>
            Reading a file.
            </summary>
        </member>
        <member name="F:CADImport.ProgressStage.Ending">
            <summary>
            An end of reading the file.
            </summary>
        </member>
        <member name="T:CADImport.CADHatchStyle">
            <summary>
            Specifies a hatch style.
            </summary>
        </member>
        <member name="F:CADImport.CADHatchStyle.Solid">
            <summary>
            Solid hatch.
            </summary>
        </member>
        <member name="F:CADImport.CADHatchStyle.PatternData">
            <summary>
            A hatch is specified by pattern.
            </summary>
        </member>
        <member name="F:CADImport.CADHatchStyle.Horizontal">
            <summary>
            Hatch lines are horizontal.
            </summary>
        </member>
        <member name="F:CADImport.CADHatchStyle.Vertical">
            <summary>
            Hatch lines are vertical.
            </summary>
        </member>
        <member name="F:CADImport.CADHatchStyle.FDiagonal">
            <summary>
            A tilt angle of hatch lines is between 0 and 90 degrees. 
            A tilt angle is measured between the positive direction of axis X and a hatch line.
            </summary>
        </member>
        <member name="F:CADImport.CADHatchStyle.BDiagonal">
            <summary>
            A tilt angle of hatch lines is between 90 and 180 degrees. 
            A tilt angle is measured between the positive direction of axis X and a hatch line.
            </summary>
        </member>
        <member name="F:CADImport.CADHatchStyle.Cross">
            <summary>
            A hatch consists of crossing vertical and horizontal lines.
            </summary>
        </member>
        <member name="F:CADImport.CADHatchStyle.DiagCross">
            <summary>
            A hatch consists of the lines crossing each other under 90 degrees angle. 
            A tilt angle of the lines can be of any value except for 0 and 90 degrees (vertical and horizontal lines).
            </summary>
        </member>
        <member name="T:CADImport.CADHatchType">
            <summary>
            Specifies a border type of the hatched area.
            </summary>
        </member>
        <member name="F:CADImport.CADHatchType.None">
            <summary>
            A default value.
            </summary>
        </member>
        <member name="F:CADImport.CADHatchType.Polyline">
            <summary>
            The hatched area is bounded by a closed polyline.
            </summary>
        </member>
        <member name="F:CADImport.CADHatchType.Circle">
            <summary>
            The hatched area is bounded by a circle.
            </summary>
        </member>
        <member name="F:CADImport.CADHatchType.Ellipse">
            <summary>
            The hatched area is bounded by an ellipse.
            </summary>
        </member>
        <member name="F:CADImport.CADHatchType.Spline">
            <summary>
            The hatched area is bounded by a closed spline.
            </summary>
        </member>
        <member name="F:CADImport.CADHatchType.Stop">
            <summary>
            Auxiliary member; for internal use only.
            </summary>
        </member>
        <member name="T:CADImport.CADBorderType">
            <summary>
            Specifies the way the CAD image margins are calculated.
            </summary>
        </member>
        <member name="F:CADImport.CADBorderType.None">
            <summary>
            The margins are not added to the size of CAD drawing.
            </summary>
        </member>
        <member name="F:CADImport.CADBorderType.Global">
            <summary>
            The margins are added to the size of CAD drawing and measured in the same units. 
            </summary>
        </member>
        <member name="F:CADImport.CADBorderType.Ratio">
            <summary>
            The margins are added to the size of CAD drawing and calculated as a fraction of its size.
            </summary>        
        </member>
        <member name="T:CADImport.CADActiveColor">
            <summary>
            TsgColorCAD
            </summary>
        </member>
        <member name="T:CADImport.CADLayoutCollection">
            <summary>
            Represents a collection of <see cref="T:CADImport.CADLayout">CADLayout</see> objects.
            </summary>
        </member>
        <member name="M:CADImport.CADLayoutCollection.AddEntity(CADImport.CADEntity)">
            <summary>
            Adds a <see cref="T:CADImport.CADLayout">CADLayout</see> to this collection.
            </summary>
            <param name="E">An <see cref="T:CADImport.CADEntity">entity</see></param>
            <returns>True if the layout was added. False overwise.</returns>
        </member>
        <member name="P:CADImport.CADLayoutCollection.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:CADImport.CADLayout">CADLayout</see> object at the specified index in the collection.
            </summary>
            <paramref name="index">The zero-based index of the <see cref="T:CADImport.CADLayout">CADLayout</see> to get or set.</paramref>
        </member>
        <member name="T:CADImport.CADDXFReferenceCollection">
            <summary>
            Represents a collection of <see cref="T:CADImport.DPoint">XRef</see> objects.
            </summary>
        </member>
        <member name="M:CADImport.CADDXFReferenceCollection.Add(CADImport.DXF.DXFReference)">
            <summary>
            Adds a <see cref="T:CADImport.DXF.DXFReference">DXFReference</see> to the <see cref="T:CADImport.CADDXFReferenceCollection">CADDXFReferenceCollection</see>.
            </summary>
            <param name="value">A <see cref="T:CADImport.DXF.DXFReference">DXFReference</see> object to add to the collection.</param>
            <returns>The position into which the new <see cref="T:CADImport.DXF.DXFReference">DXFReference</see> was inserted.</returns>
        </member>
        <member name="M:CADImport.CADDXFReferenceCollection.IndexOf(CADImport.DXF.DXFReference)">
            <summary>
            Determines the index of a specified <see cref="T:CADImport.DXF.DXFReference">DXFReference</see> in the collection.
            </summary>
            <param name="value">A <see cref="T:CADImport.DXF.DXFReference">DXFReference</see> to locate in the collection.</param>
            <returns>The index of the <see cref="T:CADImport.DXF.DXFReference">DXFReference</see> if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:CADImport.CADDXFReferenceCollection.Insert(System.Int32,CADImport.DXF.DXFReference)">
            <summary>
            Inserts a <see cref="T:CADImport.DXF.DXFReference">DXFReference</see> into the collection at the specified position.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:CADImport.DXF.DXFReference">DXFReference</see> should be inserted.</param>
            <param name="value">The <see cref="T:CADImport.DXF.DXFReference">DXFReference</see> to insert into the collection.</param>
        </member>
        <member name="M:CADImport.CADDXFReferenceCollection.Remove(CADImport.DXF.DXFReference)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:CADImport.DXF.DXFReference">DXFReference</see> from the collection.
            </summary>
            <param name="value">A <see cref="T:CADImport.DXF.DXFReference">DXFReference</see> to remove from the collection.</param>
        </member>
        <member name="M:CADImport.CADDXFReferenceCollection.Contains(CADImport.DXF.DXFReference)">
            <summary>
            Determines whether the collection contains a specified <see cref="T:CADImport.DXF.DXFReference">DXFReference</see>.
            </summary>
            <param name="value">A <see cref="T:CADImport.DXF.DXFReference">DXFReference</see> to locate in the collection.</param>
            <returns><b>true</b> if the <see cref="T:CADImport.DXF.DXFReference">DXFReference</see> is found in the collection; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.CADDXFReferenceCollection.OnValidate(System.Object)">
            <summary>
            Determines whether a specified object is a <see cref="T:CADImport.DXF.DXFReference">DXFReference</see>, and, 
            if not so, throws an <see cref="T:System.ArgumentException">ArgumentException</see>.
            </summary>
            <param name="value">An <see cref="T:System.Object">Object</see> to validate.</param>
        </member>
        <member name="P:CADImport.CADDXFReferenceCollection.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:System.Int32">long</see> object at the specified index in the collection.
            </summary>
            <paramref name="index">The zero-based index of the <see cref="T:System.Int32">long</see> to get or set.</paramref>
        </member>
        <member name="T:CADImport.CADEntityCollection">
            <summary>
            Represents a collection of CAD entities.
            </summary>
        </member>
        <member name="M:CADImport.CADEntityCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the NameObjectCollectionBase class that is serializable and
            uses the specified <see cref="T:System.Runtime.Serialization.SerializationInfo">Serialization</see> parameter and
            <see cref="T:System.Runtime.Serialization.StreamingContext">Streaming</see> parameter
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo">Serialization</see> parameter</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext">Streaming</see> parameter</param>
        </member>
        <member name="M:CADImport.CADEntityCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADEntityCollection.IndexOf(CADImport.CADEntity)">
            <summary>
            Returns an index of the <see cref="T:CADImport.CADEntity">CADEntity</see> in the <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see>.
            </summary>
            <param name="ent"></param>
            <returns>An index of the entity in the collection.</returns>
        </member>
        <member name="M:CADImport.CADEntityCollection.Remove(System.UInt64)">
            <summary>
            Removes the <see cref="T:CADImport.CADEntity">CADEntity</see> by its handle.
            </summary>
            <param name="item">The handle value</param>
            <returns>True if the entity deleted. False overwise.</returns>
        </member>
        <member name="M:CADImport.CADEntityCollection.Clone">
            <summary>
            Creates a new object that is a copy of the <see cref="T:CADImport.CADEntityCollection">CADEntityCollection</see> class current instance.
            </summary>
            <returns>A new object that is a copy of this collection.</returns>
        </member>
        <member name="M:CADImport.CADEntityCollection.SortByHandle">
            <summary>
            Sorts CAD entities by handle.
            </summary>
        </member>
        <member name="P:CADImport.CADEntityCollection.Item(System.UInt64)">
            <summary>
            Gets the <see cref="T:CADImport.CADEntity">CADEntity</see> by its handle.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="P:CADImport.CADEntityCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:CADImport.CADEntity">CADEntity</see> by its index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:CADImport.InsUnitsStruct">
            <summary>
            Default drawing units for AutoCAD DesignCenter blocks
            </summary>
        </member>
        <member name="T:CADImport.EntityType">
            <summary>
            Specifies an entity type.
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Entity">
            <summary>
            Entity
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Line">
            <summary>
            Line
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Solid">
            <summary>
            Solid
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Circle">
            <summary>
            Circle
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Arc">
            <summary>
            Arc
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Ellipse">
            <summary>
            Ellipse
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Polyline">
            <summary>
            Polyline
            </summary>
        </member>
        <member name="F:CADImport.EntityType.LWPolyline">
            <summary>
            LWPolyline
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Spline">
            <summary>
            Spline
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Insert">
            <summary>
            Insert
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Dimension">
            <summary>
            Dimension
            </summary>
        </member>
        <member name="F:CADImport.EntityType.MText">
            <summary>
            MText
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Attdef">
            <summary>
            Attdef
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Attrib">
            <summary>
            Attrib
            </summary>
        </member>
        <member name="F:CADImport.EntityType._3DFace">
            <summary>
            3DFace
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Hatch">
            <summary>
            Hatch
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Viewport">
            <summary>
            Viewport
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Leader">
            <summary>
            Leader
            </summary>
        </member>
        <member name="F:CADImport.EntityType.PolyPolygon">
            <summary>
            PolyPolygon
            </summary>
        </member>
        <member name="F:CADImport.EntityType.CurvePolygon">
            <summary>
            CurvePolygon
            </summary>
        </member>
        <member name="F:CADImport.EntityType.ImageEnt">
            <summary>
            ImageEnt
            </summary>
        </member>
        <member name="F:CADImport.EntityType.GradientPolygon">
            <summary>
            GradientPolygon
            </summary>
        </member>
        <member name="F:CADImport.EntityType.MPolygon">
            <summary>
            MPoilygon object
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Region">
            <summary>
            Region
            </summary>
        </member>
        <member name="F:CADImport.EntityType._3DSolid">
            <summary>
            3DSolid
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Body">
            <summary>
            Body
            </summary>
        </member>
        <member name="F:CADImport.EntityType.FlatPoly">
            <summary>
            FlatPoly
            </summary>
        </member>
        <member name="F:CADImport.EntityType.FlatHatch">
            <summary>
            FlatHatch
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Ole2Frame">
            <summary>
            Ole2Frame
            </summary>
        </member>
        <member name="F:CADImport.EntityType.DWGPolyline">
            <summary>
            DWGPolyline
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Trace">
            <summary>
            Trace 
            </summary>					
        </member>
        <member name="F:CADImport.EntityType.Pattern">
            <summary>
            Pattern
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Gradient">
            <summary>
            Gradient
            </summary>
        </member>
        <member name="F:CADImport.EntityType.ACADTable">
            <summary>
            ACADTable
            </summary>
        </member>
        <member name="F:CADImport.EntityType.XRef">
            <summary>
            XRef
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Proxy">
            <summary>
            Proxy
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Layer">
            <summary>
            Layer
            </summary>
        </member>
        <member name="F:CADImport.EntityType.FlatEntity">
            <summary>
            FlatEntity
            </summary>
        </member>
        <member name="F:CADImport.EntityType.ImageDef">
            <summary>
            ImageDef
            </summary>
        </member>
        <member name="F:CADImport.EntityType.EmptyObject">
            <summary>
            Empty object
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Wipeout">
            <summary>
            Wipeout object
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Tolerance">
            <summary>
            Tolerance object
            </summary>
        </member>
        <member name="F:CADImport.EntityType.MLine">
            <summary>
            MLine object
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Shape">
            <summary>
            Shape object
            </summary>
        </member>
        <member name="F:CADImport.EntityType.Helix">
            <summary>
            Helix object
            </summary>
        </member>
        <member name="T:CADImport.DWGProps">
            <summary>
            Represents the set of properties for an AutoCAD drawing.
            </summary>
        </member>
        <member name="F:CADImport.DWGProps.Title">
            <summary>
            The title
            </summary>
        </member>
        <member name="F:CADImport.DWGProps.Subject">
            <summary>
            The subject
            </summary>
        </member>
        <member name="F:CADImport.DWGProps.Author">
            <summary>
            The author
            </summary>
        </member>
        <member name="F:CADImport.DWGProps.Keywords">
            <summary>
            Keywords;
            </summary>
        </member>
        <member name="F:CADImport.DWGProps.Comments">
            <summary>
            Comments
            </summary>
        </member>
        <member name="F:CADImport.DWGProps.HyperlinkBase">
            <summary>
            The base of a hyperlink
            </summary>
        </member>
        <member name="F:CADImport.DWGProps.DateOfCreation">
            <summary>
            The date of the drawing creation
            </summary>
        </member>
        <member name="F:CADImport.DWGProps.DateOfLastChange">
            <summary>
            The date of the drawing last change
            </summary>
        </member>
        <member name="F:CADImport.DWGProps.SavedBy">
            <summary>
            The author of the drawing last edition
            </summary>
        </member>
        <member name="F:CADImport.DWGProps.RevisionNumber">
            <summary>
            Revision number
            </summary>
        </member>
        <member name="F:CADImport.DWGProps.TotalEditingTime">
            <summary>
            Total time of drawing editing
            </summary>
        </member>
        <member name="F:CADImport.DWGProps.Other">
            <summary>
            Other properties
            </summary>
        </member>
        <member name="T:CADImport.DWGVersion">
            <summary>
            Specifies a supported version of the DWG file.
            </summary>
        </member>
        <member name="F:CADImport.DWGVersion.ACR9">
            <summary>
            DWG version R9.
            </summary>
        </member>
        <member name="F:CADImport.DWGVersion.ACR10">
            <summary>
            DWG version R10.
            </summary>
        </member>
        <member name="F:CADImport.DWGVersion.ACR12">
            <summary>
            DWG version R12.
            </summary>
        </member>
        <member name="F:CADImport.DWGVersion.ACR13">
            <summary>
            DWG version R13.
            </summary>
        </member>
        <member name="F:CADImport.DWGVersion.ACR14">
            <summary>
            DWG version R14.
            </summary>
        </member>
        <member name="F:CADImport.DWGVersion.ACR2000">
            <summary>
            DWG version R2000.
            </summary>
        </member>
        <member name="F:CADImport.DWGVersion.ACR2004">
            <summary>
            DWG version R2004.
            </summary>
        </member>
        <member name="T:CADImport.DimStyleStruct">
            <summary>
            Defines structure that contains some dimension variables.
            </summary>	
        </member>
        <member name="F:CADImport.DimStyleStruct.Alt">
            <summary>
            Alternate unit dimensioning performed if nonzero.
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.AltF">
            <summary>
            Alternate unit scale factor
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.APost">
            <summary>
            Alternate dimensioning suffix
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.Asz">
            <summary>
            Dimensioning arrow size
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.Blk">
            <summary>
            Arrow block name
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.Blk1">
            <summary>
            First arrow block name
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.Blk2">
            <summary>
            Second arrow block name
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.LrBlk">
            <summary>
            Arrow block name for leaders
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.Cen">
            <summary>
            Size of center mark/lines
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.ClrD">
            <summary>
            Dimension line color
            </summary>
            <value>range is 0 = BYBLOCK; 256 = BYLAYER</value>
        </member>
        <member name="F:CADImport.DimStyleStruct.ClrE">
            <summary>
            Dimension extension line color
            </summary>
            <value>range is 0 = BYBLOCK; 256 = BYLAYER</value>
        </member>
        <member name="F:CADImport.DimStyleStruct.ClrT">
            <summary>
            Dimension text color
            </summary>
            <value>range is 0 = BYBLOCK; 256 = BYLAYER</value>
        </member>
        <member name="F:CADImport.DimStyleStruct.SD1">
            <summary>
            Suppression of first extension line
            </summary>
            <value>0 = Not suppressed; 1 = Suppressed</value>
        </member>
        <member name="F:CADImport.DimStyleStruct.SD2">
            <summary>
            Suppression of second extension line
            </summary>
            <value>0 = Not suppressed; 1 = Suppressed</value>
        </member>
        <member name="F:CADImport.DimStyleStruct.SE1">
            <summary>
            First extension line suppressed if nonzero
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.SE2">
            <summary>
            Second extension line suppressed if nonzero
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.Dec">
            <summary>
            Number of decimal places for the tolerance values of a primary units dimension
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.Exe">
            <summary>
            Extension line extension
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.Exo">
            <summary>
            Extension line offset
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.Gap">
            <summary>
            Dimension line gap
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.LFac">
            <summary>
            Linear measurements scale factor
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.LwD">
            <summary>
            Dimension line lineweight
            </summary>
            <value>-3 = Standard, -2 = ByLayer, -1 = ByBlock, 0-211 = an integer representing 100th of mm</value>
        </member>
        <member name="F:CADImport.DimStyleStruct.LwE">
            <summary>
            Extension line lineweight
            </summary>
            <value>-3 = Standard, -2 = ByLayer, -1 = ByBlock, 0-211 = an integer representing 100th of mm</value>
        </member>
        <member name="F:CADImport.DimStyleStruct.Post">
            <summary>
            General dimensioning suffix
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.Scale">
            <summary>
            Overall dimensioning scale factor
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.Tad">
            <summary>
            Text above dimension line if nonzero
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.Tih">
            <summary>
            Text inside horizontal if nonzero
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.Tix">
            <summary>
            Force text inside extensions if nonzero
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.Toh">
            <summary>
            Text outside horizontal if nonzero
            </summary>
        </member>
        <member name="F:CADImport.DimStyleStruct.Txt">
            <summary>
            Dimensioning text height
            </summary>
        </member>
        <member name="T:CADImport.HeadVarStruct">
            <summary>
            Defines the structure which contains some system variables.
            </summary>	
        </member>
        <member name="F:CADImport.HeadVarStruct.color">
            <summary>
            Current entity color number: 0 = BYBLOCK; 256 = BYLAYER
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.layer">
            <summary>
            Current layer name.
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.ELType">
            <summary>
            Entity linetype name, or BYBLOCK or BYLAYER
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.ELTScale">
            <summary>
            Current entity linetype scale.
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.ELWeight">
            <summary>
            Lineweight of new objects.
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.CodePage">
            <summary>
            Drawing code page; set to the system code page when a new drawing is created.
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.DimStyle">
            <summary>
            Dimension style name
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.DimTextStyle">
            <summary>
            Dimension text style.
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.FilledRadius">
            <summary>
            Fillet radius.
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.DimProps">
            <summary>
            A head variable of DXF/DWG files; for internal use.
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.TextStyle">
            <summary>
            A head variable of DXF/DWG files; for internal use.
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.InsUnits">
            <summary>
            Default drawing units for DesignCenter blocks
            </summary>
            <value>0 = Unitless; 1 = Inches; 2 = Feet; 3 = Miles; 4 = Millimeters;
            5 = Centimeters; 6 = Meters; 7 = Kilometers; 8 = Microinches;
            9 = Mils; 10 = Yards; 11 = Angstroms; 12 = Nanometers;
            13 = Microns; 14 = Decimeters; 15 = Decameters;
            16 = Hectometers; 17 = Gigameters; 18 = Astronomical units;
            19 = Light years; 20 = Parsecs</value>
        </member>
        <member name="F:CADImport.HeadVarStruct.LScale">
            <summary>
            Global linetype scale.
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.Measurement">
            <summary>
            Sets drawing units: false = English; true = Metric.
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.PointDisplayMode">
            <summary>
            Point display mode
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.PointDisplaySize">
            <summary>
            Point display size
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.PSLTScale">
            <summary>
            Paper space linetype scaling
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.TextSize">
            <summary>
            Default text height
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.TileMode">
            <summary>
            1 for previous release compatibility mode; 0 otherwise
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.UCSORG">
            <summary>
            Origin of current UCS (in WCS)
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.UCSXDir">
            <summary>
            A head variable of DXF/DWG files; for internal use.
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.UCSYDir">
            <summary>
            A head variable of DXF/DWG files; for internal use.
            </summary>
        </member>
        <member name="F:CADImport.HeadVarStruct.Version">
            <summary>
            Defines the appearance of existing <see cref="T:CADImport.CADPoint">DXFPoint</see> class objects. 
            Set 0 to make <see cref="T:CADImport.CADPoint">DXFPoint</see> class objects visible. Set 0 to make 
            <see cref="T:CADImport.CADPoint">DXFPoint</see> class objects invisible.
            </summary>				
        </member>
        <member name="F:CADImport.HeadVarStruct.AttMode">
            <summary>
            A head variable of DXF/DWG files; for internal use.
            </summary>
        </member>
        <member name="M:CADImport.HeadVarStruct.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.HeadVarStruct">HeadVarStruct</see> class. 
            </summary>
        </member>
        <member name="P:CADImport.HeadVarStruct.LUPrec">
            <summary>
            Units precision for coordinates and distances.
            </summary>
        </member>
        <member name="P:CADImport.HeadVarStruct.DefaultValue">
            <summary>
            Gets a new <see cref="T:CADImport.HeadVarStruct">HeadVarStruct</see> instance with default parameters.
            </summary>
        </member>
        <member name="T:CADImport.DimTextPosVert">
            <summary>
            Describes dimension text placement relative dimension line.
            </summary>
        </member>
        <member name="F:CADImport.DimTextPosVert.Center">
            <summary>
            At center of dimensional line
            </summary>
        </member>
        <member name="F:CADImport.DimTextPosVert.Above">
            <summary>
            Above dimensional line
            </summary>
        </member>
        <member name="F:CADImport.DimTextPosVert.OutSide">
            <summary>
            Outside dimension line
            </summary>
        </member>
        <member name="F:CADImport.DimTextPosVert.JIS">
            <summary>
            Justified
            </summary>
        </member>
        <member name="T:CADImport.AssemblyVersion">
            <summary>
            Represents an object for verification of the assembly version
            </summary>
        </member>
        <member name="M:CADImport.AssemblyVersion.#ctor">
            <summary>
            Creates an instance of the AssemblyVersion class
            </summary>
        </member>
        <member name="M:CADImport.AssemblyVersion.CheckVersion(CADImport.AssemblyVersion)">
            <summary>
            Checks if the current assembly version matches the specified
            </summary>
            <param name="val">Assembly version</param>
            <returns>Returns <b>true</b> if versions are equals</returns>
        </member>
        <member name="P:CADImport.AssemblyVersion.Version">
            <summary>
            Gets or sets a <see cref="T:System.Version">Version</see> of the current assembly
            </summary>
        </member>
        <member name="T:CADImport.EndDraw">
            <summary>
            Represents methods related to end of visualization.
            </summary>
        </member>
        <member name="T:CADImport.EndThread">
            <summary>
            Represents methods related to end of a thread.
            </summary>
        </member>
        <member name="T:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt">
            <summary>
            Represents an extended browse dialog window.
            </summary>
        </member>
        <member name="M:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt">BrowseFolderDialogExt</see> class.
            </summary>
            <param name="parent">A parent control of this <see cref="T:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt">BrowseFolderDialogExt</see> object.</param>
        </member>
        <member name="M:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt.OnBrowseEvent">
            <summary>
            Raises the <see cref="E:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt.Browse">Browse</see> event.
            </summary>
        </member>
        <member name="M:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt.ShowDialog(CADImport.Extensions.WinApiModule.SpecialFolder,System.Windows.Forms.Form)">
            <summary>
            Shows the <see cref="T:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt">BrowseFolderDialogExt</see> window as a modal dialog box. 
            </summary>
            <param name="rootFolder">A <see cref="T:CADImport.Extensions.WinApiModule.SpecialFolder">SpecialFolder</see> object representing an initial folder.</param>
            <param name="parentForm">A parent window for this <see cref="T:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt">BrowseFolderDialogExt</see> object.</param>
            <returns><b>true</b> if this method works correctly; otherwise, <b>false</b>.</returns>
        </member>
        <member name="E:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt.Browse">
            <summary>
            Occurs when <see cref="T:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt">BrowseFolderDialogExt</see> window appears.
            </summary>
        </member>
        <member name="P:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt.SelectFolder">
            <summary>
            Gets or sets a selection folder.
            </summary>
            <value>A <b>string</b> containing a path to the folder where a file selection is produced.</value>
        </member>
        <member name="P:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt.Caption">
            <summary>
            Gets or sets a caption for this <see cref="T:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt">BrowseFolderDialogExt</see> object.
            </summary>
            <value>A <b>string</b> containing a caption for this <see cref="T:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt">BrowseFolderDialogExt</see> object.</value>
        </member>
        <member name="P:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt.InitialPath">
            <summary>
            Gets or sets a folder that is open in the <see cref="T:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt">BrowseFolderDialogExt</see> window when this window appears.
            </summary>
            <value>A <b>string</b> containing a path to the folder that is open in the <see cref="T:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt">BrowseFolderDialogExt</see> window when this window appears.</value>
        </member>
        <member name="T:CADImport.Extensions.WinApiModule.SpecialFolder">
            <summary>
            Specifies a folder that is open in the <see cref="T:CADImport.Extensions.WinApiModule.BrowseFolderDialogExt">BrowseFolderDialogExt</see> window when this window appears.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Desktop">
            <summary>
            Desktop.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Internet">
            <summary>
            Internet Explorer (icon on desktop).
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Programs">
            <summary>
            Start Menu\Programs.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Controls">
            <summary>
            My Computer\Control Panel.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Printers">
            <summary>
            My Computer\Printers.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Personal">
            <summary>
            My Documents.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Favorites">
            <summary>
            Favorites.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Startup">
            <summary>
            Start Menu\Programs\Startup.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Recent">
            <summary>
            Recent.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.SendTo">
            <summary>
            Send To.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.BitBucket">
            <summary>
            Recycle Bin.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.StartMenu">
            <summary>
            Start Menu.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.MyDocuments">
            <summary>
            Logical "My Documents" desktop icon.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.MyMusic">
            <summary>
            "My Music" folder.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.MyVideo">
            <summary>
            "My Videos" folder.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.DesktopDirectory">
            <summary>
            Desktop.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Drivers">
            <summary>
            My Computer.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Network">
            <summary>
            Network Neighborhood (My Network Places).
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Nethood">
            <summary>
            Nethood.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Fonts">
            <summary>
            Windows\fonts.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Templates">
            <summary>
            Templates.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.CommonStartMenu">
            <summary>
            All Users\Start Menu.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.CommonPrograms">
            <summary>
            All Users\Start Menu\Programs.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.CommonStartUp">
            <summary>
            All Users\Startup.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.CommonDesktopDirectory">
            <summary>
            All Users\Desktop.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.AppData">
            <summary>
            Application Data.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.PrintHood">
            <summary>
            PrintHood.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.LocalAppData">
            <summary>
            Local Settings\Applicaiton Data (non roaming).
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.AltStartup">
            <summary>
            Non localized startup.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.CommonAltStartup">
            <summary>
            Non localized common startup.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.CommonFavorites">
            <summary>
            Common Favorites.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.InternetCache">
            <summary>
            Internet cache.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Cookies">
            <summary>
            Cookies.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.History">
            <summary>
            History.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.CommonAppData">
            <summary>
            All Users\Application Data.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Windows">
            <summary>
            Windows directory.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.System">
            <summary>
            System directory.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.ProgramFiles">
            <summary>
            Program Files directory.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.MyPictures">
            <summary>
            Program Files\My Pictures.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Profile">
            <summary>
            USERPROFILE.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.SystemX86">
            <summary>
            x86 system directory on RISC.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.ProgramFilesX86">
            <summary>
            x86 Program Files on RISC.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.ProgramFilesCommon">
            <summary>
            Program Files\Common.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.ProgramFilesCommonX86">
            <summary>
            x86 Program Files\Common on RISC.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.CommonTemplates">
            <summary>
            All Users\Templates.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.CommonDocuments">
            <summary>
            All Users\Documents.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.CommonAdminTolls">
            <summary>
            All Users\Start Menu\Programs\Administrative Tools.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.AdminTools">
            <summary>
            Start Menu\Programs\Administrative Tools.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.Connections">
            <summary>
            Network and Dial-up Connections.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.CommonMusic">
            <summary>
            All Users\My Music.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.CommonPictures">
            <summary>
            All Users\My Pictures.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.CommonVideo">
            <summary>
            All Users\My Video.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.SpecialFolder.CDBurnData">
            <summary>
            USERPROFILE\Local Settings\Application Data\Microsoft\CD Burning.
            </summary>
        </member>
        <member name="M:CADImport.Extensions.WinApiModule.GDIApi.GetDeviceCaps(System.IntPtr,System.Int32)">
            <summary>
            Retrieves device-specific information for the specified device. 
            </summary>
            <param name="hdc">A Handle to the DC.</param>
            <param name="nIndex">Specifies the item to return. This parameter can be one of the DeviceCap enum</param>
            <returns>The return value specifies the value of the desired item. </returns>
        </member>
        <member name="M:CADImport.Extensions.WinApiModule.GDIApi.GetDC(System.Runtime.InteropServices.HandleRef)">
             <summary>
             Retrieves a handle to a display device context (DC) for the client area of a specified window or for the entire screen.
             </summary>
             <param name="hWnd">Handle to the window whose DC is to be retrieved. If this value is NULL, GetDC retrieves the DC for the entire screen.</param>
             <returns>If the function succeeds, the return value is a handle to the DC for the specified window's client area. 
            If the function fails, the return value is NULL.</returns>
        </member>
        <member name="M:CADImport.Extensions.WinApiModule.GDIApi.ExtTextOut(System.IntPtr,System.Int32,System.Int32,System.UInt32,CADImport.RECT@,System.String,System.UInt32,System.Int32[])">
            <summary>
            Draws text using the currently selected font, background color, and text color. You can optionally provide dimensions to be used for clipping, opaquing, or both. 
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="X">Specifies the x-coordinate, in logical coordinates, of the reference point used to position the string.</param>
            <param name="Y">Specifies the y-coordinate, in logical coordinates, of the reference point used to position the string.</param>
            <param name="fuOptions">Specifies how to use the application-defined rectangle.</param>
            <param name="lprc">Pointer to an optional RECT structure that specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="lpString">Pointer to a string that specifies the text to be drawn. The string does not need to be zero-terminated, since cbCount specifies the length of the string.</param>
            <param name="cbCount">Specifies the length of the string. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count.</param>
            <param name="lpDx">Pointer to an optional array of values that indicate the distance between origins of adjacent character cells.</param>
            <returns>If the string is drawn, the return value is nonzero; otherwize the return value is zero. </returns>
        </member>
        <member name="M:CADImport.Extensions.WinApiModule.GDIApi.ExtTextOutW(System.IntPtr,System.Int32,System.Int32,System.UInt32,CADImport.RECT@,System.String,System.UInt32,System.Int32[])">
            <summary>
            ExtTextOutW is a version of the ExtTextOut function supported by the Microsoft Layer for Unicode. To use this, you must add certain files to your application, as outlined in Microsoft Layer for Unicode on Windows 95/98/Me Systems.
            </summary>
        </member>
        <member name="T:CADImport.Extensions.WinApiModule.DeviceCap">
            <summary>
            Device-specific information.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.DRIVERVERSION">
            <summary>
            The device driver version.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.TECHNOLOGY">
            <summary>
            Device technology.
            </summary>
            <remarks><p><b>Device tehnology can be any one of the following values:</b></p>
            <p>DT_PLOTTER      - Vector plotter</p>
            <p>DT_RASDISPLAY   - Raster display</p>
            <p>DT_RASPRINTER   - Raster printer</p> 
            <p>DT_RASCAMERA    - Raster camera</p> 
            <p>DT_CHARSTREAM   - Character stream</p> 
            <p>DT_METAFILE     - Metafile</p> 
            <p>DT_DISPFILE     - Display file</p></remarks>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.HORZSIZE">
            <summary>
            Width, in millimeters, of the physical screen.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.VERTSIZE">
            <summary>
            Height, in millimeters, of the physical screen.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.HORZRES">
            <summary>
            Width, in pixels, of the screen.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.VERTRES">
            <summary>
            Height, in raster lines, of the screen.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.BITSPIXEL">
            <summary>
            Number of adjacent color bits for each pixel.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.PLANES">
            <summary>
            Number of color planes.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.NUMBRUSHES">
            <summary>
            Number of device-specific brushes.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.NUMPENS">
            <summary>
            Number of device-specific pens.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.NUMMARKERS">
            <summary>
            Number of device-specific markers.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.NUMFONTS">
            <summary>
            Number of device-specific fonts.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.NUMCOLORS">
            <summary>
            Number of entries in the device's color table.
            </summary>
            <remarks>For the device that has a color depth of no more than 8 bits per pixel. For devices with greater color depths,  1 is returned.</remarks>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.PDEVICESIZE">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.CURVECAPS">
            <summary>
            Value that indicates the curve capabilities of the device.
            </summary>
            <remarks><p><b>Curve capabilities are shown in the following table:</b></p>
            <p>CC_NONE        -  Device does not support curves. </p>
            <p>CC_CHORD       -  Device can draw chord arcs. </p>
            <p>CC_CIRCLES     -  Device can draw circles. </p>
            <p>CC_ELLIPSES    -  Device can draw ellipses. </p>
            <p>CC_INTERIORS   -  Device can draw interiors. </p>
            <p>CC_PIE         -  Device can draw pie wedges. </p>
            <p>CC_ROUNDRECT   -  Device can draw rounded rectangles. </p>
            <p>CC_STYLED      -  Device can draw styled borders. </p>
            <p>CC_WIDE        -  Device can draw wide borders. </p>
            <p>CC_WIDESTYLED  -  Device can draw borders that are wide and styled. </p>
            </remarks>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.LINECAPS">
            <summary>
            Value that indicates the line capabilities of the device.
            </summary>
            <remarks><p><b>Line capabilities are shown in the following table:</b></p>
            <p>LC_NONE        -  Device does not support lines. </p>
            <p>LC_MARKER      -  Device can draw a marker. </p>
            <p>LC_POLYLINE    -  Device can draw a polyline. </p>
            <p>LC_POLYMARKER  -  Device can draw multiple markers. </p>
            <p>LC_INTERIORS   -  Device can draw interiors. </p>
            <p>LC_STYLED      -  Device can draw styled lines. </p>
            <p>LC_WIDE        -  Device can draw wide lines. </p>
            <p>LC_WIDESTYLED  -  Device can draw lines that are wide and styled. </p>
            </remarks>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.POLYGONALCAPS">
            <summary>
            Value that indicates the polygon capabilities of the device.
            </summary>
            <remarks><p><b>Polygon capabilities are shown in the following table:</b></p>
            <p>PC_NONE        -  Device does not support polygons. </p>
            <p>PC_POLYGONE    -  Device can draw alternate-fill polygons. </p>
            <p>PC_RECTANGLE   -  Device can draw rectangles. </p>
            <p>PC_SCANLINE    -  Device can draw a single scanline. </p>
            <p>PC_INTERIORS   -  Device can draw interiors. </p>
            <p>PC_STYLED      -  Device can draw styled borders. </p>
            <p>PC_WIDE        -  Device can draw wide borders. </p>
            <p>PC_WIDESTYLED  -  Device can draw borders that are wide and styled. </p>
            <p>PC_WINDPOLYGON -  Device can draw winding-fill polygons. </p>
            </remarks>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.TEXTCAPS">
            <summary>
            Value that indicates the text capabilities of the device.
            </summary>
            <remarks><p><b>Text capabilities are shown in the following table:</b></p>
            <p>TC_OP_CHARACTER   -  Device is capable of character output precision. </p>
            <p>TC_OP_STROKE      -  Device is capable of stroke output precision. </p>
            <p>TC_CP_STROKE      -  Device is capable of stroke clip precision. </p>
            <p>TC_CR_90          -  Device is capable of 90-degree character rotation. </p>
            <p>TC_CR_ANY         -  Device is capable of any character rotation. </p>
            <p>TC_SF_X_YINDEP    -  Device can scale independently in the x- and y-directions. </p>
            <p>TC_SA_DOUBLE      -  Device is capable of doubled character for scaling. </p>
            <p>TC_SA_INTEGER     -  Device uses integer multiples only for character scaling. </p>
            <p>TC_SA_CONTIN      -  Device uses any multiples for exact character scaling. </p>
            <p>TC_EA_DOUBLE      -  Device can draw double-weight characters. </p>
            <p>TC_IA_ABLE        -  Device can italicize. </p>
            <p>TC_UA_ABLE        -  Device can underline. </p>
            <p>TC_SO_ABLE        -  Device can draw strikeouts. </p>
            <p>TC_RA_ABLE        -  Device can draw raster fonts. </p>
            <p>TC_VA_ABLE        -  Device can draw vector fonts. </p>
            <p>TC_RESERVED       -  Reserved; must be zero. </p>
            <p>TC_SCROLLBLT      -  Device cannot scroll using a bit-block transfer. Note that this meaning may be the opposite of what you expect. </p>
            </remarks>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.CLIPCAPS">
            <summary>
            Flag that indicates the clipping capabilities of the device.
            </summary>
            <value>If the device can clip to a rectangle, it is 1. Otherwise, it is 0.</value>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.RASTERCAPS">
            <summary>
            Value that indicates the raster capabilities of the device.
            </summary>
            <remarks><p><b>Raster capabilities are shown in the following table:</b></p>
            <p>RC_BANDING     -  Requires banding support. </p>
            <p>RC_BITBLT      -  Capable of transferring bitmaps. </p>
            <p>RC_BITMAP64    -  Capable of supporting bitmaps larger than 64 KB. </p>
            <p>RC_DI_BITMAP   -  Capable of supporting the SetDIBits and GetDIBits functions. </p>
            <p>RC_DIBTODEV    -  Capable of supporting the SetDIBitsToDevice function. </p>
            <p>RC_FLOODFILL   -  Capable of performing flood fills. </p>
            <p>RC_PALETTE     -  Specifies a palette-based device. </p>
            <p>RC_SCALING     -  Capable of scaling. </p>
            <p>RC_STRETCHBLT  -  Capable of performing the StretchBlt function. </p>
            <p>RC_STRETCHDIB  -  Capable of performing the StretchDIBits function. </p>
            </remarks>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.ASPECTX">
            <summary>
            Relative width of a device pixel used for line drawing.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.ASPECTY">
            <summary>
            Relative height of a device pixel used for line drawing.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.ASPECTXY">
            <summary>
            Diagonal width of the device pixel used for line drawing.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.LOGPIXELSX">
            <summary>
            Number of pixels per logical inch along the screen width.
            </summary>
            <remarks>In a system with multiple display monitors, this value is the same for all monitors.</remarks>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.LOGPIXELSY">
            <summary>
            Number of pixels per logical inch along the screen height.
            </summary>
            <remarks>In a system with multiple display monitors, this value is the same for all monitors.</remarks>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.SIZEPALETTE">
            <summary>
            Number of entries in the system palette.
            </summary>
            <remarks> This index is valid only if the device driver sets the RC_PALETTE bit in the RASTERCAPS index
            and is available only if the driver is compatible with 16-bit Windows.</remarks>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.NUMRESERVED">
            <summary>
            Number of reserved entries in the system palette.
            </summary>
            <remarks>This index is valid only if the device driver sets the RC_PALETTE bit in the RASTERCAPS index
            and is available only if the driver is compatible with 16-bit Windows.</remarks>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.COLORRES">
            <summary>
            Actual color resolution of the device, in bits per pixel.
            </summary>
            <remarks>This index is valid only if the device driver sets the RC_PALETTE bit in the RASTERCAPS index
            and is available only if the driver is compatible with 16-bit Windows.</remarks>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.PHYSICALWIDTH">
            <summary>
            For printing devices: the width of the physical page, in device units. For example, a printer set to
            print at 600 dpi on 8.5-x11-inch paper has a physical width value of 5100 device units.
            </summary>
            <remarks>Note that the physical page is almost always greater than the printable area of the page, and never smaller. </remarks>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.PHYSICALHEIGHT">
            <summary>
            For printing devices: the height of the physical page, in device units. For example, a printer set to
            print at 600 dpi on 8.5-by-11-inch paper has a physical height value of 6600 device units.
            </summary>
            <remarks>Note that the physical page is almost always greater than the printable area of the page, and never smaller. </remarks>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.PHYSICALOFFSETX">
            <summary>
            For printing devices: the distance from the left edge of the physical page to the left edge of the printable area, in device units.
            For example, a printer set to print at 600 dpi on 8.5-by-11-inch paper, that cannot print on the leftmost 0.25-inch of paper, has a
            horizontal physical offset of 150 device units. 
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.PHYSICALOFFSETY">
            <summary>
            For printing devices: the distance from the top edge of the physical page to the top edge of the printable area, in device units.
            For example, a printer set to print at 600 dpi on 8.5-by-11-inch paper, that cannot print on the topmost 0.5-inch of paper, has a
            vertical physical offset of 300 device units. 
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.SCALINGFACTORX">
            <summary>
            Scaling factor for the x-axis of the printer.
            </summary>
        </member>
        <member name="F:CADImport.Extensions.WinApiModule.DeviceCap.SCALINGFACTORY">
            <summary>
            Scaling factor for the y-axis of the printer. 
            </summary>
        </member>
        <member name="T:CADImport.SHXFont">
            <summary>
            Represents fonts from the compiled shape (SHX) files.
            </summary>
        </member>
        <member name="M:CADImport.SHXFont.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.SHXFont">SHXFont</see> class.
            </summary>
            <param name="aFontPath">A <b>string</b> containing a path to the SHX file to be loaded.</param>
        </member>
        <member name="M:CADImport.SHXFont.FindShape(CADImport.SHXFontList,System.UInt16@,System.String@,System.String@)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:CADImport.SHXFont.Load">
            <summary>
            Loads the SHX fonts specified by the <see cref="P:CADImport.SHXFont.Name">name</see> property. 
            </summary>
            <returns><b>true</b> if the SHX fonts have been loaded; otherwize, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.SHXFont.IsUnicodeSHX(CADImport.SHXFontList,System.String)">
            <summary>
            Returns a value indicating whether the SHX fonts are the unicode SHX fonts and contained in the specified list.
            </summary>
            <param name="ASHXStyles">A list of the SHX fonts where the specified SHX fonts are searched for.</param>
            <param name="AFontName">A <b>string</b> containing a name of the SHX fonts to search for.</param>
            <returns><b>true</b> if the SHX fonts are the unicode SHX fonts and contained in the specified list; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.SHXFont.AddNewShape(System.UInt16,System.String,System.Collections.ArrayList)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:CADImport.SHXFont.Shapes">
            <summary>
            Gets or sets a collection of shapes for this SHX font.
            </summary>
        </member>
        <member name="P:CADImport.SHXFont.Loaded">
            <summary>
            Gets the boolean value indicating whether a SHX font with the specified  
            <see cref="P:CADImport.SHXFont.Name">name</see> had been loaded.
            </summary>
            <value><b>true</b> if the SHX fonts had been loaded; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:CADImport.SHXFont.Name">
            <summary>
            Gets a full path to the file containing the SHX fonts.
            </summary>
            <value>A <b>string</b> containing a full path to the SHX file.</value>
        </member>
        <member name="P:CADImport.SHXFont.NumChars">
            <summary>
            Gets a number of characters in the loaded SHX file.
            </summary>
        </member>
        <member name="T:CADImport.SHXRecord">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:CADImport.TextGeneration">
            <summary>
            Specifies a direction of generating text letters.
            </summary>
        </member>
        <member name="F:CADImport.TextGeneration.Normal">
            <summary>
            Text letters are positioned normally.
            </summary>
        </member>
        <member name="F:CADImport.TextGeneration.Backward">
            <summary>
            Text letters are generated backward (mirrored in X direction).
            </summary>
        </member>
        <member name="F:CADImport.TextGeneration.UpSideDown">
            <summary>
            Text letters are positioned upside down (mirrored in Y direction).
            </summary>
        </member>
        <member name="T:CADImport.SHXVertex">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:CADImport.TextStyle">
            <summary>
            Represents a text style for the SHX fonts.
            </summary>
        </member>
        <member name="F:CADImport.TextStyle.fontPath">
            <summary>
            A path to the SHX file.
            </summary>
        </member>
        <member name="F:CADImport.TextStyle.bigFontPath">
            <summary>
            A path to the file containing big fonts.
            </summary>
        </member>
        <member name="F:CADImport.TextStyle.name">
            <summary>
            A name of the text style.
            </summary>
        </member>
        <member name="F:CADImport.TextStyle.obliqueAngle">
            <summary>
            A tilt angle for the letters defined by the style.
            </summary>
        </member>
        <member name="F:CADImport.TextStyle.width">
            <summary>
            A <see cref="P:CADImport.CADStyle.WidthFactor">WidthFactor</see> for the text.
            </summary>
        </member>
        <member name="F:CADImport.TextStyle.vertical">
            <summary>
            A boolean value indicating whether the text is vertical.
            </summary>
        </member>
        <member name="F:CADImport.TextStyle.upSideDown">
            <summary>
            A boolean value indicating whether the text is upside down (mirrored in Y direction).
            </summary>
        </member>
        <member name="F:CADImport.TextStyle.backwards">
            <summary>
            A boolean value indicating whether the text is backward (mirrored in X direction).
            </summary>
        </member>
        <member name="F:CADImport.TextStyle.fontIndex">
            <summary>
            An index of the SHX font in the <see cref="T:CADImport.SHXFontList">SHXFontList</see>.
            </summary>
        </member>
        <member name="F:CADImport.TextStyle.bigFontIndex">
            <summary>
            An index of the big SHX font in the <see cref="T:CADImport.SHXFontList">SHXFontList</see>.
            </summary>
        </member>
        <member name="F:CADImport.TextStyle.fontExists">
            <summary>
            A boolean value indicating whether the SHX file exists.
            </summary>
        </member>
        <member name="T:CADImport.SHXKinds">
            <summary>
            Specifies a type of the SHX fonts.
            </summary>
        </member>
        <member name="F:CADImport.SHXKinds.NormSHX">
            <summary>
            Normal SHX fonts.
            </summary>
        </member>
        <member name="F:CADImport.SHXKinds.BigSHX">
            <summary>
            SHX big fonts.
            </summary>
        </member>
        <member name="F:CADImport.SHXKinds.UnicodeSHX">
            <summary>
            SHX unicode fonts.
            </summary>
        </member>
        <member name="T:CADImport.SHXFontList">
            <summary>
            Represents a list of SHX fonts among which the default SHX fonts are searched.
            </summary>
            <remarks>The default SHX fonts are "txt.shx" and location of this file is searched in the 
            list represented by the <b>SHXFontList</b> class.</remarks>
        </member>
        <member name="M:CADImport.SHXFontList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.SHXFontList">SHXFontList</see> class.
            </summary>
            <param name="aSearchPath">A <b>string</b> containing all paths where to search for a default 
            SHX file.</param>
            <param name="aDefault">A <b>string</b> containing a name of the default SHX file.</param>
        </member>
        <member name="M:CADImport.SHXFontList.AddStyle(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            Creates a text style and adds it to the current <see cref="T:CADImport.SHXFontList">SHXFontList</see>.
            </summary>
            <param name="aName">A name of the text style to add to the <see cref="T:CADImport.SHXFontList">SHXFontList</see>.</param>
            <param name="aFontName">A name of the SHX fonts to add to the <see cref="T:CADImport.SHXFontList">SHXFontList</see>.</param>
            <param name="aBigFontName">A <b>string</b> containing a path to the big fonts file. If the style to be added doesn't 
            specify big fonts, this string is empty.</param>
            <param name="aVertical">A boolean value indicating whether the text is vertical.</param>
            <param name="aUpSideDown">A boolean value indicating whether the text is upside down (mirrored in Y direction).</param>
            <param name="aBackwards">A boolean value indicating whether the text is backward (mirrored in X direction).</param>
            <param name="aObliqueAngle">A tilt angle for the text letters.</param>
            <param name="aWidth">A <see cref="P:CADImport.CADStyle.WidthFactor">WidthFactor</see> for the text.</param>
        </member>
        <member name="P:CADImport.SHXFontList.ShapeFonts">
            <summary>
            Gets or sets a list of shapes of the SHX fonts.
            </summary>
        </member>
        <member name="P:CADImport.SHXFontList.DefaultFont">
            <summary>
            Gets a name of the default SHX file.
            </summary>
            <value>A <b>string</b> containing a name of the default SHX file.</value>
        </member>
        <member name="P:CADImport.SHXFontList.DefaultFontPath">
            <summary>
            Gets or sets a path to the default SHX file.
            </summary>
            <value>A <b>string</b> containing a path to the default SHX file.</value>
        </member>
        <member name="P:CADImport.SHXFontList.Fonts">
            <summary>
            Gets a list of SHX fonts from the current <see cref="T:CADImport.SHXFontList">SHXFontList</see>.
            </summary>
        </member>
        <member name="P:CADImport.SHXFontList.FontNames">
            <summary>
            Gets a list of names of the SHX fonts from the current <see cref="T:CADImport.SHXFontList">SHXFontList</see>.
            </summary>
        </member>
        <member name="P:CADImport.SHXFontList.Styles">
            <summary>
            Gets a list of font styles from the current <see cref="T:CADImport.SHXFontList">SHXFontList</see>.
            </summary>
        </member>
        <member name="P:CADImport.SHXFontList.SearchPath">
            <summary>
            Gets a list of paths from the current <see cref="T:CADImport.SHXFontList">SHXFontList</see>.
            </summary>
            <remarks>A return value contains a list of paths where search for a default SHX file.</remarks>
        </member>
        <member name="P:CADImport.SHXFontList.SearchedFonts">
            <summary>
            Gets a list that contains results of search for each SHX font.
            </summary>
            <remarks>Implements the way of fonts search caching.</remarks>
        </member>
        <member name="T:CADImport.Professional.Marker">
            <summary>
            Represents a marker on the selected entity
            </summary>
        </member>
        <member name="M:CADImport.Professional.Marker.#ctor(CADImport.CADEntity,System.Byte,System.Int32,CADImport.DPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Professional.Marker">Marker</see> class.
            </summary>
            <param name="ent">The selected <see cref="T:CADImport.CADEntity">CADEntity</see>.</param>
            <param name="typePt">Marker type; sets how <see cref="T:CADImport.CADEntity">Entity</see> will be changed using this marker</param>
            <param name="index">An index of the marker in the collection of markers used for selecting the <see cref="T:CADImport.CADEntity">CADEntity</see>.</param>
            <param name="pt">A <see cref="T:CADImport.DPoint">DPoint</see> specifying a position of the <see cref="T:CADImport.Professional.Marker">Marker</see> on the CAD image.</param>
        </member>
        <member name="M:CADImport.Professional.Marker.Paint(System.Drawing.Graphics,CADImport.CADImage)">
            <summary>
            Draws markers on the selected entity.
            </summary>
            <param name="gr">A <see cref="T:System.Drawing.Graphics">Graphics</see> object used for drawing the markers.</param>
            <param name="img">A <see cref="T:CADImport.CADImage">CADImage</see> on which the selected entity is located.</param>
        </member>
        <member name="P:CADImport.Professional.Marker.Entity">
            <summary>
            An entity for which current marker was created
            </summary>
        </member>
        <member name="P:CADImport.Professional.Marker.Index">
            <summary>
            Marker's number in the collection of markers
            </summary>
        </member>
        <member name="P:CADImport.Professional.Marker.Point">
            <summary>
            Absolute coordinates of the marker
            </summary>
        </member>
        <member name="P:CADImport.Professional.Marker.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CADImport.Professional.Marker">Marker</see> is selected.
            </summary>
            <value><b>true</b> if this <see cref="T:CADImport.Professional.Marker">Marker</see> is selected; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:CADImport.Professional.Operation">
            <summary>
            Operation, for professional version
            </summary>
        </member>
        <member name="F:CADImport.Professional.Operation.Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:CADImport.Professional.Operation.Change">
            <summary>
            Change
            </summary>
        </member>
        <member name="F:CADImport.Professional.Operation.Create">
            <summary>
            Create
            </summary>
        </member>
        <member name="T:CADImport.Professional.RedoClass">
            <summary>
            Auxiliary class for redo and undo operation, for professional version
            </summary>
        </member>
        <member name="F:CADImport.Professional.RedoClass.entityCollection">
            <summary>
            <see cref="T:CADImport.CADEntity">CADEntity</see> object.
            </summary>
        </member>
        <member name="F:CADImport.Professional.RedoClass.operation">
            <summary>
            <see cref="T:CADImport.Professional.Operation">Operation</see>
            </summary>
        </member>
        <member name="M:CADImport.Professional.RedoClass.AddEntityToCollect(CADImport.CADEntity)">
            <summary>
            Adds entity to <see cref="P:CADImport.Professional.RedoClass.EntityCollection">entity collection</see>
            </summary>
            <param name="ent"></param>
        </member>
        <member name="P:CADImport.Professional.RedoClass.EntityCollection">
            <summary>
            Gets or sets a list of entities which are under effect
            </summary>
        </member>
        <member name="P:CADImport.Professional.RedoClass.Entity">
            <summary>
            Gets or sets the first entity in <see cref="P:CADImport.Professional.RedoClass.EntityCollection">entity collection</see>
            </summary>
        </member>
        <member name="M:CADImport.Professional.EntityChanger.ClearMarkers">
            <summary>
            Clears a collection of markers.
            </summary>
        </member>
        <member name="M:CADImport.Professional.EntityChanger.ChangePositionSelectedEntity(System.Double,System.Double,System.Double,System.Drawing.Graphics,System.Boolean,CADImport.CADEntity)">
            <summary>
            Changes a position of the selected entity.
            </summary>
            <param name="dx">A position displacement in the direction of the X axis.</param>
            <param name="dy">A position displacement in the direction of the Y axis.</param>
            <param name="dz">A position displacement in the direction of the Z axis.</param>
            <param name="graph">A <see cref="T:System.Drawing.Graphics">Graphics</see> object used for drawing the displaced entity in the new position.</param>
            <param name="det">A boolean value indicating whether the selected entity is redrawn in the new position.
            <b>true</b> if the entity is redrawn, <b>false</b> if the entity is not redrawn.</param>
            <param name="ent">The selected <see cref="T:CADImport.CADEntity">CADEntity</see>.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle">Rectangle</see> that bounds the selected entity.</returns>
        </member>
        <member name="M:CADImport.Professional.EntityChanger.SetNewEntityMarkerPos(System.Double,System.Double,System.Double)">
            <summary>
            Sets a new position for the selected entity. The entity's new position is defined by the position of the marker.
            </summary>
            <param name="dx">A position displacement of the marker in the direction of the X axis.</param>
            <param name="dy">A position displacement of the marker in the direction of the Y axis.</param>
            <param name="dz">A position displacement of the marker in the direction of the Z axis.</param>
        </member>
        <member name="M:CADImport.Professional.EntityChanger.RemoveEntity(CADImport.CADEntity,System.Boolean)">
            <summary>
            Remove entity form <see cref="P:CADImport.CADConverter.Entities">entities collection</see>
            </summary>
            <param name="ent">removed entity</param>
            <returns>true or false - result remove</returns>
            <param name="createUndo">If <b>true</b> create undo operation.</param>
        </member>
        <member name="M:CADImport.Professional.EntityChanger.Undo">
            <summary>
            Undo change 
            </summary>
        </member>
        <member name="M:CADImport.Professional.EntityChanger.Redo">
            <summary>
            Redo change 
            </summary>
        </member>
        <member name="M:CADImport.Professional.EntityChanger.SetNewPosEntity(System.Double,System.Double,System.Double,CADImport.CADEntity)">
            <summary>
            Sets a new position for the specified entity.
            </summary>
            <param name="dx">A position displacement in the direction of the X axis.</param>
            <param name="dy">A position displacement in the direction of the Y axis.</param>
            <param name="dz">A position displacement in the direction of the Z axis.</param>
            <param name="ent">A <see cref="T:CADImport.CADEntity">CADEntity</see> for which a new position is set.</param>
        </member>
        <member name="P:CADImport.Professional.EntityChanger.UndoMode">
            <summary>
            Undo disable or enable for professional version
            </summary>
        </member>
        <member name="P:CADImport.Professional.EntityChanger.CurrentMarker">
            <summary>
            Gets a currently selected marker.
            </summary>
            <value>A currently selected <see cref="T:CADImport.Professional.Marker">Marker</see> or null if no marker is selected.</value>
        </member>
        <member name="P:CADImport.Professional.EntityChanger.UndoCollection">
            <summary>
            Undo entity collection - for professional version
            </summary>
        </member>
        <member name="P:CADImport.Professional.EntityChanger.RedoCollection">
            <summary>
            redo entity collection - for professional version
            </summary>
        </member>
        <member name="T:CADImport.Printing.PrintPreviewControlEx">
            <summary>
            <para> Represents the raw "preview" part of print previewing, 
            without any dialog boxes or buttons. Most <see cref="T:System.Windows.Forms.PrintPreviewControl" /> objects are found on <see cref="T:System.Windows.Forms.PrintPreviewDialog" />
            objects, but they do not have to be.
            </para>
            </summary>
        </member>
        <member name="M:CADImport.Printing.PrintPreviewControlEx.#ctor">
            <summary>
            <para> Initializes a new instance of the <see cref="T:CADImport.Printing.PrintPreviewControlEx"/> class.
            </para>
            </summary>
        </member>
        <member name="M:CADImport.Printing.PrintPreviewControlEx.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            <para>Raises the <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.</para>
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:CADImport.Printing.PrintPreviewControlEx.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            <para>Raises the <see cref="E:System.Windows.Forms.Control.MouseMove" /> event.</para>
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:CADImport.Printing.PrintPreviewControlEx.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            <para>Raises the <see cref="E:System.Windows.Forms.Control.MouseUp" /> event.</para>
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:CADImport.Printing.PrintPreviewControlEx.InvalidatePreview">
            <summary>
            <para>
            Refreshes the preview of the document.
            </para>
            </summary>
        </member>
        <member name="M:CADImport.Printing.PrintPreviewControlEx.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            <para>Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</para>
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:CADImport.Printing.PrintPreviewControlEx.OnResize(System.EventArgs)">
            <summary>
            <para>Raises the <see cref="E:System.Windows.Forms.Control.Resize" /> event.</para>
            </summary>
            <param name="eventargs">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:CADImport.Printing.PrintPreviewControlEx.OnStartPageChanged(System.EventArgs)">
            <summary>
            <para>Raises the <see cref="E:System.Windows.Forms.PrintPreviewControl.StartPageChanged" /> event.</para>
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:CADImport.Printing.PrintPreviewControlEx.WndProc(System.Windows.Forms.Message@)">
            <summary>
            <para>Processes Windows messages.</para>
            </summary>
            <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process. </param>
        </member>
        <member name="P:CADImport.Printing.PrintPreviewControlEx.DeselectedPages">
            <summary>
            Gets or sets pages, which will be passed on printing
            </summary>
        </member>
        <member name="E:CADImport.Printing.PrintPreviewControlEx.StartPageChanged">
            <summary>
            <para>Occurs when the start page changes.</para>
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintPreviewControlEx.AutoZoom">
            <summary>
            Gets or sets a value indicating whether resizing the
            control or changing the number of pages shown automatically adjusts
            the <see cref="P:System.Windows.Forms.PrintPreviewControl.Zoom" /> property.
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintPreviewControlEx.Columns">
            <summary>
            <para>
            Gets or sets the number of pages
            displayed horizontally across the screen.
            </para>
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintPreviewControlEx.CreateParams">
            <summary>
            <para>Gets the required creation parameters when the control handle is created.</para>
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintPreviewControlEx.Document">
            <summary>
            <para> Gets or sets the document to preview.
            </para>
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintPreviewControlEx.Rows">
            <summary>
            <para> Gets or sets the number of pages displayed vertically down the screen.</para>
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintPreviewControlEx.StartPage">
            <summary>
            <para> Gets or sets the page number of the upper left page. </para>
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintPreviewControlEx.Text">
            <summary>
            <para>Gets or sets the text associated with this control. </para>
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintPreviewControlEx.UseAntiAlias">
            <summary>
            <para>Gets or sets a value indicating whether printing uses the 
            anti-aliasing features of the operating system.</para>
            </summary>
        </member>
        <member name="P:CADImport.Printing.PrintPreviewControlEx.Zoom">
            <summary>
            <para> Gets or sets a value indicating how large the pages will appear.
            </para>
            </summary>
            <exception cref="T:System.ArgumentException">The value is less than 0. </exception>
        </member>
        <member name="T:CADImport.ObjEntity">
            <summary>
            Provides functionality for displaying the entity properties in the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> control.
            </summary>
        </member>
        <member name="F:CADImport.ObjEntity.cadImage">
            <summary>
            A <see cref="T:CADImport.CADImage">CADImage</see> which contains this <see cref="T:CADImport.ObjEntity">ObjEntity</see>.
            </summary>
        </member>
        <member name="F:CADImport.ObjEntity.propGrid">
            <summary>
            A <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> object representing a table where the entity's properties are displayed.
            </summary>
        </member>
        <member name="M:CADImport.ObjEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.ObjEntity">ObjEntity</see> class.
            </summary>
        </member>
        <member name="P:CADImport.ObjEntity.LayersList">
            <summary>
            Gets or sets a list of layers for the properties window.
            </summary>
            <value>An array of <b>string</b>s containing names of layers.</value>
        </member>
        <member name="P:CADImport.ObjEntity.Line_types_list">
            <summary>
            Gets or sets a list of types of the entity's lines
            </summary>
        </member>
        <member name="P:CADImport.ObjEntity.Name">
            <summary>
            Gets a name of the entity.
            </summary>
            <value>A <b>string</b> containing a name of the entity.</value>
        </member>
        <member name="P:CADImport.ObjEntity.Color">
            <summary>
            Gets or sets a color of the entity.
            </summary>
            <value>A <see cref="T:System.Drawing.Color">Color</see> of the entity.</value>
        </member>
        <member name="P:CADImport.ObjEntity.Color_type">
            <summary>
            Gets or sets a color type for the entity. 
            </summary>
            <value>A <b>string</b> containing a color type for the entity.</value>
        </member>
        <member name="P:CADImport.ObjEntity.Left">
            <summary>
            Gets the X coordinate of the entity's left-most point.
            </summary>
        </member>
        <member name="P:CADImport.ObjEntity.Top">
            <summary>
            Gets the Y coordinate of the entity's highest point.
            </summary>
        </member>
        <member name="P:CADImport.ObjEntity.Right">
            <summary>
            Gets the X coordinate of the entity's right-most point.
            </summary>
        </member>
        <member name="P:CADImport.ObjEntity.Bottom">
            <summary>
            Gets the Y coordinate of the entity's lowest point.
            </summary>
        </member>
        <member name="P:CADImport.ObjEntity.Z1">
            <summary>
            Gets the Z coordinate of the entity's start point.
            </summary>
        </member>
        <member name="P:CADImport.ObjEntity.Z2">
            <summary>
            Gets the Z coordinate of the entity's end point.
            </summary>
        </member>
        <member name="P:CADImport.ObjEntity.Handle">
            <summary>
            Gets a number that uniquely identifies the entity.
            </summary>
        </member>
        <member name="P:CADImport.ObjEntity.Layer">
            <summary>
            Gets or sets a name of a layer containing this entity.
            </summary>
        </member>
        <member name="P:CADImport.ObjEntity.Line_type">
            <summary>
            Gets a line type for an entity.
            </summary>
        </member>
        <member name="P:CADImport.ObjEntity.Line_weight">
            <summary>
            Gets or sets a thickness of lines used for drawing this entity.
            </summary>
            <value> A <b>string</b> representation of the line thickness used for drawing this entity.</value>
        </member>
        <member name="T:CADImport.ObjLine">
            <summary>
            Provides functionality for displaying <see cref="T:CADImport.CADLine">CADLine</see> properties in the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> control.
            </summary>
        </member>
        <member name="P:CADImport.ObjLine.Start_point">
            <summary>
            Gets or sets the start point of the line.
            </summary>
            <value>A <see cref="T:CADImport.Point3D">Point3D</see> object representing the start point of the line.</value>
        </member>
        <member name="P:CADImport.ObjLine.End_point">
            <summary>
            Gets or sets the end point of the line.
            </summary>
            <value>A <see cref="T:CADImport.Point3D">Point3D</see> object representing the end point of the line.</value>
        </member>
        <member name="P:CADImport.ObjLine.Ticks">
            <summary>
            Gets a quantity of ticks on the length of the line pattern.
            </summary>
        </member>
        <member name="P:CADImport.ObjLine.Thickness">
            <summary>
            Gets a line thickness measured along the axis Z for this entity.
            </summary>
        </member>
        <member name="T:CADImport.ObjInsert">
            <summary>
            Provides functionality for displaying <see cref="T:CADImport.CADInsert">CADInsert</see> properties in the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> control.
            </summary>
        </member>
        <member name="P:CADImport.ObjInsert.Attribs">
            <summary>
            Gets or sets attribs for the insert.
            </summary>
        </member>
        <member name="P:CADImport.ObjInsert.Location">
            <summary>
            Gets or sets the start point of the insert.
            </summary>
            <value>A <see cref="T:CADImport.Point3D">Point3D</see> object representing the start point of the insert.</value>
        </member>
        <member name="P:CADImport.ObjInsert.Scale">
            <summary>
            Gets or sets the scale point of the insert.
            </summary>
            <value>A <see cref="T:CADImport.Point3D">Point3D</see> object representing the scale point of the insert.</value>
        </member>
        <member name="P:CADImport.ObjInsert.Angle">
            <summary>
            Gets or sets an angle of the insert.
            </summary>
        </member>
        <member name="P:CADImport.ObjInsert.Block_name">
            <summary>
            Gets a block name of the insert.
            </summary>
        </member>
        <member name="T:CADImport.ObjDimension">
            <summary>
            Provides functionality for displaying <see cref="T:CADImport.CADDimension">CADDimension</see> properties in the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> control.
            </summary>
        </member>
        <member name="P:CADImport.ObjDimension.Contents">
            <summary>
            Gets or sets a text of a dimension.
            </summary>
        </member>
        <member name="P:CADImport.ObjDimension.Color">
            <summary>
            Gets or sets a color of an entity.
            </summary>
            <value>A <see cref="T:System.Drawing.Color">Color</see> of the entity.</value>
        </member>
        <member name="P:CADImport.ObjDimension.Control_point">
            <summary>
            Gets or sets a control point of the dimension.
            </summary>		
        </member>
        <member name="T:CADImport.ObjEllipse">
            <summary>
            Provides functionality for displaying <see cref="T:CADImport.CADEllipse">CADEllipse</see> properties in the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> control.
            </summary>
        </member>
        <member name="P:CADImport.ObjEllipse.Center_point">
            <summary>
            Gets or sets the central point of the ellipse.
            </summary>
            <value>A <see cref="T:CADImport.Point3D">Point3D</see> object representing the central point of the ellipse.</value>
        </member>
        <member name="P:CADImport.ObjEllipse.Start_angle">
            <summary>
            Gets or sets an angle between axis X and the line connecting the central point and the start point of the ellipse.
            </summary>
        </member>
        <member name="P:CADImport.ObjEllipse.End_angle">
            <summary>
            Gets or sets an angle between axis X and the line connecting the central point and the end point of the ellipse.
            </summary>
        </member>
        <member name="P:CADImport.ObjEllipse.Ratio">
            <summary>
            Gets or sets a ratio between the minor axis and the major axis of the ellipse.
            </summary>
        </member>
        <member name="P:CADImport.ObjEllipse.Radius">
            <summary>
            Gets a radius of the ellipse.
            </summary>
        </member>
        <member name="T:CADImport.ObjCircle">
            <summary>
            Provides functionality for displaying <see cref="T:CADImport.CADCircle">CADCircle</see> properties in the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> control.
            </summary>
        </member>
        <member name="P:CADImport.ObjCircle.Center_point">
            <summary>
            Gets or sets the central point of this circle.
            </summary>
            <value>A <see cref="T:CADImport.Point3D">Point3D</see> object representing the central point of this circle.</value>
        </member>
        <member name="P:CADImport.ObjCircle.Radius">
            <summary>
            Gets or sets a radius of the circle.
            </summary>
        </member>
        <member name="P:CADImport.ObjCircle.Area">
            <summary>
            Gets or set a square of the Circle.
            </summary>
        </member>
        <member name="P:CADImport.ObjCircle.Circumference">
            <summary>
            Gets or set a circumference of the Circle.
            </summary>
        </member>
        <member name="T:CADImport.ObjText">
            <summary>
            Provides functionality for displaying <see cref="T:CADImport.CADText">CADText</see> properties in the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> control.
            </summary>
        </member>
        <member name="P:CADImport.ObjText.Contents">
            <summary>
            Gets or sets text contents for this <see cref="T:CADImport.ObjText">ObjText</see> object.
            </summary>
        </member>
        <member name="P:CADImport.ObjText.Rotation">
            <summary>
            Gets or sets a rotation angle of a text.
            </summary>
        </member>
        <member name="P:CADImport.ObjText.Align">
            <summary>
            Gets or sets the current horizontal alignment of the text.
            </summary>
            <value>A <b>string</b> containing the current aligning option.</value>
        </member>
        <member name="P:CADImport.ObjText.Font_name">
            <summary>
            Gets or sets a font name for this text.
            </summary>
        </member>
        <member name="T:CADImport.ObjMText">
            <summary>
            Provides functionality for displaying <see cref="T:CADImport.CADMText">CADMText</see> properties in the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> control.
            </summary>
        </member>
        <member name="P:CADImport.ObjMText.Color">
            <summary>
            Gets or sets a color of the specified entity.
            </summary>
            <value>A <see cref="T:System.Drawing.Color">Color</see> of the text.</value>
        </member>
        <member name="P:CADImport.ObjMText.Contents">
            <summary>
            Gets text contents for this object.
            </summary>
        </member>
        <member name="P:CADImport.ObjMText.Rotation">
            <summary>
            Gets or sets a rotation angle of the multiline text.
            </summary>
        </member>
        <member name="P:CADImport.ObjMText.Align">
            <summary>
            Gets or sets the current alignment of the multiline text.
            </summary>
            <value>A <b>string</b> containing the current aligning option.</value>
        </member>
        <member name="T:CADImport.AlignConverter">
            <summary>
            Provides functionality for both-way converting <b>string</b>s to the objects representing aligning options.
            </summary>
        </member>
        <member name="F:CADImport.AlignConverter.AlignsConst">
            <summary>
            A collection of values representing aligning options.
            </summary>
            <remarks>There are following aligning options: <b>Top left</b>, <b>Top center</b>, <b>Top right</b>, 
            <b>Middle left</b>, <b>Middle center</b>, <b>Middle right</b>, <b>Bottom left</b>, <b>Bottom center</b>, <b>Bottom right</b>, <b>None</b>.</remarks>
        </member>
        <member name="M:CADImport.AlignConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overloaded. Returns a value indicating that <see cref="T:CADImport.AlignConverter">AlignConverter</see> supports standard values.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext">ITypeDescriptorContext</see> that provides a format context.</param>
            <returns><b>true</b>.</returns>
        </member>
        <member name="M:CADImport.AlignConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overloaded. Returns a collection of standard values representing the aligning options.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext">ITypeDescriptorContext</see> that provides a format context.</param>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection">StandardValuesCollection</see> that holds a standard set of valid values: 
            <b>ByValue</b>, <b>ByLayer</b>, <b>ByBlock</b>, <b>None</b>.</returns>
        </member>
        <member name="M:CADImport.AlignConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overloaded. Gets a value indicating whether the collection of standard values returned from <see cref="M:CADImport.AlignConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">GetStandardValues</see> is an exclusive list.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext">ITypeDescriptorContext</see> that provides a format context.</param>
            <returns><b>true</b> if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection">StandardValuesCollection</see> returned from <see cref="M:CADImport.AlignConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">GetStandardValues</see> is an exhaustive list of possible values; false if other values are possible.</returns>
            <remarks>If the list is exclusive, such as in an enumeration data type, then no other values are valid. If the list is not exclusive, then other valid values might exist in addition to the list of standard values that the <see cref="M:CADImport.AlignConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">GetStandardValues</see> method provides.</remarks>
        </member>
        <member name="F:CADImport.AlignTextConverter.AlignConst">
            <summary>
            A collection of values representing horizontal alignment options.
            </summary>
        </member>
        <member name="T:CADImport.ObjSolid">
            <summary>
            Provides functionality for displaying <see cref="T:CADImport.CADSolid">CADSolid</see> properties in the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> control.
            </summary>
        </member>
        <member name="T:CADImport.ObjLayer">
            <summary>
            Provides functionality for displaying <see cref="T:CADImport.CADLayer">CADLayer</see> properties in the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> control.
            </summary>
        </member>
        <member name="T:CADImport.PointValueChange">
            <summary>
            Represents methods that will handle the events of changing the coordinates of a three-dimensional point.
            </summary>
            <param name="val">A <see cref="T:CADImport.Point3D">Point3D</see> object used for displaying the coordinates of three-dimensional point in the properties window.</param>
        </member>
        <member name="T:CADImport.Point3D">
            <summary>
            Provides methods for displaying the coordinates of three-dimensional point in the properties window.
            </summary>
        </member>
        <member name="M:CADImport.Point3D.OnValueChange(CADImport.Point3D)">
            <summary>
            Raises the <see cref="E:CADImport.Point3D.ChangeValue">ChangeValue</see> event.
            </summary>
            <param name="val">A <see cref="T:CADImport.Point3D">Point3D</see> object representing the event data.</param>
        </member>
        <member name="M:CADImport.Point3D.#ctor(CADImport.DPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Point3D">Point3D</see> class.
            </summary>
            <param name="val">A <see cref="T:CADImport.DPoint">DPoint</see> whose coordinates are displayed in the properties window.</param>
        </member>
        <member name="M:CADImport.Point3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Point3D">Point3D</see> class.
            </summary>
        </member>
        <member name="E:CADImport.Point3D.ChangeValue">
            <summary>
            Occurs when a coordinate of a three-dimensional point in the properties window is changed.
            </summary>
        </member>
        <member name="P:CADImport.Point3D.X">
            <summary>
            Gets or sets the X coordinate of this <see cref="T:CADImport.Point3D">Point3D</see> object.
            </summary>
        </member>
        <member name="P:CADImport.Point3D.Y">
            <summary>
            Gets or sets the Y coordinate of this <see cref="T:CADImport.Point3D">Point3D</see> object.
            </summary>
        </member>
        <member name="P:CADImport.Point3D.Z">
            <summary>
            Gets or sets the Z coordinate of this <see cref="T:CADImport.Point3D">Point3D</see> object.
            </summary>
        </member>
        <member name="T:CADImport.Point3DExt">
            <summary>
            Expand to see the spelling options for the application
            </summary>
        </member>
        <member name="M:CADImport.Point3DExt.#ctor(CADImport.DPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Point3DExt">Point3DExt</see> class.
            </summary>
            <param name="val">A <see cref="T:CADImport.DPoint">DPoint</see> whose coordinates are displayed in the properties window.</param>
        </member>
        <member name="T:CADImport.VertexValueChange">
            <summary>
            Delegate for <see cref="T:CADImport.Vertex3D">Vertex3D</see> editing
            </summary>
        </member>
        <member name="T:CADImport.Vertex3D">
            <summary>
            Provides methods for displaying the coordinates of three-dimensional vertex in the properties window.
            </summary>
        </member>
        <member name="M:CADImport.Vertex3D.OnValueChange(CADImport.Vertex3D)">
            <summary>
            Raises the <see cref="E:CADImport.Vertex3D.ChangeValue">ChangeValue</see> event.
            </summary>
            <param name="val">A <see cref="T:CADImport.Vertex3D">Vertex3D</see> object representing the event data.</param>
        </member>
        <member name="M:CADImport.Vertex3D.#ctor(CADImport.CADVertex)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Point3D">Point3D</see> class.
            </summary>
            <param name="val">A <see cref="T:CADImport.DPoint">DPoint</see> whose coordinates are displayed in the properties window.</param>
        </member>
        <member name="M:CADImport.Vertex3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Vertex3D">Vertex3D</see> class.
            </summary>
        </member>
        <member name="E:CADImport.Vertex3D.ChangeValue">
            <summary>
            Occurs when a coordinate of a three-dimensional vertex in the properties window is changed.
            </summary>
        </member>
        <member name="P:CADImport.Vertex3D.Point">
            <summary>
            Gets or sets Vertex3D object position
            </summary>
        </member>
        <member name="P:CADImport.Vertex3D.Bulge">
            <summary>
            Gets or sets Vertex3D object roundedness
            </summary>
        </member>
        <member name="P:CADImport.Vertex3D.StartWidth">
            <summary>
            Gets or sets a width at the start point of a polyline segment that started at this vertex.
            </summary>		
        </member>
        <member name="P:CADImport.Vertex3D.EndWidth">
            <summary>
            Gets or sets a width at the end point of a polyline segment that started at this vertex.
            </summary>
        </member>
        <member name="T:CADImport.LayerConverter">
            <summary>
            Provides functionality for both-way converting the <b>string</b> objects to objects representing layers.
            </summary>
        </member>
        <member name="M:CADImport.LayerConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overloaded. Returns a value indicating that <see cref="T:CADImport.LayerConverter">LayerConverter</see> supports standard values.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext">ITypeDescriptorContext</see> that provides a format context.</param>
            <returns><b>true</b>.</returns>
        </member>
        <member name="M:CADImport.LayerConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overloaded. Returns a collection of standard layer values.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext">ITypeDescriptorContext</see> that provides a format context.</param>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection">StandardValuesCollection</see> that holds a set of valid layers loaded from the current CAD image.</returns>
        </member>
        <member name="M:CADImport.LayerConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overloaded. Returns a value indicating that a collection returned by the <see cref="M:CADImport.LayerConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">GetStandardValues</see> method is not an exclusive list.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext">ITypeDescriptorContext</see> that provides a format context.</param>
            <returns><b>false</b>.</returns>
            <remarks>If the list is exclusive, such as in an enumeration data type, then no other values are valid. If the list is not exclusive, 
            then other valid values might exist in addition to the list of standard values that <see cref="M:CADImport.LayerConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">GetStandardValues</see> provides.
            </remarks>
        </member>
        <member name="T:CADImport.ColorTypeConverter">
            <summary>
            Provides functionality for both-way converting the <b>string</b> objects to objects representing colors.
            </summary>
        </member>
        <member name="M:CADImport.ColorTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overloaded. Returns a value indicating that <see cref="T:CADImport.ColorTypeConverter">ColorTypeConverter</see> supports standard values.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext">ITypeDescriptorContext</see> that provides a format context.</param>
            <returns><b>true</b>.</returns>
        </member>
        <member name="M:CADImport.ColorTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overloaded. Returns a collection of standard color values.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext">ITypeDescriptorContext</see> that provides a format context.</param>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection">StandardValuesCollection</see> that holds a standard set of valid values: 
            <b>ByValue</b>, <b>ByLayer</b>, <b>ByBlock</b>, <b>None</b>.</returns>
        </member>
        <member name="M:CADImport.ColorTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overloaded. Returns a value indicating that a collection returned by the <see cref="M:CADImport.ColorTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">GetStandardValues</see> method is not an exclusive list.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext">ITypeDescriptorContext</see> that provides a format context.</param>
            <returns><b>false</b>.</returns>
            <remarks>If the list is exclusive, such as in an enumeration data type, then no other values are valid. If the list is not exclusive, 
            then other valid values might exist in addition to the list of standard values that <see cref="M:CADImport.ColorTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">GetStandardValues</see> provides.
            </remarks>
        </member>
        <member name="T:CADImport.LineWeightConverter">
            <summary>
            Provides functionality for both-way converting the <b>string</b> objects to objects representing lineweight.
            </summary>
        </member>
        <member name="M:CADImport.LineWeightConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overloaded. Returns a value indicating that <see cref="T:CADImport.LineWeightConverter">LineWeightTypeConverter</see> supports standard values.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext">ITypeDescriptorContext</see> that provides a format context.</param>
            <returns><b>true</b>.</returns>
        </member>
        <member name="M:CADImport.LineWeightConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overloaded. Returns a collection of standard lineweight values.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext">ITypeDescriptorContext</see> that provides a format context.</param>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection">StandardValuesCollection</see> that holds a standard set of valid values: 
            <b>Default</b>, <b>ByLayer</b>, <b>ByBlock</b>, .</returns>
        </member>
        <member name="M:CADImport.LineWeightConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overloaded. Returns a value indicating that a collection returned by the <see cref="M:CADImport.LineWeightConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">GetStandardValues</see> method is not an exclusive list.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext">ITypeDescriptorContext</see> that provides a format context.</param>
            <returns><b>false</b>.</returns>
            <remarks>If the list is exclusive, such as in an enumeration data type, then no other values are valid. If the list is not exclusive, 
            then other valid values might exist in addition to the list of standard values that <see cref="M:CADImport.LineWeightConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">GetStandardValues</see> provides.
            </remarks>
        </member>
        <member name="T:CADImport.LineTypeConverter">
            <summary>
            Provides functionality for both-way converting the <b>string</b> objects to objects representing lineweight.
            </summary>
        </member>
        <member name="M:CADImport.LineTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overloaded. Returns a value indicating that <see cref="T:CADImport.LineTypeConverter">LineTypeConverter</see> supports standard values.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext">ITypeDescriptorContext</see> that provides a format context.</param>
            <returns><b>true</b>.</returns>
        </member>
        <member name="M:CADImport.LineTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overloaded. Returns a collection of standard linetype values.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext">ITypeDescriptorContext</see> that provides a format context.</param>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection">StandardValuesCollection</see> that holds a standard set of valid values: 
            <b>ByLayer</b>, <b>ByBlock</b>.</returns>
        </member>
        <member name="M:CADImport.LineTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overloaded. Returns a value indicating that a collection returned by the <see cref="M:CADImport.LineTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">GetStandardValues</see> method is not an exclusive list.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext">ITypeDescriptorContext</see> that provides a format context.</param>
            <returns><b>false</b>.</returns>
            <remarks>If the list is exclusive, such as in an enumeration data type, then no other values are valid. If the list is not exclusive, 
            then other valid values might exist in addition to the list of standard values that <see cref="M:CADImport.LineTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">GetStandardValues</see> provides.
            </remarks>
        </member>
        <member name="T:CADImport.ObjImageEnt">
            <summary>
            Provides functionality for displaying <see cref="T:CADImport.CADImageEnt">CADImageEnt</see> properties in the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> control.
            </summary>
        </member>
        <member name="T:CADImport.ObjEntities">
            <summary>
            Provides functionality for displaying a collection of <see cref="T:CADImport.CADEntity">CADEntity</see> properties in the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> control.
            </summary>
        </member>
        <member name="M:CADImport.ObjEntities.#ctor(CADImport.CADEntityCollection)">
            <summary>
            Sets a list of child entities
            </summary>
            <param name="entLst">A list of entities</param>
        </member>
        <member name="P:CADImport.ObjEntities.Name">
            <summary>
            Gets a name of the entity.
            </summary>
        </member>
        <member name="P:CADImport.ObjEntities.Count_entities">
            <summary>
            Gets a count of entities in list.
            </summary>
        </member>
        <member name="P:CADImport.ObjEntities.Entities_type_list">
            <summary>
            Gets a list of entities
            </summary>
        </member>
        <member name="T:CADImport.ObjPolyline">
            <summary>
            Provides functionality for displaying <see cref="T:CADImport.CADPolyLine">CADPolyline</see> properties in the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> control.
            </summary>
        </member>
        <member name="P:CADImport.ObjPolyline.Closed">
            <summary>
            Gets or sets a value indicating if a polyline is closed.
            </summary>
        </member>
        <member name="P:CADImport.ObjPolyline.Vertexes">
            <summary>
            Gets a list of vertexes.
            </summary>
        </member>
        <member name="T:CADImport.ObjHatch">
            <summary>
            Provides functionality for displaying <see cref="T:CADImport.CADHatch">CADHatch</see> properties in the <see cref="T:System.Windows.Forms.PropertyGrid">PropertyGrid</see> control.
            </summary>
        </member>
        <member name="P:CADImport.ObjMPolygon.Fill_color">
            <summary>
            Gets or sets a filling color of the MPolygon.
            </summary>
            <value>A <see cref="T:System.Drawing.Color">Color</see> of the entity.</value>
        </member>
        <member name="P:CADImport.ObjMPolygon.Fill_color_type">
            <summary>
            Gets or sets a fill color type for the entity. 
            </summary>
            <value>A <b>string</b> containing a color type for the entity.</value>
        </member>
        <member name="T:CADImport.FaceModule.MultipleLanguage">
            <summary>
            Provides support for multiple languages.
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.MultipleLanguage.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.FaceModule.MultipleLanguage">MultipleLanguage</see> class.
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.MultipleLanguage.LoadLngFileList(System.Windows.Forms.Menu,System.EventHandler)">
            <summary>
            Creates a list of the supported languages.
            </summary>
            <param name="aMenu">A <see cref="T:System.Windows.Forms.Menu">Menu</see> that will contain 
            a list of the supported languages.</param>
            <param name="aProc">An <see cref="T:System.EventHandler">EventHandler</see> that handles the 
            <see cref="E:System.Windows.Forms.MenuItem.Click">Click</see> event.</param>
        </member>
        <member name="M:CADImport.FaceModule.MultipleLanguage.LoadLNG(System.String)">
            <summary>
            Loads a specified file of the language support.
            </summary>
            <param name="aName">A <b>string</b> containing a name of the language support file.</param>
        </member>
        <member name="M:CADImport.FaceModule.MultipleLanguage.LoadLNG(System.IO.Stream,System.String)">
            <summary>
            Loads a specified file of the language support.
            </summary>
            <param name="aFile">A <see cref="T:System.IO.Stream">Stream</see> containing the language support file.</param>
            <param name="aName">A <b>string</b> containing a name of the language support file.</param>
        </member>
        <member name="M:CADImport.FaceModule.MultipleLanguage.SetLanguage(System.Windows.Forms.Control.ControlCollection,System.Windows.Forms.MainMenu,System.String)">
            <summary>
            Translates all texts of the user interface into the current language.
            </summary>
            <param name="aControls">A collection of all controls that form the user interface.</param>
            <param name="aMenu">A menu of the main application's form.</param>
            <param name="aCaption">A <b>string</b> containing a caption of the main application's form.</param>
            <returns>A <b>string</b> containing a caption of the main application's form translated into the current language.</returns>
        </member>
        <member name="M:CADImport.FaceModule.MultipleLanguage.RestoreLanguage(System.Windows.Forms.Control.ControlCollection,System.Windows.Forms.MainMenu)">
            <summary>
            Translates all texts of the user interface into the default language.
            </summary>
            <param name="aControls">A collection of all controls that form the user interface.</param>
            <param name="aMenu">A menu of the main application's form.</param>
        </member>
        <member name="M:CADImport.FaceModule.MultipleLanguage.SaveNameMenuItem(System.Windows.Forms.Menu.MenuItemCollection)">
            <summary>
            Temporarily saves the text contents of all menu items.
            </summary>
            <param name="aMenu">A collection of menu items from all menus in the user interface.</param>
        </member>
        <member name="M:CADImport.FaceModule.MultipleLanguage.SaveNameNoNameElement(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Temporarily saves the text contents of the controls without names.
            </summary>
            <param name="aControls">A collection of all controls that form the user interface.</param>
        </member>
        <member name="M:CADImport.FaceModule.MultipleLanguage.SetMenuLng(System.Windows.Forms.Menu.MenuItemCollection)">
            <summary>
            Translates the text contents of all menu items from the specified collection into the current language.
            </summary>
            <param name="aMenu">A collection of all menu items used in the user interface.</param>
        </member>
        <member name="P:CADImport.FaceModule.MultipleLanguage.Language">
            <summary>
            Gets a <b>string</b> containing a name of the current language.
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.MultipleLanguage.LanguagesList">
            <summary>
            Gets an array containing the names of the supported languages.
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.MultipleLanguage.LngFilesList">
            <summary>
            Gets or sets a list of all texts used for the user interface in the current language.
            </summary>
            <remarks>This list contains pairs of key and value. English text is used as a key. 
            A translation of this text into the current language is used as a corresponding value.</remarks>
        </member>
        <member name="P:CADImport.FaceModule.MultipleLanguage.Path">
            <summary>
            Gets or sets a <b>string</b> containing a path to the directory where to look for files of language support.
            </summary>
            <remarks>If the specified directory doesn't contain files of language support, the application 
            will look for them in the application's current directory.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of Deflate and SetInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>
            <param name="blTreeCodes">The number/rank of treecodes to send.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="literal">Literal value to add to buffer.</param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="distance">Distance code</param>
            <param name="length">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that all frequencies are zero
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            At least one frequency is non-zero
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="staticCodes">new codes</param>
            <param name="staticLengths">length for new codes</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CalcBLFreq(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Scan a literal or distance tree to determine the frequencies of the codes
            in the bit length tree.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteTree(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the Adler32 class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with a byte value.
            </summary>
            <param name="value">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            an array of bytes
            </param>
            <param name="offset">
            the start of the data used for this update
            </param>
            <param name="count">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:CADImport.SGLines">
            <summary>
            Provides parameters that specify a line type in a CAD image.
            </summary>
        </member>
        <member name="M:CADImport.SGLines.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:CADImport.SGLines">SGLines</see> class.
            </summary>
        </member>
        <member name="M:CADImport.SGLines.IsSolid">
            <summary>
            Determines whether or not the specified line is solid.
            </summary>
            <returns><b>True</b> if line is solid; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.SGLines.HatchLine(System.Double[],CADImport.DPoint,CADImport.DPoint,CADImport.DPoint,System.Collections.ArrayList,System.Int32@)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:CADImport.SGLines.Add(CADImport.LTypeElementStruct)">
            <summary>
            Adds an element to the list of line elements.
            </summary>
            <param name="element">An element to add.</param>
        </member>
        <member name="M:CADImport.SGLines.AddTick(System.Double)">
            <summary>
            Initializes and adds an element to the list of line elements.
            </summary>
            <param name="value">An element to add.</param>
        </member>
        <member name="M:CADImport.SGLines.Assign(CADImport.SGLines)">
            <summary>
            Copies an entity
            </summary>
            <param name="lines">An entity to copy</param>
        </member>
        <member name="M:CADImport.SGLines.Initialize(System.Double[])">
            <summary>
            Initializes a list of line elements.
            </summary>
            <param name="part">A number of elements in list.</param>
        </member>
        <member name="M:CADImport.SGLines.Curve(CADImport.CADCollection{CADImport.DPoint},CADImport.CADCollection{CADImport.DPoint},System.Boolean)">
            <summary>
            Makes a list of points on the basis of the list of line elements and changes curved line in CADImage.
            </summary>
            <param name="points">A list of border points of the curved line.</param>
            <param name="dottedSingPts">A list of points. It is filled on the basis of a list of line elements.</param>
            <param name="closed">Specifies if the curved line is closed.</param>
        </member>
        <member name="M:CADImport.SGLines.Line(CADImport.DPoint,CADImport.DPoint,CADImport.CADCollection{CADImport.DPoint})">
            <summary>
            Makes a list of points on the basis of the list of line elements and changes straight line in CADImage.
            </summary>
            <param name="p1">The start point of a line</param>
            <param name="p2">The end point of the line</param>
            <param name="dottedSignPts">A list of points. It is filled on the basis of a list of line elements.</param>
        </member>
        <member name="M:CADImport.SGLines.Poly(CADImport.CADCollection{CADImport.DPoint},CADImport.CADCollection{CADImport.DPoint},System.Boolean)">
            <summary>
            Makes a list of points on the basis of the list of line elements and changes polyline in CADImage.
            </summary>
            <param name="points">A list of border points of the polyline.</param>
            <param name="dottedSignPts">A list of points. It is filled on the basis of a list of line elements.</param>
            <param name="closed">Specifies if the polyline is closed.</param>
        </member>
        <member name="M:CADImport.SGLines.Loaded(CADImport.CADConverter)">
            <summary>
            Loads this <see cref="T:CADImport.CADHelix">SGLines</see> to the specified <see cref="T:CADImport.CADConverter">CADConverter</see>.
            </summary>
            <param name="AConverter">A <see cref="T:CADImport.CADConverter">CADConverter</see> where to a <see cref="T:CADImport.CADHelix">SGLines</see> is loaded.</param>
        </member>
        <member name="P:CADImport.SGLines.Elements">
            <summary>
            Gets or sets a list of the specific line elements(dash, dot or space).
            </summary>
        </member>
        <member name="P:CADImport.SGLines.SimpleElements">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:CADImport.SGLines.IsUniform">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:CADImport.SGLines.PatternLength">
            <summary>
            Gets or sets a lenght of a pattern of a dotted line.
            </summary>
        </member>
        <member name="P:CADImport.SGLines.Scale">
            <summary>
            Gets or sets a scale factor of a pattern of a dotted line.
            </summary>
        </member>
        <member name="P:CADImport.SGLines.MaxSize">
            <summary>
            Gets a max size of pattern.
            </summary>
        </member>
        <member name="P:CADImport.SGLines.IsDotted">
            <summary>
            Determines if the line is dotted.
            </summary>
        </member>
        <member name="T:CADImport.SimpleLTypeElementStruct">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:CADImport.SimpleLTypeElementStruct.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.SimpleLTypeElementStruct">SimpleLTypeElementStruct</see> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:CADImport.LTypeElementStruct">
            <summary>
            Provides parameters that specifies a line type in a CAD image.
            </summary>
        </member>
        <member name="F:CADImport.LTypeElementStruct.Style">
            <summary>
            Represents a style of the text in <paramref name="LTypeElementStruct"/>.
            </summary>
        </member>
        <member name="F:CADImport.LTypeElementStruct.StyleHandle">
            <summary>
            Represents a handle of the text style.
            </summary>
        </member>
        <member name="F:CADImport.LTypeElementStruct.ComplexType">
            <summary>
            Complex linetype element type (one per element). Default is 0 (no embedded shape/text).
            </summary>
            <value>The following codes are bit values:
            1 = If set, rotation specifies an absolute rotation; if not set, rotation specifies a relative rotation
            2 = Embedded element is a text string
            4 = Embedded element is a shape</value>
        </member>
        <member name="F:CADImport.LTypeElementStruct.Dash">
            <summary>
            Dash, dot or space length (one entry per element).
            </summary>
        </member>
        <member name="F:CADImport.LTypeElementStruct.Scale">
            <summary>
            Scale value
            </summary>
            <remarks>Optional. Multiple entries can exist</remarks>
        </member>
        <member name="F:CADImport.LTypeElementStruct.Rotation">
            <summary>
            Rotation value in radians of embedded shape or text.
            </summary>
            <remarks>one per element if ComplexType specifies an embedded shape or text string</remarks>
        </member>
        <member name="F:CADImport.LTypeElementStruct.XOffset">
            <summary>
            X offset value.
            </summary>
            <remarks>Optional. Multiple entries can exist</remarks>
        </member>
        <member name="F:CADImport.LTypeElementStruct.YOffset">
            <summary>
            Y offset value.
            </summary>
            <remarks>Optional. Multiple entries can exist</remarks>
        </member>
        <member name="F:CADImport.LTypeElementStruct.Text">
            <summary>
            Text string
            </summary>
            <remarks>One per element if ComplexType = 2</remarks>
        </member>
        <member name="M:CADImport.LTypeElementStruct.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.LTypeElementStruct">LTypeElementStruct</see> class.
            </summary>
            <param name="scale">A scale value.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ITaggedData">
            <summary>
            ExtraData tagged value interface.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ITaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the contents of this instance from the data passed.
            </summary>
            <param name="data">The data to extract contents from.</param>
            <param name="offset">The offset to begin extracting data from.</param>
            <param name="count">The number of bytes to extract.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ITaggedData.GetData">
            <summary>
            Get the data representing this instance.
            </summary>
            <returns>Returns the data for this instance.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ITaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.RawTaggedData">
            <summary>
            A raw binary tagged value
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.RawTaggedData.#ctor(System.Int16)">
            <summary>
            Initialise a new instance.
            </summary>
            <param name="tag">The tag ID.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.RawTaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="offset">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.RawTaggedData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.RawTaggedData._tag">
            <summary>
            The tag ID for this instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.RawTaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.RawTaggedData.Data">
            <summary>
            Get /set the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData">
            <summary>
            Class representing extended unix date time values.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="index">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)">
            <summary>
            Test a <see cref="T:System.DateTime"> value to see if is valid and can be represented here.</see>
            </summary>
            <param name="value">The <see cref="T:System.DateTime">value</see> to test.</param>
            <returns>Returns true if the value is valid and can be represented; false if not.</returns>
            <remarks>The standard Unix time is a signed integer data type, directly encoding the Unix time number,
            which is the number of seconds since 1970-01-01.
            Being 32 bits means the values here cover a range of about 136 years.
            The minimum representable time is 1901-12-13 20:45:52,
            and the maximum representable time is 2038-01-19 03:14:07.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.TagID">
            <summary>
            Get the ID
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.ModificationTime">
            <summary>
            Get /set the Modification Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.AccessTime">
            <summary>
            Get / set the Access Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.CreateTime">
            <summary>
            Get / Set the Create Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.Include">
            <summary>
            Get/set the <see cref="T:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.Flags">values</see> to include.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.Flags">
            <summary>
            Flags indicate which values are included in this instance.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.Flags.ModificationTime">
            <summary>
            The modification time is included
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.Flags.AccessTime">
            <summary>
            The access time is included
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ExtendedUnixData.Flags.CreateTime">
            <summary>
            The create time is included.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.NTTaggedData">
            <summary>
            Class handling NT date time values.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.NTTaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="index">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.NTTaggedData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.NTTaggedData.IsValidValue(System.DateTime)">
            <summary>
            Test a <see cref="T:System.DateTime"> valuie to see if is valid and can be represented here.</see>
            </summary>
            <param name="value">The <see cref="T:System.DateTime">value</see> to test.</param>
            <returns>Returns true if the value is valid and can be represented; false if not.</returns>
            <remarks>
            NTFS filetimes are 64-bit unsigned integers, stored in Intel
            (least significant byte first) byte order. They determine the
            number of 1.0E-07 seconds (1/10th microseconds!) past WinNT "epoch",
            which is "01-Jan-1601 00:00:00 UTC". 28 May 60056 is the upper limit
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.NTTaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.NTTaggedData.LastModificationTime">
            <summary>
            Get/set the <see cref="T:System.DateTime">last modification time</see>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.NTTaggedData.CreateTime">
            <summary>
            Get /set the <see cref="T:System.DateTime">create time</see>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.NTTaggedData.LastAccessTime">
            <summary>
            Get /set the <see cref="T:System.DateTime">last access time</see>.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ITaggedDataFactory">
            <summary>
            A factory that creates <see cref="T:ICSharpCode.SharpZipLib.Zip.ITaggedData">tagged data</see> instances.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ITaggedDataFactory.Create(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Get data for a specific tag value.
            </summary>
            <param name="tag">The tag ID to find.</param>
            <param name="data">The data to search.</param>
            <param name="offset">The offset to begin extracting data from.</param>
            <param name="count">The number of bytes to extract.</param>
            <returns>The located <see cref="T:ICSharpCode.SharpZipLib.Zip.ITaggedData">value found</see>, or null if not found.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipExtraData">
            
            <summary>
            A class to handle the extra data field for Zip entries
            </summary>
            <remarks>
            Extra data contains 0 or more values each prefixed by a header tag and length.
            They contain zero or more bytes of actual data.
            The data is held internally using a copy on write strategy.  This is more efficient but
            means that for extra data created by passing in data can have the values modified by the caller
            in some circumstances.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.#ctor">
            <summary>
            Initialise a default instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.#ctor(System.Byte[])">
            <summary>
            Initialise with known extra data.
            </summary>
            <param name="data">The extra data.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.GetEntryData">
            <summary>
            Get the raw extra data value
            </summary>
            <returns>Returns the raw byte[] extra data this instance represents.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Clear">
            <summary>
            Clear the stored data.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.GetStreamForTag(System.Int32)">
            <summary>
            Get a read-only <see cref="T:System.IO.Stream"/> for the associated tag.
            </summary>
            <param name="tag">The tag to locate data for.</param>
            <returns>Returns a <see cref="T:System.IO.Stream"/> containing tag data or null if no tag was found.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.GetData(System.Int16)">
            <summary>
            Get the <see cref="T:ICSharpCode.SharpZipLib.Zip.ITaggedData">tagged data</see> for a tag.
            </summary>
            <param name="tag">The tag to search for.</param>
            <returns>Returns a <see cref="T:ICSharpCode.SharpZipLib.Zip.ITaggedData">tagged value</see> or null if none found.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">
            <summary>
            Find an extra data value
            </summary>
            <param name="headerID">The identifier for the value to find.</param>
            <returns>Returns true if the value was found; false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddEntry(ICSharpCode.SharpZipLib.Zip.ITaggedData)">
            <summary>
            Add a new entry to extra data.
            </summary>
            <param name="taggedData">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ITaggedData"/> value to add.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddEntry(System.Int32,System.Byte[])">
            <summary>
            Add a new entry to extra data
            </summary>
            <param name="headerID">The ID for this entry.</param>
            <param name="fieldData">The data to add.</param>
            <remarks>If the ID already exists its contents are replaced.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry">
            <summary>
            Start adding a new entry.
            </summary>
            <remarks>Add data using <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte[])"/>, <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeShort(System.Int32)"/>, <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeInt(System.Int32)"/>, or <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeLong(System.Int64)"/>.
            The new entry is completed and actually added by calling <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddNewEntry(System.Int32)"/></remarks>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddEntry(ICSharpCode.SharpZipLib.Zip.ITaggedData)"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddNewEntry(System.Int32)">
            <summary>
            Add entry data added since <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/> using the ID passed.
            </summary>
            <param name="headerID">The identifier to use for this entry.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte)">
            <summary>
            Add a byte of data to the pending new entry.
            </summary>
            <param name="data">The byte to add.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte[])">
            <summary>
            Add data to a pending new entry.
            </summary>
            <param name="data">The data to add.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeShort(System.Int32)">
            <summary>
            Add a short value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeInt(System.Int32)">
            <summary>
            Add an integer value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeLong(System.Int64)">
            <summary>
            Add a long value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Delete(System.Int32)">
            <summary>
            Delete an extra data field.
            </summary>
            <param name="headerID">The identifier of the field to delete.</param>
            <returns>Returns true if the field was found and deleted.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadLong">
            <summary>
            Read a long in little endian form from the last <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value
            </summary>
            <returns>Returns the long value read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadInt">
            <summary>
            Read an integer in little endian form from the last <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the integer read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadShort">
            <summary>
            Read a short value in little endian form from the last <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadByte">
            <summary>
            Read a byte from an extra data
            </summary>
            <returns>The byte value read or -1 if the end of data has been reached.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Skip(System.Int32)">
            <summary>
            Skip data during reading.
            </summary>
            <param name="amount">The number of bytes to skip.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadShortInternal">
            <summary>
            Internal form of <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadShort"/> that reads data at any location.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Dispose">
            <summary>
            Dispose of this instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Length">
            <summary>
            Gets the current extra data length.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ValueLength">
            <summary>
            Get the length of the last value found by <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)"/>
            </summary>
            <remarks>This is only valid if <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)"/> has previously returned true.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipExtraData.CurrentReadIndex">
            <summary>
            Get the index for the current read value.
            </summary>
            <remarks>This is only valid if <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)"/> has previously returned true.
            Initially the result will be the index of the first byte of actual data.  The value is updated after calls to
            <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadInt"/>, <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadShort"/> and <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadLong"/>. </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipExtraData.UnreadCount">
            <summary>
            Get the number of bytes remaining to be read for the current value;
            </summary>
        </member>
        <member name="T:CADImport.CADGraphicsGDI">
            <summary>
            Provides drawing functionality based on GDI+.
            </summary>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:CADImport.CADGraphicsGDI">CADGraphicsGDI</see>
            </summary>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CADGraphicsGDI">CADGraphicsGDI</see> class.
            </summary>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.ClearBuffer">
            <summary>
            Clears current drawing object when double buffering is used
            </summary>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.Draw(CADImport.DRect,System.Drawing.RectangleF)">
            <summary>
            Draws the current <see cref="T:CADImport.CADImage">CADImage</see> object.
            </summary>
            <param name="sourceRect"></param>
            <param name="destinationRect"></param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.ExportToMetafile(System.IO.Stream,CADImport.DRect)">
            <summary>
            Exports a CAD drawing to Windows Enhanced metafile. 
            </summary>
            <param name="stream">
            A stream to a newly created metafile.
            </param>				
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.ExportToMetafile(System.String,CADImport.DRect,System.Drawing.Rectangle)">
            <summary>
            Exports a CAD drawing to Windows Enhanced metafile. 
            </summary>
            <param name="aName">
            A path to a newly created metafile.
            </param>		
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be saved.</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.ExportToMetafile(System.String,CADImport.DRect,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Exports a CAD drawing to Windows Enhanced metafile. 
            </summary>
            <param name="aName">
            A path to a newly created metafile.
            </param>		
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be saved.</param>
            <param name="callGetExtents">If true call GetExtents method</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.ExportToMetafile(System.String,CADImport.DRect)">
            <summary>
            Exports a CAD drawing to Windows Enhanced metafile. 
            </summary>
            <param name="aName">
            A path to a newly created metafile.
            </param>		
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.SaveToStream(System.IO.Stream,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Saves a current CAD image to the stream of the specified format.
            </summary>
            <param name="str">A stream, where the image is saved</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be saved.</param>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.SaveToStream(System.IO.Stream,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Rectangle)">
            <summary>
            Saves a part of the current CAD image to the stream of the specified format.
            </summary>	
            <param name="str">A stream, where to save an image</param>	
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="aCurRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be saved.</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.SaveToFile(System.String,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Writes a visible part of the current CAD image to the disk as a raster image. 
            </summary>
            <param name="FileName">A location on the disk where to save the image.</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.SaveToFile(System.String,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Imaging.PixelFormat,System.Drawing.RectangleF,System.Drawing.Graphics)">
            <summary>
            Writes a visible part of the current CAD image to the disk as a raster image. 
            </summary>
            <param name="FileName">A location on the disk where to save the image.</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.SaveToStream(System.IO.Stream,System.Drawing.Imaging.ImageFormat,CADImport.DRect)">
            <summary>
            Writes a visible part of the current CAD image to the specified stream as a raster image. 
            </summary>
            <param name="aSt">A stream which the image is saved to.</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.SaveToStream(System.IO.Stream,System.Drawing.Imaging.ImageFormat,CADImport.DRect,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Writes a visible part of the current CAD image to the specified stream as a raster image. 
            </summary>
            <param name="aSt">A stream which the image is saved to.</param>
            <param name="ImgFormat">A <see cref="T:System.Drawing.Imaging.ImageFormat">ImageFormat</see> object 
            specifying a format of the file to save.</param>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.SaveImageToClipboard(CADImport.DRect,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Writes a visible part of the current CAD image to the clipboard as a raster image. 
            </summary>
            <param name="curRect">A <see cref="T:CADImport.DRect">DRect</see> object specifying a size of the <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <remarks>This method works only for windows application.</remarks>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.SaveImageToClipboard(CADImport.DRect,System.Drawing.Rectangle)">
            <summary>
            Writes a specified part of the current CAD image to the clipboard as a raster image. 
            </summary>
            <param name="curRect">A <see cref="T:CADImport.DRect">curRect</see> object specifying a size of the current <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be written to the clipboard.</param>
            <remarks>This method works only for windows application.</remarks>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.SaveImageToClipboard(CADImport.DRect,System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Writes a specified part of the current CAD image to the clipboard as a raster image. 
            </summary>
            <param name="curRect">A <see cref="T:CADImport.DRect">curRect</see> object specifying a size of the current <see cref="T:CADImport.CADImage">CADImage</see>.</param>
            <param name="clipRect">A <see cref="T:System.Drawing.Rectangle">Rectangle</see> object that specifies a part of 
            the current CAD image to be written to the clipboard.</param>
            <remarks>This method works only for windows application.</remarks>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat</see> of image</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Boolean,System.Drawing.Color)">
            <summary>
            Draws a raster image or a metafile object.
            </summary>
            <param name="image">An object of <see cref="T:System.Drawing.Image">Image</see> derived class.</param>
            <param name="points">A list of points for a visualization method</param>
            <param name="transparent">A value specifying image transparency</param>
            <param name="transparentColor">A transparent color for visualization</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.DrawPolyPolyLine(System.Drawing.Point[],System.Int32[],System.Boolean)">
            <summary>
            Draws a set of lines or a set of polygons
            </summary>
            <param name="intPoints">The set of points for visualization</param>
            <param name="counts">A list of point numbers for figures.</param>
            <param name="allClosed">A value specifying if visualized figures will be closed</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.DrawLine(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Draws a polyline by two specified points.
            </summary>
            <param name="p1">The first point</param>
            <param name="p2">The second point</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.DrawPixel(System.Drawing.Point)">
            <summary>
            Draws a single pixel
            </summary>
            <param name="p">A point that will be visualized</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.DrawPolyline(System.Drawing.Point[],System.Boolean)">
            <summary>
            Draws a polyline
            </summary>
            <param name="points">A list of polyline vertex points</param>
            <param name="closed">A value specifying if polyline is closed</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.FillPolyline(System.Drawing.Point[])">
            <summary>
            Draws a filled polyline.
            </summary>
            <param name="points">A list of polyline vertex points</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.FillPolyPolyLine(System.Drawing.Point[],System.Int32[])">
            <summary>
            Draws a filled polygons.
            </summary>
            <param name="intPoints">The set of points for visualization</param>
            <param name="counts">A list of point numbers for figures.</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.DrawString(System.String,System.Drawing.Font,System.Int32,System.Drawing.Point,CADImport.CADTextHorizontalAlign)">
            <summary>
            Draws a text string.
            </summary>
            <param name="text">A text</param>
            <param name="font">A text font</param>
            <param name="color">A text color</param>
            <param name="point">A location point of the text.</param>
            <param name="align">A text alignment.</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.DrawStringW(System.String,System.Drawing.Font,System.Drawing.FontStyle,System.Int32,System.Drawing.Point,System.Drawing.Point,CADImport.CADTextHorizontalAlign)">
            <summary>
            Draws a text string.
            </summary>
            <param name="text">A text</param>
            <param name="font">A text font</param>
            <param name="scoring">A text font style data</param>
            <param name="color">A text color</param>
            <param name="point">A location point of the text.</param>
            <param name="size">A text size</param>
            <param name="align">A text alignment.</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.Add_T(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Performs addition of two points.
            </summary>
            <param name="p1">The first point</param>
            <param name="p2">The second point</param>
            <returns>The resulting point</returns>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.Sub_T(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Performs substraction of two points.
            </summary>
            <param name="p1">The first point</param>
            <param name="p2">The second point</param>
            <returns>The resulting point</returns>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.IsEqual_T(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Checks if two points are equal.
            </summary>
            <param name="p1">The first point</param>
            <param name="p2">The second point</param>
        </member>
        <member name="M:CADImport.CADGraphicsGDI.ConvertTo_T(CADImport.DPoint)">
            <summary>
            Converts a <see cref="T:CADImport.DPoint">DPoint</see> object into a <see cref="!:CADImport.Point">Point</see> object.
            </summary>
            <param name="p">A <see cref="T:CADImport.DPoint">DPoint</see> object to be converted.</param>
            <returns>A <see cref="!:CADImport.Point">Point</see> object.</returns>
        </member>
        <member name="P:CADImport.CADGraphicsGDI.DrawTarget">
            <summary>
            Gets or sets a GDI+ drawing surface.
            </summary>
        </member>
        <member name="P:CADImport.CADGraphicsGDI.InterpolationMode">
            <summary>
            Gets or sets the interpolation mode associated with current Graphics object
            </summary>
        </member>
        <member name="P:CADImport.CADGraphicsGDI.HighQualityRendering">
            <summary>
            Gets or sets a value specifying if visualization quality settings mus be used.
            </summary>
        </member>
        <member name="P:CADImport.CADGraphicsGDI.UseDoubleBuffering">
            <summary>
            Gets or sets drawing buffering mode using metafile
            </summary>
        </member>
        <member name="T:CADImport.Export.DirectCADtoDXF.CADtoDXF">
            <summary>
            Provides a base functionality for direct export of the current CAD file into DXF format.
            </summary>
        </member>
        <member name="F:CADImport.Export.DirectCADtoDXF.CADtoDXF.blockHandleBase">
            <summary>
            Represents a handle of the base block.
            </summary>
        </member>
        <member name="M:CADImport.Export.DirectCADtoDXF.CADtoDXF.#ctor(CADImport.CADImage)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.DirectCADtoDXF.CADtoDXF">CADtoDXF</see> object.
            </summary>
            <param name="img">The <see cref="T:CADImport.CADImage">CADImage</see> to be exported to a DXF file.</param>
        </member>
        <member name="M:CADImport.Export.DirectCADtoDXF.CADtoDXF.SaveToStream(System.IO.Stream)">
            <summary>
            Exports the current CAD file to the stream defined by the <see cref="T:System.IO.StreamWriter">StreamWriter</see>.
            </summary>
            <param name="wr">A <see cref="T:System.IO.StreamWriter">StreamWriter</see> object that defines the stream where to the current CAD file will be exported.</param>
        </member>
        <member name="T:CADImport.CAD3D.STLImage">
            <summary>
            Represents a drawing of the STL format.
            </summary>
        </member>
        <member name="M:CADImport.CAD3D.STLImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CAD3D.STLImage">STLImage</see> class.
            </summary>
        </member>
        <member name="T:CADImport.CAD3D.CAD3DFacet">
            <summary>
            Represents a three-dimensional three-sided facet in the STL image.
            </summary>
        </member>
        <member name="M:CADImport.CAD3D.CAD3DFacet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.CAD3D.CAD3DFacet">CAD3DFacet</see> class.
            </summary>
        </member>
        <member name="P:CADImport.CAD3D.CAD3DFacet.Point2">
            <summary>
            Gets or sets a third point of the <see cref="T:CADImport.CAD3D.CAD3DFacet">CAD3DFacet</see> object.
            </summary>
        </member>
        <member name="P:CADImport.CAD3D.CAD3DFacet.Point3">
            <summary>
            Gets or sets a third point of the <see cref="T:CADImport.CAD3D.CAD3DFacet">CAD3DFacet</see> object.
            </summary>
        </member>
        <member name="T:CADImport.CAD3D.CAD3DConst">
            <summary>
            Contains data for 3D drawings
            </summary>
        </member>
        <member name="F:CADImport.CAD3D.CAD3DConst.ObjectDefaultColor">
            <summary>
            Specifies the default color value for 3D drawings
            </summary>
        </member>
        <member name="T:CADImport.CADTextHorizontalAlign">
            <summary>
            Specifies a horizontal alignment for <see cref="T:CADImport.CADText">CADText</see>.
            </summary>
        </member>
        <member name="F:CADImport.CADTextHorizontalAlign.Left">
            <summary>
            Align <see cref="T:CADImport.CADText">CADText</see> by left. 
            </summary>
        </member>
        <member name="F:CADImport.CADTextHorizontalAlign.Center">
            <summary>
            Align <see cref="T:CADImport.CADText">CADText</see> by center. 
            </summary>
        </member>
        <member name="F:CADImport.CADTextHorizontalAlign.Right">
            <summary>
            Align <see cref="T:CADImport.CADText">CADText</see> by right. 
            </summary>
        </member>
        <member name="T:CADImport.RenderMode">
            <summary>
            Rendering modes for OpenGL visualization
            </summary>
        </member>
        <member name="F:CADImport.RenderMode.Wireframe">
            <summary>
            Wireframes
            </summary>
        </member>
        <member name="F:CADImport.RenderMode.Solid">
            <summary>
            Solid
            </summary>
        </member>
        <member name="F:CADImport.RenderMode.Points">
            <summary>
            Points
            </summary>
        </member>
        <member name="T:CADImport.CADImportForms.BugReportForm">
            <summary>
            Represents a form for bug report dialog in demos.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.BugReportForm.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CADImport.CADImportForms.BugReportForm"/> class.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.BugReportForm.ShowErrorDialog(System.Exception)">
            <summary>
            Shows the error dialog on exception.
            </summary>
            <param name="except">An exception</param>
        </member>
        <member name="F:CADImport.CADImportForms.BugReportForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CADImport.CADImportForms.BugReportForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CADImport.CADImportForms.BugReportForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CADImport.DWG.DWGImage">
            <summary>
            Provides methods for drawing CAD entities loaded from a DWG file.
            </summary>
        </member>
        <member name="M:CADImport.DWG.DWGImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.DWG.DWGImage">DWGImage</see> class. 
            </summary>
        </member>
        <member name="M:CADImport.DWG.DWGImage.Dispose">
            <summary>
            Disposes a <see cref="T:CADImport.DWG.DWGImage">DWGImage</see> object.
            </summary>
        </member>
        <member name="M:CADImport.DWG.DWGImage.CreateConverter">
            <summary>
            Creates a <see cref="T:CADImport.CADConverter">CADConverter</see> for loading the DWG file. 
            </summary>
            <returns>A <see cref="T:CADImport.CADConverter">CADConverter</see> for loading the DWG file.</returns>
        </member>
        <member name="M:CADImport.DWG.DWGImage.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads a DWG image from the specified stream. 
            </summary>
            <param name="str">A <see cref="T:System.IO.Stream">Stream</see> that contains the DWG image.</param>
        </member>
        <member name="T:CADImport.DWG.DWGConverter">
            <summary>
            Provides methods for loading a file and producing a set of CAD entities contained in the loaded file. 
            </summary>
            <remarks>All loaded entities are descendants of the <see cref="T:CADImport.CADEntity">CADEntity</see> class.</remarks>
        </member>
        <member name="M:CADImport.DWG.DWGConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.DWG.DWGConverter">DWGConverter</see> class.
            </summary>
        </member>
        <member name="M:CADImport.DWG.DWGConverter.Initialize">
            <summary>
            Initializes a main section of the loaded CAD file.
            </summary>
            <remarks>A main section is specified by the <see cref="P:CADImport.CADConverter.Main">Main</see> property.</remarks>
        </member>
        <member name="T:CADImport.Export.LayoutsExportOption">
            <summary>
            Defines layouts that will be exported.
            </summary>
        </member>
        <member name="F:CADImport.Export.LayoutsExportOption.Current">
            <summary>
            Current layout
            </summary>
        </member>
        <member name="F:CADImport.Export.LayoutsExportOption.All">
            <summary>
            All layouts
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.DescriptorData">
            <summary>
            Holds data pertinent to a data descriptor.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.DescriptorData.CompressedSize">
            <summary>
            Get /set the compressed size of data.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.DescriptorData.Size">
            <summary>
            Get / set the uncompressed size of data
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.DescriptorData.Crc">
            <summary>
            Get /set the crc value.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipHelperStream">
            <summary>
            This class assists with writing/reading from Zip files.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.#ctor(System.String)">
            <summary>
            Initialise an instance of this class.
            </summary>
            <param name="name">The name of the file to open.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipHelperStream"/>.
            </summary>
            <param name="stream">The stream to use.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.Close">
            <summary>
            Close the stream.
            </summary>
            <remarks>
            The underlying stream is closed only if <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.IsStreamOwner"/> is true.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.LocateBlockWithSignature(System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Locates a block with the desired <paramref name="signature"/>.
            </summary>
            <param name="signature">The signature to find.</param>
            <param name="endLocation">Location, marking the end of block.</param>
            <param name="minimumBlockSize">Minimum size of the block.</param>
            <param name="maximumVariableData">The maximum variable data.</param>
            <returns>Eeturns the offset of the first byte after the signature; -1 if not found</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteZip64EndOfCentralDirectory(System.Int64,System.Int64,System.Int64)">
            <summary>
            Write Zip64 end of central directory records (File header and locator).
            </summary>
            <param name="noOfEntries">The number of entries in the central directory.</param>
            <param name="sizeEntries">The size of entries in the central directory.</param>
            <param name="centralDirOffset">The offset of the dentral directory.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteEndOfCentralDirectory(System.Int64,System.Int64,System.Int64,System.Byte[])">
            <summary>
            Write the required records to end the central directory.
            </summary>
            <param name="noOfEntries">The number of entries in the directory.</param>
            <param name="sizeEntries">The size of the entries in the directory.</param>
            <param name="startOfCentralDirectory">The start of the central directory.</param>
            <param name="comment">The archive comment.  (This can be null).</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.ReadLEShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.ReadLEInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.ReadLELong">
            <summary>
            Read a long in little endian byte order.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLEShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLEUshort(System.UInt16)">
            <summary>
            Write a ushort in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLEInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLEUint(System.UInt32)">
            <summary>
            Write a uint in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLELong(System.Int64)">
            <summary>
            Write a long in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLEUlong(System.UInt64)">
            <summary>
            Write a ulong in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteDataDescriptor(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Write a data descriptor.
            </summary>
            <param name="entry">The entry to write a descriptor for.</param>
            <returns>Returns the number of descriptor bytes written.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.ReadDataDescriptor(System.Boolean,ICSharpCode.SharpZipLib.Zip.DescriptorData)">
            <summary>
            Read data descriptor at the end of compressed data.
            </summary>
            <param name="zip64">if set to <c>true</c> [zip64].</param>
            <param name="data">The data to fill in.</param>
            <returns>Returns the number of bytes read in the descriptor.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.IsStreamOwner">
            <summary>
            Get / set a value indicating wether the the underlying stream is owned or not.
            </summary>
            <remarks>If the stream is owned it is closed when this instance is closed.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            <summary>
            Represents exception conditions specific to Zip archive handling
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor">
            <summary>
            Initializes a new instance of the ZipException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZipException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of ZipException.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next sequence of bits but don't increase input pointer.  bitCount must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <param name="bitCount">The number of bits to peek.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
            <param name="bitCount">The number of bits to drop.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)"/> followed by <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)"/>, except for correct error handling.
            </summary>
            <param name="bitCount">The number of bits to retrieve.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.Reset">
            <summary>
            Resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buffer">data to be input</param>
            <param name="offset">offset of first byte of input</param>
            <param name="count">number of bytes of input to add.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ScanEventArgs">
            <summary>
            Event arguments for scanning.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ScanEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.ScanEventArgs"/>
            </summary>
            <param name="name">The file or directory name.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanEventArgs.Name">
            <summary>
            The file or directory name for this event.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanEventArgs.ContinueRunning">
            <summary>
            Get set a value indicating if scanning should continue or not.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ProgressEventArgs">
            <summary>
            Event arguments during processing of a single file or directory.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ProgressEventArgs.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.ScanEventArgs"/>
            </summary>
            <param name="name">The file or directory name if known.</param>
            <param name="processed">The number of bytes processed so far</param>
            <param name="target">The total number of bytes to process, 0 if not known</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ProgressEventArgs.Name">
            <summary>
            The name for this event if known.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ProgressEventArgs.ContinueRunning">
            <summary>
            Get set a value indicating wether scanning should continue or not.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ProgressEventArgs.PercentComplete">
            <summary>
            Get a percentage representing how much of the <see cref="P:ICSharpCode.SharpZipLib.Core.ProgressEventArgs.Target"></see> has been processed
            </summary>
            <value>0.0 to 100.0 percent; 0 if target is not known.</value>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ProgressEventArgs.Processed">
            <summary>
            The number of bytes processed so far
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ProgressEventArgs.Target">
            <summary>
            The number of bytes to process.
            </summary>
            <remarks>Target may be 0 or negative if the value isnt known.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs">
            <summary>
            Event arguments for directories.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize an instance of <see cref="T:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs"></see>.
            </summary>
            <param name="name">The name for this directory.</param>
            <param name="hasMatchingFiles">Flag value indicating if any matching files are contained in this directory.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs.HasMatchingFiles">
            <summary>
            Get a value indicating if the directory contains any matching files or not.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs">
            <summary>
            Arguments passed when scan failures are detected.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs"></see>
            </summary>
            <param name="name">The name to apply.</param>
            <param name="e">The exception to use.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.Name">
            <summary>
            The applicable name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.Exception">
            <summary>
            The applicable exception.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.ContinueRunning">
            <summary>
            Get / set a value indicating wether scanning should continue.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ProcessDirectoryHandler">
            <summary>
            Delegate invoked before starting to process a directory.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ProcessFileHandler">
            <summary>
            Delegate invoked before starting to process a file.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ProgressHandler">
            <summary>
            Delegate invoked during processing of a file or directory
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.CompletedFileHandler">
            <summary>
            Delegate invoked when a file has been completely processed.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.DirectoryFailureHandler">
            <summary>
            Delegate invoked when a directory failure is detected.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.FileFailureHandler">
            <summary>
            Delegate invoked when a file failure is detected.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner">
            <summary>
            FileSystemScanner provides facilities scanning of files and directories.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="filter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">file filter</see> to apply when scanning.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(System.String,System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter"> directory filter</see> to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(ICSharpCode.SharpZipLib.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:ICSharpCode.SharpZipLib.Core.IScanFilter">filter</see> to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(ICSharpCode.SharpZipLib.Core.IScanFilter,ICSharpCode.SharpZipLib.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:ICSharpCode.SharpZipLib.Core.IScanFilter">filter</see>  to apply.</param>
            <param name="directoryFilter">The directory <see cref="T:ICSharpCode.SharpZipLib.Core.IScanFilter">filter</see>  to apply.</param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.ProcessDirectory">
            <summary>
            Delegate to invoke when a directory is processed.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.ProcessFile">
            <summary>
            Delegate to invoke when a file is processed.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.CompletedFile">
            <summary>
            Delegate to invoke when processing for a file has finished.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.DirectoryFailure">
            <summary>
            Delegate to invoke when a directory failure is detected.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.FileFailure">
            <summary>
            Delegate to invoke when a file failure is detected.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the DirectoryFailure event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnFileFailure(System.String,System.Exception)">
            <summary>
            Raise the FileFailure event.
            </summary>
            <param name="file">The file name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnProcessFile(System.String)">
            <summary>
            Raise the ProcessFile event.
            </summary>
            <param name="file">The file name.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnCompleteFile(System.String)">
            <summary>
            Raise the complete file event
            </summary>
            <param name="file">The file name</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Raise the ProcessDirectory event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="hasMatchingFiles">Flag indicating if the directory has matching files.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.Scan(System.String,System.Boolean)">
            <summary>
            Scan a directory.
            </summary>
            <param name="directory">The base directory to scan.</param>
            <param name="recurse">True to recurse subdirectories, false to scan a single directory.</param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.fileFilter_">
            <summary>
            The file filter currently in use.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.directoryFilter_">
            <summary>
            The directory filter currently in use.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.alive_">
            <summary>
            Flag indicating if scanning should continue running.
            </summary>
        </member>
        <member name="T:CADImport.Export.MetaExport.MetaForm">
            <summary>
            Implements export to DXF format using a graphic metafile.
            </summary>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:CADImport.Export.MetaExport.MetaForm"/>.
            </summary>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.MetaExport.MetaForm"/> class. 
            </summary>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.#ctor(System.Drawing.Imaging.EmfType)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.MetaExport.MetaForm"/> class.
            </summary>
            <param name="mfType">Type of the Initializes a new instance of the <see cref="T:CADImport.Export.MetaExport.MetaForm"/> object.</param>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.MetaExport.MetaForm"/> class.
            </summary>
            <param name="name">A name of the Initializes a new instance of the <see cref="T:CADImport.Export.MetaExport.MetaForm"/> object.</param>
            <param name="width">A width of the Initializes a new instance of the <see cref="T:CADImport.Export.MetaExport.MetaForm"/> object.</param>
            <param name="height">A height of the Initializes a new instance of the <see cref="T:CADImport.Export.MetaExport.MetaForm"/> object.</param>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.#ctor(System.String,System.Int32,System.Int32,System.Drawing.Imaging.EmfType)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.MetaExport.MetaForm"/> class.
            </summary>
            <param name="name">A name of the Initializes a new instance of the <see cref="T:CADImport.Export.MetaExport.MetaForm"/> object.</param>
            <param name="width">A width of the Initializes a new instance of the <see cref="T:CADImport.Export.MetaExport.MetaForm"/> object.</param>
            <param name="height">A height of the Initializes a new instance of the <see cref="T:CADImport.Export.MetaExport.MetaForm"/> object.</param>
            <param name="emfType">Type of the Initializes a new instance of the <see cref="T:CADImport.Export.MetaExport.MetaForm"/> object.</param>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.RemoveDrawMetaFormToOnPaint(System.Windows.Forms.Control)">
            <summary>
            Removes an instance of the <see cref="T:System.Windows.Forms.PaintEventHandler"/> delegate from the <see cref="E:System.Windows.Forms.Control.Paint"/> event of a specified <see cref="T:System.Windows.Forms.Control"/>. 
            </summary>
            <param name="control">A <see cref="T:System.Windows.Forms.Control"/>.</param>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.RemoveDrawMetaFormToOnPaint(System.Windows.Forms.Form)">
            <summary>
            Removes an instance of the <see cref="T:System.Windows.Forms.PaintEventHandler"/> delegate from the <see cref="E:System.Windows.Forms.Control.Paint"/> event of a specified <see cref="T:System.Windows.Forms.Form"/>.
            </summary>
            <param name="control">A <see cref="T:System.Windows.Forms.Form"/>.</param>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.AddDrawMetaFormToOnPaint(System.Windows.Forms.Control)">
            <summary>
            Adds an instance of the <see cref="T:System.Windows.Forms.PaintEventHandler"/> delegate to the <see cref="E:System.Windows.Forms.Control.Paint"/> event of a specified <see cref="T:System.Windows.Forms.Control"/>. 
            </summary>
            <param name="control">A <see cref="T:System.Windows.Forms.Control"/>.</param>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.AddDrawMetaFormToOnPaint(System.Windows.Forms.Form)">
            <summary>
            Adds an instance of the <see cref="T:System.Windows.Forms.PaintEventHandler"/> delegate to the <see cref="E:System.Windows.Forms.Control.Paint"/> event of a specified <see cref="T:System.Windows.Forms.Form"/>. 
            </summary>
            <param name="control">A <see cref="T:System.Windows.Forms.Form"/>.</param>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.SaveFromStream(System.String)">
            <summary>
            Saves a graphic metafile from file stream to a specified DXF file.
            </summary>
            <param name="fName">A name of the output DXF file.</param>
            <returns></returns>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.Splitting(System.String,System.String)">
            <summary>
            Converts a specified graphic metafile to a specified DXF file.
            </summary>
            <param name="inputFile">A name of the input graphic metafile.</param>
            <param name="outFileName">A name of the output DXF file.</param>
            <returns></returns>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.SplitingToStream(System.IO.StringWriter)">
            <summary>
            Saves a graphic metafile to a specified stream.
            </summary>
            <param name="stream">A stream where a graphic metafile is saved to.</param>
            <returns></returns>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.SplitingToStream(System.IO.StringWriter,System.Single)">
            <summary>
            Saves a graphic metafile to a specified stream.
            </summary>
            <param name="stream">A stream where a graphic metafile is saved to.</param>
            <param name="unitSize">A unit size for the export.</param>
            <returns></returns>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.ConvertToDXF">
            <summary>
            Converts a graphic metafile to DXF image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.ConvertToDXF(System.String)">
            <summary>
            Converts a graphic metafile to a specified DXF file.
            </summary>
            <param name="FileName">A name of the output DXF file.</param>
            <returns></returns>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.ConvertToDXF(System.String,System.Single)">
            <summary>
            Converts a graphic metafile to a specified DXF file.
            </summary>
            <param name="FileName">A name of the output DXF file.</param>
            <param name="unitSize">A unit size for the export.</param>
            <returns></returns>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.ConvertToDXF(System.String,System.String)">
            <summary>
            Converts a specified graphic metafile to a specified DXF file.
            </summary>
            <param name="fromFile">A name of the input graphic metafile.</param>
            <param name="outFileName">A name of the output DXF file.</param>
            <returns></returns>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.ConvertToDXF(System.String,System.String,System.Single)">
            <summary>
            Converts a specified graphic metafile to a specified DXF file.
            </summary>
            <param name="fromFile">A name of the input graphic metafile.</param>
            <param name="outFileName">A name of the output DXF file.</param>
            <param name="unitSize">A unit size for the export.</param>
            <returns></returns>
        </member>
        <member name="M:CADImport.Export.MetaExport.MetaForm.Conversion_Angle(System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="Val"></param>
            <returns></returns>
        </member>
        <member name="P:CADImport.Export.MetaExport.MetaForm.Exporter">
            <summary>
            Gets the <see cref="T:CADImport.Export.SimpleCADtoDXF.DXFExport"/> class instance. 
            </summary>
        </member>
        <member name="P:CADImport.Export.MetaExport.MetaForm.Graphics">
            <summary>
            Gets a <see cref="T:System.Drawing.Graphics"/> object from <see cref="T:CADImport.Export.MetaExport.MetaForm"/>.
            </summary>
        </member>
        <member name="P:CADImport.Export.MetaExport.MetaForm.FileName">
            <summary>
            Gets name of a graphic metafile.
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.CADListView">
            <summary>
            Displays items list in CADListView control item: as text fields, images and special cell drawing methods
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.CADListView.Clear">
            <summary>
            Clears all <see cref="T:CADImport.FaceModule.CADListView">CADListView</see> nodes
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.CADListView.OnSelectCell(CADImport.FaceModule.ListItem,CADImport.FaceModule.ListEventSelectArgs)">
            <summary>
            Invokes <see cref="E:CADImport.FaceModule.CADListView.SelectCellEvent">SelectCellEvent</see> event
            </summary>
            <param name="item">Contains the selected cell</param>
            <param name="e">Contains information about event</param>
        </member>
        <member name="M:CADImport.FaceModule.CADListView.OnSelectItem(System.Collections.ArrayList,CADImport.FaceModule.ListEventSelectArgs)">
            <summary>
            Invokes <see cref="E:CADImport.FaceModule.CADListView.SelectItemEvent">SelectItemEvent</see> event
            </summary>
            <param name="items">Contains the selected cells</param>
            <param name="e">Contains information about event</param>
        </member>
        <member name="M:CADImport.FaceModule.CADListView.#ctor">
            <summary>
            Initializes new instance of <see cref="T:CADImport.FaceModule.CADListView">CADListView</see> class. 
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.CADListView.Dispose(System.Boolean)">
            <summary>
            Перегружен. Освобождает ресурсы, используемые объектом Component.
            </summary>
            <param name="disposing">Если этот параметр равен true, освобождаются как управляемые, 
            так и неуправляемые ресурсы; если он равен false, освобождаются только неуправляемые ресурсы.</param>
        </member>
        <member name="M:CADImport.FaceModule.CADListView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.CADListView.DrawBaseFace(System.Drawing.Graphics)">
            <summary>
            Draws basic elements of the control
            </summary>
            <param name="graph"><see cref="T:System.Drawing.Graphics">Graphics</see> drawing object</param>
        </member>
        <member name="M:CADImport.FaceModule.CADListView.DrawHeader(System.Drawing.Graphics)">
            <summary>
            Draws a header of CADListView control
            </summary>
            <param name="graph"><see cref="T:System.Drawing.Graphics">Graphics</see> drawing object</param>
        </member>
        <member name="M:CADImport.FaceModule.CADListView.SetAutoSize">
            <summary>
            Sets columns width; equals the longest row in the column
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.CADListView.OnResize(System.EventArgs)">
            <summary>
            Invokes resizing event
            </summary>
            <param name="e">Event parameters</param>
        </member>
        <member name="M:CADImport.FaceModule.CADListView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overloaded method for window messages receiving
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADImport.FaceModule.CADListView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invokes MouseDown event
            </summary>
            <param name="e">MouseDown event parameters</param>
        </member>
        <member name="M:CADImport.FaceModule.CADListView.SelectCells(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Selects a cell or an item by the specified coordinates
            </summary>
            <param name="x">The X display coordinate</param>
            <param name="y">The Y display coordinate</param>
            <param name="fullItem">Full item selection</param>
        </member>
        <member name="M:CADImport.FaceModule.CADListView.Deselect">
            <summary>
            Cancels selection of all items.
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.CADListView.InvalidateCell(System.Int32)">
            <summary>
            Redraws a cell with the specified number
            </summary>
            <param name="cnt">A cell number</param>
        </member>
        <member name="E:CADImport.FaceModule.CADListView.SelectCellEvent">
            <summary>
            Occurs on user cell selection.
            </summary>
        </member>
        <member name="E:CADImport.FaceModule.CADListView.SelectItemEvent">
            <summary>
            Occurs on user item selection.
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.SelectColor">
            <summary>
            Gets or sets a highlight color of selected cells
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.ViewSize">
            <summary>
            Gets or sets the scrolling region size
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.ImageList">
            <summary>
            Gets or sets <see cref="T:System.Windows.Forms.ImageList">ImageList</see> for CADListView cells
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.SelectedCells">
            <summary>
            Gets or sets a list of the selected cells
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.MultipleSelection">
            <summary>
            Gets or sets the multiple selection mode
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.Items">
            <summary>
            Gets the CADListView cells list
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.HeaderStringFormat">
            <summary>
            Gets or sets the CADListView header string format
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.ItemStringFormat">
            <summary>
            Gets or sets CADListView cell string format
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.ShowGrid">
            <summary>
            Gets or sets grid visibility
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.GridColor">
            <summary>
            Gets or sets a color of the table grid
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.CellHeight">
            <summary>
            Gets or sets cells height
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.HeaderHeight">
            <summary>
            Gets or sets height of the table header
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.HeaderFont">
            <summary>
            Gets or sets a font of the table header
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.ItemFont">
            <summary>
            Gets or sets a font of CADListView cells
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.HeaderColor">
            <summary>
            Gets or sets a color of the table header
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.ItemColor">
            <summary>
            Gets or sets a color of CADListView cell
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.Columns">
            <summary>
            Returns the collection of all table headers of current control item
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.CADListView.Position">
            <summary>
            Gets or sets the scrolling position
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.ListHeader">
            <summary>
            Represents the CADListView header cell
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.ListHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> class.
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.ListHeader.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> class.
            </summary>
            <param name="name">A name</param>
            <param name="text">A text</param>
            <param name="width">Width</param>
        </member>
        <member name="P:CADImport.FaceModule.ListHeader.Index">
            <summary>
            Gets or sets a column number
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.ListHeader.Name">
            <summary>
            Gets or sets a column name
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.ListHeader.Text">
            <summary>
            Gets or sets a column header text
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.ListHeader.Width">
            <summary>
            Gets or sets a column width
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.ListItem">
            <summary>
            Represents the CADListView cell
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.ListItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.FaceModule.ListItem">ListItem</see> class.
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.ListItem.Clone">
            <summary>
            Creates a copy of the ListItem object
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADImport.FaceModule.ListItem.OnDrawCell(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Invokes the <see cref="E:CADImport.FaceModule.ListItem.DrawCellEvent"/> event.
            </summary>
            <param name="graph"><see cref="T:System.Drawing.Graphics">Graphics</see> drawing object</param>
            <param name="posX">The cell x-position</param>
            <param name="posY">The cell y-position</param>
            <param name="sizeX">The cell x-size</param>
            <param name="sizeY">The cell y-size</param>
        </member>
        <member name="M:CADImport.FaceModule.ListItem.Clear">
            <summary>
            Clears the ListItem object.
            </summary>
        </member>
        <member name="E:CADImport.FaceModule.ListItem.DrawCellEvent">
            <summary>
            Occurs on <see cref="T:CADImport.FaceModule.CADListView">CADListView</see> cell drawing method.
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.ListItem.ImageIndex">
            <summary>
            Gets or sets a cell number
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.ListItem.DrawColorRect">
            <summary>
            Gets or sets necessity of color rectangle drawing in the current cell
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.ListItem.ImageRect">
            <summary>
            Gets or sets borders of the image, drawn in a cell
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.ListItem.TextInVisible">
            <summary>
            Gets or sets text visibility in a cell
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.ListItem.BackColor">
            <summary>
            Gets or sets the background color of cells
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.ListItem.Selected">
            <summary>
            Gets or sets selection of the current cell
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.ListItem.Image">
            <summary>
            Gets or sets the image of an item.
            </summary>
        </member>
        <member name="P:CADImport.FaceModule.ListItem.Text">
            <summary>
            Gets or sets an item text
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.DrawListItemCell">
            <summary>
            Represents cell drawing method
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.ListHeaderCollection">
            <summary>
            Represents the <see cref="T:CADImport.FaceModule.CADListView"/> headers collection
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.ListHeaderCollection.Add(CADImport.FaceModule.ListHeader)">
            <summary>
            Adds a <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> to the <see cref="T:CADImport.FaceModule.ListHeaderCollection">ListHeaderCollection</see>.
            </summary>
            <param name="value">A <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> object to add to the collection.</param>
            <returns>The position into which the new <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> was inserted.</returns>
        </member>
        <member name="M:CADImport.FaceModule.ListHeaderCollection.IndexOf(CADImport.FaceModule.ListHeader)">
            <summary>
            Determines the index of the specified <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> in the collection.
            </summary>
            <param name="value">A <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> to locate in the collection.</param>
            <returns>The index of the <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:CADImport.FaceModule.ListHeaderCollection.Insert(System.Int32,CADImport.FaceModule.ListHeader)">
            <summary>
            Inserts a <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> into the collection at the specified position.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> will be inserted.</param>
            <param name="value">The <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> to insert into the collection.</param>
        </member>
        <member name="M:CADImport.FaceModule.ListHeaderCollection.Remove(CADImport.FaceModule.ListHeader)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> from the collection.
            </summary>
            <param name="value">A <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> to remove from the collection.</param>
        </member>
        <member name="M:CADImport.FaceModule.ListHeaderCollection.Contains(CADImport.FaceModule.ListHeader)">
            <summary>
            Determines whether the collection contains the specified <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see>.
            </summary>
            <param name="value">A <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> to locate in the collection.</param>
            <returns><b>true</b> if the <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> is found in the collection; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.FaceModule.ListHeaderCollection.OnValidate(System.Object)">
            <summary>
            Determines whether a specified object is a <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see>, and, 
            if not so, throws an <see cref="T:System.ArgumentException">ArgumentException</see>.
            </summary>
            <param name="value">An <see cref="T:System.Object">Object</see> to validate.</param>
        </member>
        <member name="P:CADImport.FaceModule.ListHeaderCollection.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> object at the specified index in the collection.
            </summary>
            <paramref name="index">The zero-based index of the <see cref="T:CADImport.FaceModule.ListHeader">ListHeader</see> to get or set.</paramref>
        </member>
        <member name="T:CADImport.FaceModule.ListItemCollection">
            <summary>
            Represents the CADListView cells collection
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.ListItemCollection.Add(CADImport.FaceModule.ListItem)">
            <summary>
            Adds a <see cref="T:CADImport.FaceModule.ListItem">ListItem</see> to the <see cref="T:CADImport.FaceModule.ListItemCollection">ListItemCollection</see>.
            </summary>
            <param name="value">A <see cref="T:CADImport.FaceModule.ListItem">ListItem</see> object to add to the collection.</param>
            <returns>The position into which the new <see cref="T:CADImport.FaceModule.ListItem">ListItem</see> was inserted.</returns>
        </member>
        <member name="M:CADImport.FaceModule.ListItemCollection.IndexOf(CADImport.FaceModule.ListItem)">
            <summary>
            Determines the index of the specified <see cref="T:CADImport.FaceModule.ListItem">ListItem</see> in the collection.
            </summary>
            <param name="value">A <see cref="T:CADImport.FaceModule.ListItem">ListItem</see> to locate in the collection.</param>
            <returns>The index of the <see cref="T:CADImport.FaceModule.ListItem">ListItem</see> if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:CADImport.FaceModule.ListItemCollection.Insert(System.Int32,CADImport.FaceModule.ListItem)">
            <summary>
            Inserts a <see cref="T:CADImport.FaceModule.ListItem">ListItem</see> into the collection at the specified position.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:CADImport.FaceModule.ListItem">ListItem</see> should be inserted.</param>
            <param name="value">The <see cref="T:CADImport.FaceModule.ListItem">ListItem</see> to insert into the collection.</param>
        </member>
        <member name="M:CADImport.FaceModule.ListItemCollection.Remove(CADImport.FaceModule.ListItem)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:CADImport.FaceModule.ListItem">ListItem</see> from the collection.
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.ListItemCollection.Contains(CADImport.FaceModule.ListItem)">
            <summary>
            Determines whether the collection contains the specified <see cref="T:CADImport.FaceModule.ListItem">ListItem</see>.
            </summary>
            <param name="value">A <see cref="T:CADImport.FaceModule.ListItem">ListItem</see> to locate in the collection.</param>
            <returns><b>true</b> if the <see cref="T:CADImport.FaceModule.ListItem">ListItem</see> is found in the collection; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CADImport.FaceModule.ListItemCollection.OnValidate(System.Object)">
            <summary>
            Determines whether a specified object is a <see cref="T:CADImport.FaceModule.ListItem">ListItem</see>, and, 
            if not so, throws an <see cref="T:System.ArgumentException">ArgumentException</see>.
            </summary>
            <param name="value">An <see cref="T:System.Object">Object</see> to validate.</param>
        </member>
        <member name="P:CADImport.FaceModule.ListItemCollection.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:CADImport.FaceModule.ListItem">ListItem</see> object at the specified index in the collection.
            </summary>
            <paramref name="index">The zero-based index of the <see cref="T:CADImport.FaceModule.ListItem">ListItem</see>.</paramref>
        </member>
        <member name="T:CADImport.FaceModule.ListCellSelectEventHandler">
            <summary>
            Represents a list of functions invoked on cell selection event
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.ListItemSelectEventHandler">
            <summary>
            Represents a list of functions invoked on item selection event
            </summary>
        </member>
        <member name="T:CADImport.FaceModule.ListEventSelectArgs">
            <summary>
            Contains parameters of cell selection event
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.ListEventSelectArgs.#ctor">
            <summary>
            Creates ListEventSelectArgs class instance
            </summary>
        </member>
        <member name="M:CADImport.FaceModule.ListEventSelectArgs.#ctor(System.Int32)">
            <summary>
            Creates ListEventSelectArgs class instance
            </summary>
            <param name="index">An index of the cell in collection</param>
        </member>
        <member name="P:CADImport.FaceModule.ListEventSelectArgs.ItemIndex">
            <summary>
            An index of the cell in collection
            </summary>
        </member>
        <member name="T:CADImport.Export.PDFMargins">
            <summary>
            Represents margins for a document page
            </summary>
        </member>
        <member name="F:CADImport.Export.PDFMargins.Left">
            <summary>
            Left border of margin rectangle
            </summary>
        </member>
        <member name="F:CADImport.Export.PDFMargins.Top">
            <summary>
            Top border of margin rectangle
            </summary>
        </member>
        <member name="F:CADImport.Export.PDFMargins.Right">
            <summary>
            Right border of margin rectangle
            </summary>
        </member>
        <member name="F:CADImport.Export.PDFMargins.Bottom">
            <summary>
            Bottom border of margin rectangle
            </summary>
        </member>
        <member name="F:CADImport.Export.PDFMargins.Enabled">
            <summary>
            Specifyies margins using
            </summary>
        </member>
        <member name="P:CADImport.Export.PDFMargins.Width">
            <summary>
            Gets the width of margin rectangle.
            </summary>
        </member>
        <member name="P:CADImport.Export.PDFMargins.Height">
            <summary>
            Gets the height of margin rectangle.
            </summary>
        </member>
        <member name="T:CADImport.Export.PDFPrecision">
            <summary>
            Represents precision options for export.
            </summary>
        </member>
        <member name="F:CADImport.Export.PDFPrecision.Integer">
            <summary>
            Integer precision
            </summary>
        </member>
        <member name="F:CADImport.Export.PDFPrecision.Quarter">
            <summary>
            1/4 of Single precision
            </summary>
        </member>
        <member name="F:CADImport.Export.PDFPrecision.Half">
            <summary>
            1/2 of Single precision
            </summary>
        </member>
        <member name="F:CADImport.Export.PDFPrecision.Single">
            <summary>
            Single precion
            </summary>
        </member>
        <member name="F:CADImport.Export.PDFPrecision.Double">
            <summary>
            Double precision
            </summary>
        </member>
        <member name="T:CADImport.Export.PDFExportSettings">
            <summary>
            Represents settings for exporting the current CAD file into PDF format.
            </summary>
        </member>
        <member name="F:CADImport.Export.PDFExportSettings.MMPerInch">
            <summary>
            Specifies a ratio between millimeters and inches for PDF export.
            </summary>
        </member>
        <member name="F:CADImport.Export.PDFExportSettings.MMPerPDFUnit">
            <summary>
            Specifies a ratio between millimeters and PDF units for PDF export.
            </summary>
        </member>
        <member name="M:CADImport.Export.PDFExportSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.PDFExportSettings">PDFExportSettings</see> class.
            </summary>
        </member>
        <member name="M:CADImport.Export.PDFExportSettings.GetClipRect(CADImport.DRect)">
            <summary>
            Returns a clipping rectangle.
            </summary>
        </member>
        <member name="M:CADImport.Export.PDFExportSettings.GetMarginRect">
            <summary>
            Returns a rectangle formed by margins.
            </summary>
        </member>
        <member name="M:CADImport.Export.PDFExportSettings.HasClipRect">
            <summary>
            Returns a value, specifying if clipping rectangle is defined.
            </summary>
        </member>
        <member name="P:CADImport.Export.PDFExportSettings.PageWidth">
            <summary>
            Gets or sets a width of PDF document page.
            </summary>
        </member>
        <member name="P:CADImport.Export.PDFExportSettings.PageHeight">
            <summary>
            Gets or sets a height of PDF document page.
            </summary>
        </member>
        <member name="P:CADImport.Export.PDFExportSettings.Precision">
            <summary>
            Gets or sets precision of PDF document.
            </summary>
        </member>
        <member name="P:CADImport.Export.PDFExportSettings.Quality">
            <summary>
            Gets or sets a quality of PDF document.
            </summary>
        </member>
        <member name="P:CADImport.Export.PDFExportSettings.Margins">
            <summary>
            Gets or sets margins for the page.
            </summary>
        </member>
        <member name="P:CADImport.Export.PDFExportSettings.Shift">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:CADImport.Export.PDFExportSettings.Centered">
            <summary>
            Specifies if a page is aligned to center.
            </summary>
        </member>
        <member name="P:CADImport.Export.PDFExportSettings.ClearStreamByDisposeOnly">
            <summary>
            Created PDF stream will be closed when disposing CADToPDF
            </summary>
        </member>
        <member name="P:CADImport.Export.PDFExportSettings.ClipRectangle">
            <summary>
            Gets or sets clipping rectangle.
            </summary>
        </member>
        <member name="T:CADImport.Export.CADToPDF">
            <summary>
            Provides functionality for exporting the current CAD file into PDF format.
            </summary>
        </member>
        <member name="M:CADImport.Export.CADToPDF.#ctor(CADImport.CADImage)">
            <summary>
            Initializes a new instance of the <see cref="T:CADImport.Export.CADToPDF">CADToPDF</see> class.
            </summary>
            <param name="img">A CAD image to export</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZipEvents">
            <summary>
            FastZipEvents supports all events applicable to <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip">FastZip</see> operations.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessDirectory">
            <summary>
            Delegate to invoke when processing directories.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessFile">
            <summary>
            Delegate to invoke when processing files.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.Progress">
            <summary>
            Delegate to invoke during processing of files.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.CompletedFile">
            <summary>
            Delegate to invoke when processing for a file has been completed.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.DirectoryFailure">
            <summary>
            Delegate to invoke when processing directory failures.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.FileFailure">
            <summary>
            Delegate to invoke when processing file failures.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.DirectoryFailure">directory failure</see> event.
            </summary>
            <param name="directory">The directory causing the failure.</param>
            <param name="e">The exception for this event.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnFileFailure(System.String,System.Exception)">
            <summary>
            Fires the <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.FileFailure"> file failure handler delegate</see>.
            </summary>
            <param name="file">The file causing the failure.</param>
            <param name="e">The exception for this failure.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnProcessFile(System.String)">
            <summary>
            Fires the <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessFile">ProcessFile delegate</see>.
            </summary>
            <param name="file">The file being processed.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnCompletedFile(System.String)">
            <summary>
            Fires the <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.CompletedFile"/> delegate
            </summary>
            <param name="file">The file whose processing has been completed.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Fires the <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessDirectory">process directory</see> delegate.
            </summary>
            <param name="directory">The directory being processed.</param>
            <param name="hasMatchingFiles">Flag indicating if the directory has matching files as determined by the current filter.</param>
            <returns>A <see cref="T:System.Boolean"/> of true if the operation should continue; false otherwise.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProgressInterval">
            <summary>
            The minimum timespan between <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.Progress"/> events.
            </summary>
            <value>The minimum period of time between <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.Progress"/> events.</value>
            <seealso cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.Progress"/>
            <remarks>The default interval is three seconds.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZip">
            <summary>
            FastZip provides facilities for creating and extracting zip files.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.#ctor(ICSharpCode.SharpZipLib.Zip.FastZipEvents)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip"/>
            </summary>
            <param name="events">The <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZipEvents">events</see> to use during operations.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip file.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">directory filter</see> to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Create a zip file/archive.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to obtain files and directories from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The file filter to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.CreateZip(System.IO.Stream,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip archive sending output to the <paramref name="outputStream"/> passed.
            </summary>
            <param name="outputStream">The stream to write archive data to.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">directory filter</see> to apply.</param>
            <remarks>The <paramref name="outputStream"/> is closed after creation.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.ExtractZip(System.String,System.String,System.String)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="fileFilter">A filter to apply to files.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.ExtractZip(System.String,System.String,ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite,ICSharpCode.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate,System.String,System.String,System.Boolean)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="overwrite">The style of <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite">overwriting</see> to apply.</param>
            <param name="confirmDelegate">A delegate to invoke when confirming overwriting.</param>
            <param name="fileFilter">A filter to apply to files.</param>
            <param name="directoryFilter">A filter to apply to directories.</param>
            <param name="restoreDateTime">Flag indicating whether to restore the date and time for extracted files.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.ExtractZip(System.IO.Stream,System.String,ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite,ICSharpCode.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Extract the contents of a zip file held in a stream.
            </summary>
            <param name="inputStream">The seekable input stream containing the zip to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="overwrite">The style of <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite">overwriting</see> to apply.</param>
            <param name="confirmDelegate">A delegate to invoke when confirming overwriting.</param>
            <param name="fileFilter">A filter to apply to files.</param>
            <param name="directoryFilter">A filter to apply to directories.</param>
            <param name="restoreDateTime">Flag indicating whether to restore the date and time for extracted files.</param>
            <param name="isStreamOwner">Flag indicating whether the inputStream will be closed by this method.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.CreateEmptyDirectories">
            <summary>
            Get/set a value indicating wether empty directories should be created.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.Password">
            <summary>
            Get / set the password value.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.NameTransform">
            <summary>
            Get or set the <see cref="T:ICSharpCode.SharpZipLib.Core.INameTransform"></see> active when creating Zip files.
            </summary>
            <seealso cref="P:ICSharpCode.SharpZipLib.Zip.FastZip.EntryFactory"></seealso>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.EntryFactory">
            <summary>
            Get or set the <see cref="T:ICSharpCode.SharpZipLib.Zip.IEntryFactory"></see> active when creating Zip files.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.UseZip64">
            <summary>
            Gets or sets the setting for <see cref="P:ICSharpCode.SharpZipLib.Zip.FastZip.UseZip64">Zip64 handling when writing.</see>
            </summary>
            <remarks>
            The default value is dynamic which is not backwards compatible with old
            programs and can cause problems with XP's built in compression which cant
            read Zip64 archives. However it does avoid the situation were a large file
            is added and cannot be completed correctly.
            NOTE: Setting the size for entries before they are added is the best solution!
            By default the EntryFactory used by FastZip will set fhe file size.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.RestoreDateTimeOnExtract">
            <summary>
            Get/set a value indicating wether file dates and times should 
            be restored when extracting files from an archive.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.RestoreAttributesOnExtract">
            <summary>
            Get/set a value indicating wether file attributes should
            be restored during extract operations
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite">
            <summary>
            Defines the desired handling when overwriting files during extraction.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite.Prompt">
            <summary>
            Prompt the user to confirm overwriting
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite.Never">
            <summary>
            Never overwrite files.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite.Always">
            <summary>
            Always overwrite files.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate">
            <summary>
            Delegate called when confirming overwriting of files.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader.mode">
            <summary>
            The current decode mode
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.NameFilter">
            <summary>
            NameFilter is a string matching class which allows for both positive and negative
            matching.
            A filter is a sequence of independant <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see> separated by semi-colons ';'.
            To include a semi-colon it may be quoted as in \;. Each expression can be prefixed by a plus '+' sign or
            a minus '-' sign to denote the expression is intended to include or exclude names.
            If neither a plus or minus sign is found include is the default.
            A given name is tested for inclusion before checking exclusions.  Only names matching an include spec 
            and not matching an exclude spec are deemed to match the filter.
            An empty filter matches any name.
            </summary>
            <example>The following expression includes all name ending in '.dat' with the exception of 'dummy.dat'
            "+\.dat$;-^dummy\.dat$"
            </example>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.#ctor(System.String)">
            <summary>
            Construct an instance based on the filter expression passed
            </summary>
            <param name="filter">The filter expression.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsValidExpression(System.String)">
            <summary>
            Test a string to see if it is a valid regular expression.
            </summary>
            <param name="expression">The expression to test.</param>
            <returns>True if expression is a valid <see cref="T:System.Text.RegularExpressions.Regex"/> false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsValidFilterExpression(System.String)">
            <summary>
            Test an expression to see if it is valid as a filter.
            </summary>
            <param name="toTest">The filter expression to test.</param>
            <returns>True if the expression is valid, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.SplitQuoted(System.String)">
            <summary>
            Split a string into its component pieces
            </summary>
            <param name="original">The original string</param>
            <returns>Returns an array of <see cref="T:System.String"/> values containing the individual filter elements.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.ToString">
            <summary>
            Convert this filter to its string equivalent.
            </summary>
            <returns>The string equivalent for this filter.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsIncluded(System.String)">
            <summary>
            Test a value to see if it is included by the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value is included, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsExcluded(System.String)">
            <summary>
            Test a value to see if it is excluded by the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value is excluded, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsMatch(System.String)">
            <summary>
            Test a value to see if it matches the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value matches, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.Compile">
            <summary>
            Compile this filter.
            </summary>
        </member>
        <member name="T:CADImport.CADImportControls.CADViewerControl">
            <summary>
            Provides a possibility of viewing CAD files. 
            </summary>
            <remarks><b>CADViewerControl</b> has an area where to view CAD files and 
            provides complete functionality for manipulating CAD images.</remarks>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.OnChangeLanguage(System.String,System.Int32)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportForms.OptionsForm.ChangeLanguage">ChangeLanguage</see> event
            </summary>
            <param name="val">A language to set</param>
            <param name="index">An index of a language in the language list</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.OnChangeEntityPanelVisible(System.Boolean)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeEntityPanelVisible">ChangeEntityPanelVisible</see> event
            </summary>
            <param name="val">A value of visibility of entities tree and properties inspector</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.OnChangeEntityPropertyGridVisible(System.Boolean)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeEntityPropertyGridVisible">ChangeEntityPropertyGridVisible</see> event
            </summary>
            <param name="val">A setting value of visibility of the entity properties inspector</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.OnChangeToolsPanelVisible(System.Boolean)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeToolsPanelVisible">ChangeToolsPanelVisible</see> event
            </summary>
            <param name="val">A setting value of tools panel visibility</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.OnChangeStatusBarVisible(System.Boolean)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeStatusBarVisible">ChangeStatusBarVisible</see> event
            </summary>
            <param name="val">A setting value of status panel visibility</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.OnChangeBackgroundColor(System.Boolean)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeBackgroundColor">ChangeBackgroundColor</see> event
            </summary>
            <param name="val">If <b>true</b> then background color of the <see cref="T:CADImport.CADImage">CADImage</see> is black,
            else the background color is white</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.OnChangeDrawingColors(System.Boolean)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeDrawingColors">ChangeDrawingColors</see> event
            </summary>
            <param name="val">If <b>false</b> then an image is drawn in black-and-white, else in color</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.OnChangeSnapEnable(System.Boolean)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeSnapEnable">ChangeSnapEnables</see> event
            </summary>
            <param name="val">Snap is disabled if <b>false</b>, else snap is enabled</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.OnChangeTextShow(System.Boolean)">
            <summary>
            Invokes <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeTextShow">ChangeTextShow</see> event
            </summary>
            <param name="val">If <b>false</b> texts are disabled, else - enabled</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.OnChangeDimensionShow(System.Boolean)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeDimensionShow">ChangeDimensionShow</see> event
            </summary>
            <param name="val">If <b>false</b> dimensions are disabled, else - enabled</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.OnChangeLineWeightShow(System.Boolean)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportControls.CADEditorControl.ChangeLineWeightShow">ChangeLineWeightShow</see> event
            </summary>
            <param name="val">If <b>false</b> line weight is disabled, else - enabled</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.OnEndLoadFile(System.Boolean)">
            <summary>
            Invokes the <see cref="E:CADImport.CADImportControls.CADEditorControl.EndLoadFile">EndLoadFile</see> event
            </summary>
            <param name="val">If <b>false</b> the loading is unsuccessful, else - successful</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:CADImport.CADImportControls.CADViewerControl">CADViewerControl</see> object. 
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.Zoom(System.Single)">
            <summary>
            Adjusts the image size according to the specified scale.
            </summary>
            <param name="i">A scale value.</param>
            <remarks>If the scale value is more than one the image size increases; otherwise, decreases.</remarks>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.ShowLoadFileDialog">
            <summary>
            Invokes open file dialog and loads specified file
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetCADImageOptions">
            <summary>
            Sets current properties for <see cref="P:CADImport.CADImportControls.CADViewerControl.Image">CADImage</see> for loading file
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.ShowRect(CADImport.DRect)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.LoadFile(System.String)">
            <summary>
            Loads a CAD file.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.EnableButton(System.Boolean)">
            <summary>
            Enables or disables buttons of the toolbar and menu items of the main menu.
            </summary>
            <param name="aVal"><b>true</b> if buttons and menu items are enabled; <b>false</b> if disabled.</param>
            <remarks>The buttons and menu items are enabled after loading a CAD file and become disabled after closing the file.</remarks>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.DoZoomIn">
            <summary>
            Increases a scale of the CAD image by twice.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.DoZoomOut">
            <summary>
            Decreases a ImageScale of the CAD image by twice.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.DrawCADImage(System.Drawing.Graphics,System.Windows.Forms.Control)">
            <summary>
            Draws a CAD image from the loaded CAD file.
            </summary>
            <param name="gr">A <see cref="T:System.Drawing.Graphics">Graphics</see> object used to draw the CAD entities.</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetSizePictureBox(System.Drawing.RectangleF)">
            <summary>
            Sets scroll region for <see cref="T:CADImport.FaceModule.CADPictureBox">CADPictureBox</see>
            </summary>
            <param name="sz">Size to set</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.GetRealPoint(System.Int32,System.Int32)">
            <summary>
            Gets a three-dimensional point of the current CAD image from the specified screen point.
            </summary>
            <param name="x">The X coordinate of a screen point.</param>
            <param name="y">The Y coordinate of a screen point.</param>
            <returns>A three-dimensional point.</returns>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SaveAsImage">
            <summary>
            Invokes the <see cref="T:System.Windows.Forms.SaveFileDialog">SaveFileDialog</see> box where 
            a user can select a directory and format for saving the current CAD image.
            </summary>
            <remarks><p>This method can be invoked from the toolbar and from the main menu.</p>
            <p>Images can be saved in the following formats: JPG, BMP, TIFF, GIF, EMF.</p></remarks>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.White_Click">
            <summary>
            Paints the CAD image background in the white color.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.ChangeControlState">
            <summary>
            Changes the current state of controls
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.Black_Click">
            <summary>
            Paints the CAD image background in the black color.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.Color_Click">
            <summary>
            Paints the CAD image background in the user defined color.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.Rotate2D(System.Single)">
            <summary>
            Rotates an image (2D rotation)
            </summary>
            <param name="angle">An angle to set (degrees)</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.GetFromClipboard">
            <summary>
            Loads raster image from the clipboard
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.ChangeSelectionCond(System.Boolean)">
            <summary>
            Enables/disables the entity selection mode
            </summary>
            <param name="invalidate">Parameter that indicates if it is necessary to redraw corrupted regions of the drawing</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.ChangeTypeFont">
            <summary>
            Enables or disables shx fonts
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.PutToClipboard">
            <summary>
            Puts an image as a raster to the clipboard
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.DoEnableRectangle(System.Boolean)">
            <summary>
            Enables or disables rectangle tool
            </summary>
            <param name="val">Value to set</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.Change3DAxesVisiblity">
            <summary>
            Shows or hides 3D axes.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.ChangeTextsVisiblity(System.Boolean)">
            <summary>
            Shows or hides texts in the current CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.ChangeDimensionsVisiblity(System.Boolean)">
            <summary>
            Shows or hides dimensions in the current CAD image.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.ReOpen">
            <summary>
            Reopens a file after selecting or deselecting SHX fonts. 
            </summary>
            <remarks>This method is also called when the paths to the files containing 
            SHX fonts have been edited in the <b>SHX Paths</b> window invoked by the <b>SHX Fonts</b> menu item.
            </remarks>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.ResetScaling">
            <summary>
            Sets the scale and position of the current CAD image to its original values.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetVisibleLayer(System.Boolean,System.Int32)">
            <summary>
            Sets layer's visibility
            </summary>
            <param name="visible">A value which specified layer's visibility will be set to</param>
            <param name="index">An index of a layer in the collection of layers</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetFreezeLayer(System.Boolean,System.Int32)">
            <summary>
            Sets freeze parameter for <see cref="T:CADImport.CADLayer">CADLayer</see>
            </summary>
            <param name="visible">A value which the specified layer's visibility will be set to</param>
            <param name="index">An index of the layer in the collection of layers</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetColorLayer(System.Drawing.Color,System.Int32)">
            <summary>
            Sets a color for layer (<see cref="T:CADImport.CADLayer">CADLayer</see>) specified by index 
            </summary>
            <param name="color">Color to set</param>
            <param name="index">An index of the layer in the collection of layers</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.Go3dOrbit(System.Boolean)">
            <summary>
            Alternately displays or hides the 3D Orbit tool.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.DoResize(System.Boolean)">
            <summary>
            Resizes the CAD image to fit drawing's bounds.
            </summary>
            <remarks>This method is invoked when changing layout or working with a 3D Orbit tool.</remarks>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.ViewLayouts">
            <summary>
            Creates a list of layouts of the CAD image and sets the current layout. 
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.ChangeCurrLayoutIndex">
            <summary>
            Changes current layout in accordance with its new index in the list of layouts.
            </summary>
            <remarks>A list of layouts is located below the toolbar.</remarks>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.AddSHXPaths">
            <summary>
            Displays a form in which a user can add or delete the paths to the SHX files.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.ChangeTreeVisiblity(System.Boolean)">
            <summary>
            Shows or hides a panel that contains the entities tree.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.CloseFile">
            <summary>
            Closes the currently opened CAD file.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.DoNormalColor">
            <summary>
            Displays a CAD image in all used colors.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.DoBlackColor">
            <summary>
            Displays a CAD image in black and white colors.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.UseWinEllipse">
            <summary>
            Alternately changes a boolean value indicating whether arcs and circles in the CAD image 
            are drawn with GDI+ drawing methods without linearization. 
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.ChangeShowLineWeight(System.Boolean)">
            <summary>
            Alternately changes a boolean value that indicates if a thickness of lines is determined by the file data.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetBackView">
            <summary>
            Sets back view of a drawing 
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetTopView">
            <summary>
            Sets the top view of a drawing 
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetBottomView">
            <summary>
            Sets bottom view of a drawing 
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetLeftView">
            <summary>
            Sets the left view of a drawing 
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetRightView">
            <summary>
            Sets the right view of a drawing 
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetFrontView">
            <summary>
            Sets the front view of a drawing 
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetSWIsometricView">
            <summary>
            Sets the SW isometric view of a drawing 
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetSEIsometricView">
            <summary>
            Sets the SE isometric view of a drawing 
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetNEIsometricView">
            <summary>
            Sets the NE isometric view of a drawing 
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetNWIsometricView">
            <summary>
            Sets the NW isometric view of a drawing 
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SetInitialView">
            <summary>
            Sets an initial view of a drawing
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SaveAsDXF(System.String)">
            <summary>
            Saves currently opened file as a DXF file
            </summary>
            <param name="fName">File name</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SaveAsDXF">
            <summary>
            Saves opened file to DXF format
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.ChangeDoubleBufferingMode">
            <summary>
            Enables/disables the double buffering mode
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.WriteTimeSpan(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            debug info
            </summary>		
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.NewProtectionSettings(System.Collections.SortedList)">
            <summary>
            Fills the specified list with the current protection settings.
            </summary>
            <param name="settingsLst">A <see cref="T:System.Collections.SortedList">SortedList</see> to fill with the current protection settings.</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.Register">
            <summary>
            Registers the <b>CADImportNet</b> library. 
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.Unregister">
            <summary>
            Closes all registration resources.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.SaveProtectionSettings(System.Collections.SortedList)">
            <summary>
            Makes the specified settings the current ones.
            </summary>
            <param name="settingsLst">A <see cref="T:System.Collections.SortedList">SortedList</see> containing the settings that will be made current.</param>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.InvalidateImage">
            <summary>
            Invalidates a specific region of the control and causes a paint message to be sent to the control.
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.ShowOpenFromWebForm">
            <summary>
            Opens a form to open a file from the web
            </summary>
        </member>
        <member name="M:CADImport.CADImportControls.CADViewerControl.Enable3DOrbit">
            <summary>
            Enables/disables 3DOrbit
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADViewerControl.ChangeLanguage">
            <summary>
            Occurs when the language of the application was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADViewerControl.ChangeEntityPanelVisible">
            <summary>
            Occurs when visibility of the entity tree was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADViewerControl.ChangeEntityPropertyGridVisible">
            <summary>
            Occurs when visibility of the entity properties inspector was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADViewerControl.ChangeToolsPanelVisible">
            <summary>
            Occurs when visibility of the tool panel was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADViewerControl.ChangeStatusBarVisible">
            <summary>
            Occurs when visibility of the status panel was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADViewerControl.ChangeBackgroundColor">
            <summary>
            Occurs when the background of the drawing was changed
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADViewerControl.ChangeDrawingColorsEvent">
            <summary>
            Occurs when the color type of the drawing was changed (black-and-white/color)
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADViewerControl.ChangeSnapEnable">
            <summary>
            Occurs when the snap was enabled or disabled
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADViewerControl.ChangeTextShow">
            <summary>
            Occurs when displaying of the texts was enabled or disabled
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADViewerControl.ChangeDimensionShow">
            <summary>
            Occurs when displaying of the dimensions was enabled or disabled
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADViewerControl.ChangeLineWeightShow">
            <summary>
            Occurs when displaying of the lines weight was enabled or disabled
            </summary>
        </member>
        <member name="E:CADImport.CADImportControls.CADViewerControl.EndLoadFile">
            <summary>
            Occurs when loading of the file was finished
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.Image">
            <summary>
            A CAD image displayed in the main application form.
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.ViewerCADPictureBox">
            <summary>
            Gets the <see cref="T:CADImport.FaceModule.CADPictureBox">CADPictureBox</see> control, where an image is drawn
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.CurrentXClickPosition">
            <summary>
            The X coordinate of the last mouse click position on the screen.
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.CurrentYClickPosition">
            <summary>
            The Y coordinate of the last mouse click position on the screen.
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.Orb3D">
            <summary>
            Gets or sets Orbit3D control
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.PreviousPosition">
            <summary>
            A previous position of the current CAD image relatively to the top-left corner of the viewer.
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.Position">
            <summary>
            A position of the current CAD image relatively to the top-left corner of the viewer.
            </summary>		
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.LeftImagePosition">
            <summary>
            Gets or sets a position of the drawing image by X axis
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.TopImagePosition">
            <summary>
            Gets or sets a position of the drawing image by Y axis
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.VisibleAreaSize">
            <summary>
            Gets or sets base dimensions of the image drawing area
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.ImageScale">
            <summary>
            Gets or sets a scale in which the current CAD image is displayed in the viewer.
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.ImagePreviousScale">
            <summary>
            A previous value of the scale in which the current CAD image is displayed in the viewer.
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.ImageRectangleF">
            <summary>
            Gets the current size and position of the drawing image
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.ImageDRect">
            <summary>
            Gets the current size and position of the drawing image
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.RegistrationForm">
            <summary>
            Gets or sets the registration window
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.OptionsForm">
            <summary>
            Gets or sets the <see cref="T:CADImport.CADImportForms.OptionsForm">settings window</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.LayerForm">
            <summary>
            Gets or sets the <see cref="T:CADImport.CADImportForms.LayerForm">layers settings window</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.RasterSizeForm">
            <summary>
            Gets the <see cref="T:CADImport.CADImportForms.SetRasterSizeForm"> SetRasterSizeForm window</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.AboutForm">
            <summary>
            Gets <see cref="T:CADImport.CADImportForms.AboutForm">'About' window</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.SHXForm">
            <summary>
            Gets or sets the <see cref="T:CADImport.CADImportForms.SHXForm">shx fonts settings window</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.PrintingForm">
            <summary>
            Gets or sets the <see cref="T:CADImport.Printing.PrintingForm">preview and printing settings window</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.SetRasterSizeForm">
            <summary>
            Gets or sets the <see cref="T:CADImport.CADImportForms.SetRasterSizeForm">settings window for raster images saving</see>
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.PrintPreviewDialog">
            <summary>
            Gets or sets the standard window of the print preview
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.ColorDraw">
            <summary>
            Gets a parameter to draw an image in color or black-and-white mode
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.DimensionVisible">
            <summary>
            Gets or sets dimensions visibility
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.TextVisible">
            <summary>
            Gets or sets texts visibility
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.ShowLineWeight">
            <summary>
            Gets or sets lines weight visibility
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.ToolsPanelVisible">
            <summary>
            Gets or sets tools panel visibility
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.ToolsPanel">
            <summary>
            Gets or sets the tools panel
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.StatusBarPanelVisible">
            <summary>
            Gets or sets visibility of the status bar panel
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.StatusBarPanel">
            <summary>
            Gets or sets the status bar panel
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.EntityTreeVisible">
            <summary>
            Gets or sets visibility of the entities tree
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.LayoutsPanelVisible">
            <summary>
            Gets or sets visibility of the layouts panel
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.EntityTree">
            <summary>
            Gets or sets the entities tree
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.EntityPropertyGridVisible">
            <summary>
            Gets or sets visibility of the entity properties grid
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.EntityPropertyGrid">
            <summary>
            Gets or sets the entity properties grid
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.PropertyEntityPanelVisible">
            <summary>
            Gets or sets visibility of the entity properties panel
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.OutFileName">
            <summary>
            Gets or sets a name of the file to save
            </summary>
        </member>
        <member name="P:CADImport.CADImportControls.CADViewerControl.InFileName">
            <summary>
            Gets or sets a name of the file to open
            </summary>
        </member>
    </members>
</doc>
